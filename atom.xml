<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Scarletsky]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://scarletsky.github.io/"/>
  <updated>2016-01-31T12:48:04.000Z</updated>
  <id>http://scarletsky.github.io/</id>
  
  <author>
    <name><![CDATA[Scarletsky]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在 Node.js 中利用 js-xlsx 处理 Excel 文件]]></title>
    <link href="http://scarletsky.github.io/2016-01-30-nodejs-process-excel/"/>
    <id>http://scarletsky.github.io/2016-01-30-nodejs-process-excel/</id>
    <published>2016-01-30T03:31:46.000Z</published>
    <updated>2016-01-31T12:48:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>本文介绍用 Node.js 中的 <code>js-xlsx</code> 库来处理 Excel 文件。<br><code>js-xlsx</code> 库是目前 Github 上 star 数量最多的处理 Excel 的库，功能强大，但上手难度稍大。文档有些乱，不适合快速上手。<br>本文对 <code>js-xlsx</code> 库进行一定的总结，并提供几个实用的例子供读者测试，学习，交流。</p>
<h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install xlsx</span><br></pre></td></tr></table></figure>
<h2 id="一些概念">一些概念</h2><p>在使用这个库之前，先介绍库中的一些概念。</p>
<ul>
<li><p><code>workbook</code> 对象，指的是整份 Excel 文档。我们在使用 <code>js-xlsx</code> 读取 Excel 文档之后就会获得 <code>workbook</code> 对象。</p>
</li>
<li><p><code>worksheet</code> 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 <code>worksheet</code> 对象。</p>
</li>
<li><p><code>cell</code> 对象，指的就是 <code>worksheet</code> 中的单元格，一个单元格就是一个 <code>cell</code> 对象。</p>
</li>
</ul>
<p>它们的关系如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// workbook</span></span><br><span class="line">&#123;</span><br><span class="line">    SheetNames: [<span class="string">'sheet1'</span>, <span class="string">'sheet2'</span>],</span><br><span class="line">    Sheets: &#123;</span><br><span class="line">        <span class="comment">// worksheet</span></span><br><span class="line">        <span class="string">'sheet1'</span>: &#123;</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">'A1'</span>: &#123; ... &#125;,</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">'A2'</span>: &#123; ... &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// worksheet</span></span><br><span class="line">        <span class="string">'sheet2'</span>: &#123;</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">'A1'</span>: &#123; ... &#125;,</span><br><span class="line">            <span class="comment">// cell</span></span><br><span class="line">            <span class="string">'A2'</span>: &#123; ... &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用法">用法</h2><h3 id="基本用法">基本用法</h3><ol>
<li>用 <code>XLSX.readFile</code> 打开 Excel 文件，返回 <code>workbook</code></li>
<li>用 <code>workbook.SheetNames</code> 获取表名</li>
<li>用 <code>workbook.Sheets[xxx]</code> 通过表名获取表格</li>
<li>按自己的需求去处理表格</li>
<li>生成新的 Excel 文件</li>
</ol>
<h3 id="具体用法">具体用法</h3><p>读取 Excel 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">'xlsx'</span>;</span><br><span class="line"><span class="keyword">const</span> workbook = XLSX.readFile(<span class="string">'someExcel.xlsx'</span>, opts);</span><br></pre></td></tr></table></figure>
<p>获取 Excel 文件中的表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 Excel 中所有表名</span></span><br><span class="line"><span class="keyword">const</span> sheetNames = workbook.SheetNames; <span class="comment">// 返回 ['sheet1', 'sheet2']</span></span><br><span class="line"><span class="comment">// 根据表名获取对应某张表</span></span><br><span class="line"><span class="keyword">const</span> worksheet = workbook.Sheets[sheetNames[<span class="number">0</span>]];</span><br></pre></td></tr></table></figure>
<p>通过 <code>worksheet[address]</code> 来操作表格，以 <code>!</code> 开头的 key 是特殊的字段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 A1 单元格对象</span></span><br><span class="line"><span class="keyword">let</span> a1 = worksheet[<span class="string">'A1'</span>]; <span class="comment">// 返回 &#123; v: 'hello', t: 's', ... &#125;</span></span><br><span class="line"><span class="comment">// 获取 A1 中的值</span></span><br><span class="line">a1.v <span class="comment">// 返回 'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取表的有效范围</span></span><br><span class="line">worksheet[<span class="string">'!ref'</span>] <span class="comment">// 返回 'A1:B20'</span></span><br><span class="line">worksheet[<span class="string">'!range'</span>] <span class="comment">// 返回 range 对象，&#123; s: &#123; r: 0, c: 0&#125;, e: &#123; r: 100, c: 2 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取合并过的单元格</span></span><br><span class="line">worksheet[<span class="string">'!merges'</span>] <span class="comment">// 返回一个包含 range 对象的列表，[ &#123;s: &#123; r: 0, c: 0 &#125;, c: &#123; r: 2, c: 1 &#125; &#125; ]</span></span><br></pre></td></tr></table></figure>
<h3 id="实战">实战</h3><h4 id="解析_Excel_生成_JSON">解析 Excel 生成 JSON</h4><p><strong>Tips</strong> 事实上，你可以直接通过 <code>XLSX.utils.sheet_to_json(worksheet)</code> 获得同样的结果</p>
<p><strong>注意</strong> 本例子中假设表的第一行为字段名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(worksheet);</span><br><span class="line">keys</span><br><span class="line">    <span class="comment">// 过滤以 ! 开头的 key</span></span><br><span class="line">    .filter(k =&gt; k[<span class="number">0</span>] !== <span class="string">'!'</span>)</span><br><span class="line">    <span class="comment">// 遍历所有单元格</span></span><br><span class="line">    .forEach(k =&gt; &#123;</span><br><span class="line">        <span class="comment">// 如 A11 中的 A</span></span><br><span class="line">        <span class="keyword">let</span> col = k.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如 A11 中的 11</span></span><br><span class="line">        <span class="keyword">let</span> row = <span class="built_in">parseInt</span>(k.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 当前单元格的值</span></span><br><span class="line">        <span class="keyword">let</span> value = worksheet[k].v;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存字段名</span></span><br><span class="line">        <span class="keyword">if</span> (row === <span class="number">1</span>) &#123;</span><br><span class="line">            headers[col] = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析成 JSON</span></span><br><span class="line">        <span class="keyword">if</span> (!data[row]) &#123;</span><br><span class="line">            data[row] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        data[row][headers[col]] = value;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// [ &#123; '姓名': 'test1', '年龄': 20 &#125;, &#123; '姓名': 'test2', '年龄': 10 &#125; ... ]</span></span><br></pre></td></tr></table></figure>
<h4 id="合并表格">合并表格</h4><p>步骤：</p>
<ol>
<li>读取多份表格</li>
<li>合并数组</li>
</ol>
<p><strong>Tips:</strong> 其实合并表格跟 <code>XLSX</code> 没什么关系，只是处理几个数组而已。</p>
<p>sheet1</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>test1</td>
<td>30</td>
</tr>
<tr>
<td>2</td>
<td>test2</td>
<td>20</td>
</tr>
<tr>
<td>3</td>
<td>test3</td>
<td>18</td>
</tr>
</tbody>
</table>
<p>sheet2</p>
<table>
<thead>
<tr>
<th>id</th>
<th>country</th>
<th>remark</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>China</td>
<td>hello</td>
</tr>
<tr>
<td>2</td>
<td>America</td>
<td>world</td>
</tr>
<tr>
<td>3</td>
<td>Unkonw</td>
<td>???</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sheet1 = XLSX.utils.sheet_to_json(sheet1);</span><br><span class="line"><span class="keyword">let</span> sheet2 = XLSX.utils.sheet_to_json(sheet2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先合并 sheet1 和 sheet2，再对统一处理</span></span><br><span class="line"><span class="keyword">const</span> result = sheet1.concat(sheet2).reduce((prev, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> index = prev.findIndex((elem, i) =&gt; elem.id === next.id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> prev.concat(next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev[index] = <span class="built_in">Object</span>.assign(&#123;&#125;, prev[index], next);</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ &#123; id: '1',</span></span><br><span class="line"><span class="comment">//    name: 'test1',</span></span><br><span class="line"><span class="comment">//    age: '30',</span></span><br><span class="line"><span class="comment">//    country: 'China',</span></span><br><span class="line"><span class="comment">//    remark: 'hello' &#125;,</span></span><br><span class="line"><span class="comment">//  &#123; id: '2',</span></span><br><span class="line"><span class="comment">//    name: 'test2',</span></span><br><span class="line"><span class="comment">//    age: '20',</span></span><br><span class="line"><span class="comment">//    country: 'America',</span></span><br><span class="line"><span class="comment">//    remark: 'world' &#125;,</span></span><br><span class="line"><span class="comment">//  &#123; id: '3',</span></span><br><span class="line"><span class="comment">//    name: 'test3',</span></span><br><span class="line"><span class="comment">//    age: '18',</span></span><br><span class="line"><span class="comment">//    country: 'Unkonw',</span></span><br><span class="line"><span class="comment">//    remark: '???' &#125; ]</span></span><br></pre></td></tr></table></figure>
<h4 id="导出表格">导出表格</h4><p>步骤：</p>
<ol>
<li>构建特定的数据结构，如下。</li>
<li>调用 <code>XLSX.writeFile(workbook, filename)</code> 即可。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// workbook</span></span><br><span class="line">&#123;</span><br><span class="line">    SheetNames: [<span class="string">'mySheet'</span>],</span><br><span class="line">    Sheets: &#123;</span><br><span class="line">        <span class="string">'mySheet'</span>: &#123;</span><br><span class="line">            <span class="string">'!ref'</span>: <span class="string">'A1:E4'</span>, <span class="comment">// 必须要有这个范围才能输出，否则导出的 excel 会是一个空表</span></span><br><span class="line">            A1: &#123; v: <span class="string">'id'</span> &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _headers = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'country'</span>, <span class="string">'remark'</span>]</span><br><span class="line"><span class="keyword">var</span> _data = [ &#123; id: <span class="string">'1'</span>,</span><br><span class="line">                name: <span class="string">'test1'</span>,</span><br><span class="line">                age: <span class="string">'30'</span>,</span><br><span class="line">                country: <span class="string">'China'</span>,</span><br><span class="line">                remark: <span class="string">'hello'</span> &#125;,</span><br><span class="line">              &#123; id: <span class="string">'2'</span>,</span><br><span class="line">                name: <span class="string">'test2'</span>,</span><br><span class="line">                age: <span class="string">'20'</span>,</span><br><span class="line">                country: <span class="string">'America'</span>,</span><br><span class="line">                remark: <span class="string">'world'</span> &#125;,</span><br><span class="line">              &#123; id: <span class="string">'3'</span>,</span><br><span class="line">                name: <span class="string">'test3'</span>,</span><br><span class="line">                age: <span class="string">'18'</span>,</span><br><span class="line">                country: <span class="string">'Unkonw'</span>,</span><br><span class="line">                remark: <span class="string">'???'</span> &#125; ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> headers = _headers</span><br><span class="line">                <span class="comment">// 为 _headers 添加对应的单元格位置</span></span><br><span class="line">                <span class="comment">// [ &#123; v: 'id', position: 'A1' &#125;,</span></span><br><span class="line">                <span class="comment">//   &#123; v: 'name', position: 'B1' &#125;,</span></span><br><span class="line">                <span class="comment">//   &#123; v: 'age', position: 'C1' &#125;,</span></span><br><span class="line">                <span class="comment">//   &#123; v: 'country', position: 'D1' &#125;,</span></span><br><span class="line">                <span class="comment">//   &#123; v: 'remark', position: 'E1' &#125; ]</span></span><br><span class="line">                .map((v, i) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;v: v, position: <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+i) + <span class="number">1</span> &#125;))</span><br><span class="line">                <span class="comment">// 转换成 worksheet 需要的结构</span></span><br><span class="line">                <span class="comment">// &#123; A1: &#123; v: 'id' &#125;,</span></span><br><span class="line">                <span class="comment">//   B1: &#123; v: 'name' &#125;,</span></span><br><span class="line">                <span class="comment">//   C1: &#123; v: 'age' &#125;,</span></span><br><span class="line">                <span class="comment">//   D1: &#123; v: 'country' &#125;,</span></span><br><span class="line">                <span class="comment">//   E1: &#123; v: 'remark' &#125; &#125;</span></span><br><span class="line">                .reduce((prev, next) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = _data</span><br><span class="line">              <span class="comment">// 匹配 headers 的位置，生成对应的单元格数据</span></span><br><span class="line">              <span class="comment">// [ [ &#123; v: '1', position: 'A2' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'test1', position: 'B2' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: '30', position: 'C2' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'China', position: 'D2' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'hello', position: 'E2' &#125; ],</span></span><br><span class="line">              <span class="comment">//   [ &#123; v: '2', position: 'A3' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'test2', position: 'B3' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: '20', position: 'C3' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'America', position: 'D3' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'world', position: 'E3' &#125; ],</span></span><br><span class="line">              <span class="comment">//   [ &#123; v: '3', position: 'A4' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'test3', position: 'B4' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: '18', position: 'C4' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: 'Unkonw', position: 'D4' &#125;,</span></span><br><span class="line">              <span class="comment">//     &#123; v: '???', position: 'E4' &#125; ] ]</span></span><br><span class="line">              .map((v, i) =&gt; _headers.map((k, j) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; v: v[k], position: <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+j) + (i+<span class="number">2</span>) &#125;)))</span><br><span class="line">              <span class="comment">// 对刚才的结果进行降维处理（二维数组变成一维数组）</span></span><br><span class="line">              <span class="comment">// [ &#123; v: '1', position: 'A2' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'test1', position: 'B2' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '30', position: 'C2' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'China', position: 'D2' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'hello', position: 'E2' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '2', position: 'A3' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'test2', position: 'B3' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '20', position: 'C3' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'America', position: 'D3' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'world', position: 'E3' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '3', position: 'A4' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'test3', position: 'B4' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '18', position: 'C4' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: 'Unkonw', position: 'D4' &#125;,</span></span><br><span class="line">              <span class="comment">//   &#123; v: '???', position: 'E4' &#125; ]</span></span><br><span class="line">              .reduce((prev, next) =&gt; prev.concat(next))</span><br><span class="line">              <span class="comment">// 转换成 worksheet 需要的结构</span></span><br><span class="line">              <span class="comment">//   &#123; A2: &#123; v: '1' &#125;,</span></span><br><span class="line">              <span class="comment">//     B2: &#123; v: 'test1' &#125;,</span></span><br><span class="line">              <span class="comment">//     C2: &#123; v: '30' &#125;,</span></span><br><span class="line">              <span class="comment">//     D2: &#123; v: 'China' &#125;,</span></span><br><span class="line">              <span class="comment">//     E2: &#123; v: 'hello' &#125;,</span></span><br><span class="line">              <span class="comment">//     A3: &#123; v: '2' &#125;,</span></span><br><span class="line">              <span class="comment">//     B3: &#123; v: 'test2' &#125;,</span></span><br><span class="line">              <span class="comment">//     C3: &#123; v: '20' &#125;,</span></span><br><span class="line">              <span class="comment">//     D3: &#123; v: 'America' &#125;,</span></span><br><span class="line">              <span class="comment">//     E3: &#123; v: 'world' &#125;,</span></span><br><span class="line">              <span class="comment">//     A4: &#123; v: '3' &#125;,</span></span><br><span class="line">              <span class="comment">//     B4: &#123; v: 'test3' &#125;,</span></span><br><span class="line">              <span class="comment">//     C4: &#123; v: '18' &#125;,</span></span><br><span class="line">              <span class="comment">//     D4: &#123; v: 'Unkonw' &#125;,</span></span><br><span class="line">              <span class="comment">//     E4: &#123; v: '???' &#125; &#125;</span></span><br><span class="line">              .reduce((prev, next) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并 headers 和 data</span></span><br><span class="line"><span class="keyword">var</span> output = <span class="built_in">Object</span>.assign(&#123;&#125;, headers, data);</span><br><span class="line"><span class="comment">// 获取所有单元格的位置</span></span><br><span class="line"><span class="keyword">var</span> outputPos = <span class="built_in">Object</span>.keys(output);</span><br><span class="line"><span class="comment">// 计算出范围</span></span><br><span class="line"><span class="keyword">var</span> ref = outputPos[<span class="number">0</span>] + <span class="string">':'</span> + outputPos[outputPos.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 workbook 对象</span></span><br><span class="line"><span class="keyword">var</span> wb = &#123;</span><br><span class="line">    SheetNames: [<span class="string">'mySheet'</span>],</span><br><span class="line">    Sheets: &#123;</span><br><span class="line">        <span class="string">'mySheet'</span>: <span class="built_in">Object</span>.assign(&#123;&#125;, output, &#123; <span class="string">'!ref'</span>: ref &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 Excel</span></span><br><span class="line">XLSX.writeFile(wb, <span class="string">'output.xlsx'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><p><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="external">https://github.com/SheetJS/js-xlsx</a><br><a href="http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json" target="_blank" rel="external">http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>本文介绍用 Node.js 中的 <code>js-xlsx</code> 库来处理 Excel 文件。<br><code>js-xlsx</code> 库是目前 Github 上 star 数量最多的处理 Excel 的库，功能强大，]]>
    </summary>
    
      <category term="excel" scheme="http://scarletsky.github.io/tags/excel/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="js-xlsx" scheme="http://scarletsky.github.io/tags/js-xlsx/"/>
    
      <category term="node" scheme="http://scarletsky.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单易懂的 Flexbox]]></title>
    <link href="http://scarletsky.github.io/2016-01-23-simple-flexbox/"/>
    <id>http://scarletsky.github.io/2016-01-23-simple-flexbox/</id>
    <published>2016-01-23T01:58:37.000Z</published>
    <updated>2016-01-23T06:06:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。</p>
<h2 id="基本用法">基本用法</h2><ol>
<li>设置父容器的 <code>display</code> 为 <code>flex</code>，然后调节容器相关的属性。</li>
<li>调节子元素相关的属性。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>2<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>3<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.container &#123; display: flex; ... &#125;</span><br><span class="line">.item &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<h2 id="具体用法">具体用法</h2><p>要使用 Flexbox 布局，你需要设置父容器和子元素的属性。</p>
<h3 id="父容器设置">父容器设置</h3><ol>
<li><p>启用 flex 布局 <code>display: flex | inline-flex</code></p>
</li>
<li><p>设置主轴方向 <code>flex-direction: row | row-reverse | column | column-reverse</code></p>
<ul>
<li><code>row</code> 默认值，从左到右</li>
<li><code>row-reverse</code> 从右到左</li>
<li><code>column</code> 从上到下</li>
<li><code>column-reverse</code> 从下到上</li>
</ul>
</li>
<li><p>设置子元素的换行方式 <code>flex-wrap: nowrap | wrap | wrap-reverse</code></p>
<ul>
<li><code>nowrap</code> 默认值，让所有子元素排在一行中</li>
<li><code>wrap</code> 自动换行，方向为从右到左。(这里的方向是指换行方向，不是指排列方向)</li>
<li><code>wrap-reverse</code> 自动换行，方向为从左到右</li>
</ul>
</li>
<li><p><code>flex-direction</code> 和 <code>flex-wrap</code> 的简写：<code>flex-flow: &lt;&#39;flex-direction&#39;&gt; || &lt;&#39;flex-wrap&#39;&gt;</code> </p>
</li>
<li><p>设置子元素的在主轴中对齐方式 <code>justify-content: flex-start | flex-end | center | space-between | space-around</code></p>
<ul>
<li><code>flex-start</code> 默认值，在起始位置对齐。和 <code>flex-direction: row</code> 一起用的话相当于左对齐，和 <code>flex-direction: column</code> 一起用的话相当于上对齐</li>
<li><code>flex-end</code> 在终点位置对齐</li>
<li><code>center</code> 居中对齐</li>
<li><code>space-bewteen</code> 第一个子元素会在起始位置，最后一个子元素会在终点位置，它们之间的元素会在剩余位置中平均分布</li>
<li><code>space-around</code> 所有元素都会平均分布在容器中。注意，视觉上元素不是平均分布的。那是因为所有元素所占的空间都被平均分了，元素两边都有空间，第一个元素和最后一个元素靠近容器的边缘只有一份空间，其他空白的地方都是有两份空间组成的，所以看起来两边的空间少，而中间的空间多。好好体会一下 <code>space-around</code> 字面上的意思就能理解了。</li>
</ul>
</li>
<li><p>设置子元素在侧轴中的对齐方式 <code>align-items: flex-start | flex-end | center | baseline | stretch</code></p>
<ul>
<li><code>stretch</code> 默认值，拉伸元素来填充父容器</li>
<li><code>flex-start</code> 在侧轴的起始位置对齐</li>
<li><code>flex-end</code> 在侧轴的终点位置对齐</li>
<li><code>center</code> 居中于侧轴</li>
<li><code>baseline</code> 在基线对齐</li>
</ul>
</li>
<li><p>设置侧轴中行(不是元素)的对齐方式 <code>align-content: flex-start | flex-end | center | space-between | space-around | stretch</code></p>
<ul>
<li><code>stretch</code> 默认值，拉伸行来填充剩余的空间</li>
<li><code>flex-start</code> 所有行在容器的起始位置对齐</li>
<li><code>flex-end</code> 所有行在容器的终点位置对齐</li>
<li><code>center</code> 所有行居中于容器</li>
<li><code>space-between</code> 类似 <code>justify-content: space-between</code></li>
<li><code>space-around</code> 类似 <code>justify-content: space-around</code></li>
</ul>
</li>
</ol>
<h3 id="子元素设置">子元素设置</h3><ol>
<li><p>设置元素的排序方式 <code>order: &lt;integer&gt;</code>，数字越小，排越前面。默认情况下是以文档流的先后顺序排序，负值合法。</p>
</li>
<li><p>调节元素的扩展能力 <code>flex-grow: &lt;number&gt;</code>，默认为1，增大该值表示该元素所占空间是其他元素的 n 倍，负值不合法。</p>
</li>
<li><p>调节元素的收缩能力 <code>flex-shrink: &lt;number&gt;</code>，默认为 1，减少该值表示该元素所站空间是其他元素的 1/n，负值不合法。</p>
</li>
<li><p>调节元素的基本大小：<code>flex-basis: &lt;length&gt; | auto</code>，默认为 auto。</p>
</li>
<li><p>上面属性的缩写：<code>flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</code></p>
</li>
<li><p>指定元素的排列方式，作用和容器中的 <code>align-items</code> 类似，优先级比 <code>align-items</code> 高。</p>
</li>
</ol>
<p><strong>注意：<code>float</code>, <code>clear</code>, <code>vertical-align</code> 在子元素中不起作用。</strong></p>
<h2 id="参考资料">参考资料</h2><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a><br><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html" target="_blank" rel="external">http://www.w3cplus.com/css3/a-guide-to-flexbox.html</a><br><a href="http://zh.learnlayout.com/flexbox.html" target="_blank" rel="external">http://zh.learnlayout.com/flexbox.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。</p>
<h2 id="基本用法">基本用法</h2><ol>
<li>设置父容器的 <code>display</code> 为 <code>flex]]>
    </summary>
    
      <category term="css" scheme="http://scarletsky.github.io/tags/css/"/>
    
      <category term="flexbox" scheme="http://scarletsky.github.io/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spacemacs 使用总结]]></title>
    <link href="http://scarletsky.github.io/2016-01-22-spacemacs-usage/"/>
    <id>http://scarletsky.github.io/2016-01-22-spacemacs-usage/</id>
    <published>2016-01-22T07:20:38.000Z</published>
    <updated>2016-01-23T02:49:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。</p>
<h2 id="安装_&amp;_使用">安装 &amp; 使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/syl20bnr/spacemacs ~/.emacs.d</span><br><span class="line">$ emacs</span><br></pre></td></tr></table></figure>
<h2 id="配置文件">配置文件</h2><p>Spacemacs 的配置文件位于 <code>~/.spacemacs</code> 中，我们只需要修改这个文件就可以制定自己的配置了。</p>
<p>一般情况下，我们只需要在 <code>dotspacemacs-configuration-layers</code> 中添加自己需要的 layer 就可以了。</p>
<h2 id="常用快捷键">常用快捷键</h2><h4 id="配置文件管理">配置文件管理</h4><p><code>SPC f e d</code> 快速打开配置文件 <code>.spacemacs</code><br><code>SPC f e R</code> 同步配置文件</p>
<h4 id="文件管理">文件管理</h4><p><code>SPC f f</code> 打开文件（夹），相当于 <code>$ open xxx</code> 或 <code>$ cd /path/to/project</code><br><code>SPC p f</code> 搜索文件名，相当于 ST / Atom 中的 <code>Ctrl + p</code><br><code>SPC s a p</code> 搜索内容，相当于 <code>$ ag xxx</code> 或 ST / Atom 中的 <code>Ctrl + Shift + f</code></p>
<p><code>SPC b k</code> 关闭当前 buffer<br><code>SPC SPC</code> 搜索当前文件 </p>
<h4 id="窗口管理">窗口管理</h4><p><code>SPC f t</code> 打开/关闭侧边栏，相当于 ST / Atom 中的 <code>Ctrl(cmd) + k + b</code></p>
<p><code>SPC 0</code> 光标跳转到侧边栏（NeoTree）中<br><code>SPC n(数字)</code> 光标跳转到第 n 个 buffer 中</p>
<p><code>SPC w s | SPC w -</code> 水平分割窗口<br><code>SPC w v | SPC w /</code> 垂直分割窗口<br><code>SPC w c</code> 关闭当前窗口</p>
<h4 id="对齐">对齐</h4><p><code>SPC j =</code> 自动对齐，相当于 beautify</p>
<h4 id="Shell_集成_(必须先配置_Shell_layer)">Shell 集成 (必须先配置 Shell layer)</h4><p><code>SPC &#39;(单引号)</code> 打开/关闭 Shell<br><code>C-k</code> 前一条 shell 命令，相当于在 shell 中按上箭头<br><code>C-j</code> 后一条 shell 命令，相当于在 shell 中按下箭头</p>
<h2 id="让_Spacemacs_支持_EditorConfig">让 Spacemacs 支持 EditorConfig</h2><p>EditorConfig 是一个配置文件，一般位于项目的根目录，它可以让不同的编辑器和IDE 都按照相同的格式来格式化代码，对于项目的维护者来说是一个很好的工具。</p>
<p>Spacemacs 也支持 EditorConfig，只需要在配置文件中添加配置即可。下面以 OS X 为例，通过以下步骤即可让 Spacemacs 支持 EditorConfig：</p>
<ol>
<li><code>$ brew install editorconfig</code></li>
<li><p>在 <code>~/.spacemacs</code> 中的 <code>dotspacemacs-additional-packages</code> 中添加 <code>editorconfig</code>：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="label">dotspacemacs</span>-<span class="keyword">additional-packages</span><br><span class="line"></span> <span class="string">'(</span><br><span class="line">   editorconfig</span><br><span class="line">   )</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 .editorconfig 文件，写上自己喜欢的配置。</p>
</li>
<li>完。</li>
</ol>
<h2 id="设置文件默认的主模式">设置文件默认的主模式</h2><p>虽然我们可以通过 <code>M-x</code> 来设置文件的主模式，但这种方式只是在单独修改某个文件的主模式时好用，如果要把所有同类型的文件都改成其他模式，这种方式的效率就太低了。</p>
<p>在 Spacemacs 中，我们可以用 <code>auto-mode-alist</code> 来设置某一类文件默认的主模式。</p>
<p>我们只需要在 <code>~/.spacemacs</code> 中的 <code>user-config</code> 中加入下面代码即可：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">(add-to-list &#39;auto-mode-alist &#39;(&#34;\\.js\\&#39;&#34; . react-mode))</span><br></pre></td></tr></table></figure>
<p>上面代码会用 <code>react-mode</code> 打开所有 <code>.js</code> 文件。</p>
<h2 id="Emacs_服务器">Emacs 服务器</h2><p>Spacemacs 会在启动时启动服务器，这个服务器会在 Spacemacs 关闭的时候被杀掉。</p>
<h3 id="使用_Emacs_服务器">使用 Emacs 服务器</h3><p>当 Emacs 服务器启动的时候，我们可以在命令行中使用 <code>emacsclient</code> 命令：</p>
<ul>
<li><code>$ emacsclient -c</code> 用 Emacs GUI 来打开文件</li>
<li><code>$ emacsclient -t</code> 用命令行中 Emacs 来打开文件</li>
</ul>
<h3 id="杀掉_Emacs_服务器">杀掉 Emacs 服务器</h3><p>除了关闭 Spacemacs 之外，我们还可以用下面的命令来杀掉 Emacs 服务器：</p>
<ul>
<li><code>$ emacsclient -e &#39;(kill-emacs)&#39;</code></li>
</ul>
<h3 id="持久化_Emacs_服务器">持久化 Emacs 服务器</h3><p>我们可以持久化 Emacs 服务器，在 Emacs 关闭的时候，服务器不被杀掉。只要设置 <code>~/.spacemacs</code> 中 <code>dotspacemacs-persistent-server</code> 为 <code>t</code> 即可。</p>
<p>但这种情况下，我们只可以通过以下方式来杀掉服务器了：</p>
<ul>
<li><code>SPC q q</code> 退出 Emacs 并杀掉服务器，会对已修改的 Buffer 给出保存的提示。</li>
<li><code>SPC q Q</code> 同上，但会丢失所有未保存的修改。</li>
</ul>
<h2 id="参考资料">参考资料</h2><p><a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org" target="_blank" rel="external">https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org</a><br><a href="http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/" target="_blank" rel="external">http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。</p>
<h2 id="安装_&amp;_使用">安装 &amp; 使用</h2><figure class="highlight bash"><t]]>
    </summary>
    
      <category term="emacs" scheme="http://scarletsky.github.io/tags/emacs/"/>
    
      <category term="spacemacs" scheme="http://scarletsky.github.io/tags/spacemacs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Localtunnel（Node.js 版） 使用教程]]></title>
    <link href="http://scarletsky.github.io/2016-01-17-localtunnel-usage/"/>
    <id>http://scarletsky.github.io/2016-01-17-localtunnel-usage/</id>
    <published>2016-01-17T09:07:06.000Z</published>
    <updated>2016-01-19T06:39:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。</p>
<h2 id="客户端">客户端</h2><h3 id="安装">安装</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ npm install -g localtunnel</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3><p>假设本地服务器在 8000 端口，我们可以通过下面的命令把本地服务器暴露到公网中</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ lt --port 8000&#10;your url is: https://uhhzexcifv.localtunnel.me</span><br></pre></td></tr></table></figure>
<p>通过上面的命令，我们不需要做其他设置就可以通过 <code>https://uhhzexcifv.localtunnel.me</code> 来访问我们本地服务器了。</p>
<p>由于 <code>localtunnel.me</code> 是国外的服务器，访问速度有时候不太理想，这时候我们可以自己搭建 localtunnel 的服务端。</p>
<h2 id="服务端">服务端</h2><h3 id="安装-1">安装</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/defunctzombie/localtunnel-server.git&#10;$ cd localtunnel-server&#10;$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="使用-1">使用</h3><p>以监听 2000 端口为例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># &#30452;&#25509;&#20351;&#29992;&#10;$ bin/server --port 2000&#10;&#10;# &#37197;&#21512; pm2 &#20351;&#29992;&#10;$ pm2 start bin/server --name lt -- --port 2000</span><br></pre></td></tr></table></figure>
<p>启动服务端程序后，我们只要在使用客户端 <code>lt</code> 时加上 <code>--host</code> 参数，就可以指定服务端了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># host &#21518;&#38754;&#19981;&#35201;&#21152; /&#10;$ lt --host http://helloworld.com:2000 --port 8000&#10;your url is: http://jhuyudvlum.helloworld.com:2000</span><br></pre></td></tr></table></figure>
<p>这样，我们就可以通过自己的代理服务器来访问本地服务器了，不用经过第三方代理服务器，不必担心代理服务器的安全问题。</p>
<h2 id="高级用法">高级用法</h2><h3 id="反向代理">反向代理</h3><p>在 Github 上面有一份 Nginx 的<a href="https://github.com/localtunnel/server/blob/master/devops/nginx/sites/localtunnel" target="_blank" rel="external">配置</a>，我们可以直接使用，或者按照自己的需要做些修改。</p>
<h3 id="指定子域名">指定子域名</h3><p>有时候，用随机字符串作为子域名并不是一件好事，我们可能需要固定的域名来访问本地服务器。这时，<code>lt --subdomain</code> 就可以派上用场了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># subdomain &#38480;&#21046;&#38271;&#24230;&#20026; 4 ~ 63&#10;$ lt --host http://helloworld.com:2000 --port 8000 --subdomain mysubdomain&#10;your url is: http://mysubdomain.helloworld.com:2000</span><br></pre></td></tr></table></figure>
<p>看到了吗？通过 <code>--subdomain</code>，我们就可以指定自己喜欢的子域名了。</p>
<h2 id="坑">坑</h2><p><strong>然而</strong>，如果我们通过 <code>--host</code> 来指定子域名，会发生什么？</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$ lt --host http://mysubdomain.hello.com --port 8000&#10;Error: localtunnel server returned an error, please try again</span><br></pre></td></tr></table></figure>
<p>就算配置了 Nginx 的反向代理，你依然会得到这个错误。可以查看 <a href="https://github.com/localtunnel/server/issues/21" target="_blank" rel="external">#21</a> 和  <a href="https://github.com/localtunnel/server/issues/31" target="_blank" rel="external">#31</a> 来看更多的细节。</p>
<p>要解决这个问题，最简单的就是 <strong>不用</strong> <code>--host</code> 来指定子域名，而用 <code>--subdomain</code> 来指定。</p>
<p>其实有好几个 pull request 都尝试去解决这个问题的，但不知道什么原因，作者一直没去合并。或者再过一段时间，这个问题就会解决，到时候， localtunnel 就会变得更加好用了。</p>
<h2 id="参考资料">参考资料</h2><p><a href="https://github.com/localtunnel/localtunnel" target="_blank" rel="external">https://github.com/localtunnel/localtunnel</a><br><a href="https://github.com/localtunnel/server" target="_blank" rel="external">https://github.com/localtunnel/server</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p>Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。</p>
<h2 id="客户端">客户端</h2><h3 id="安装">安装</h3><figure class="highlight"><table><tr><]]>
    </summary>
    
      <category term="localtunnel" scheme="http://scarletsky.github.io/tags/localtunnel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Little JavaScript Closures]]></title>
    <link href="http://scarletsky.github.io/2015-12-02-the-little-javascript-closures/"/>
    <id>http://scarletsky.github.io/2015-12-02-the-little-javascript-closures/</id>
    <published>2015-12-02T12:55:54.000Z</published>
    <updated>2016-01-19T06:39:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>本文尝试模仿 <a href="http://uternet.github.io/TLS/" target="_blank" rel="external">The Little Schema</a> 的风格，介绍 JavaScript 的闭包。本文同时也是我学习 JavaScript 闭包的一次总结。欢迎一起讨论。</p>
<h2 id="简介">简介</h2><p>什么是闭包？</p>
<blockquote>
<p>闭包是一个函数</p>
</blockquote>
<hr>
<p>闭包都是函数吗？</p>
<blockquote>
<p>是</p>
</blockquote>
<hr>
<p>函数都是闭包吗？</p>
<blockquote>
<p>不</p>
</blockquote>
<hr>
<p>我怎么判断一个函数是不是闭包？</p>
<blockquote>
<p>你现在还不能回答，因为你还不知道以下概念：<br>全局变量（Global Variable）<br>局部变量（Local Variable）<br>自由变量（Free Variable）<br>词法作用域（Lexical Scope）</p>
</blockquote>
<hr>
<h2 id="变量与作用域">变量与作用域</h2><p><code>var a = 1;</code> a 是什么变量？</p>
<blockquote>
<p>全局变量</p>
</blockquote>
<hr>
<p><code>a = 1;</code> a 是什么变量？</p>
<blockquote>
<p>全局变量</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 a，b 分别是什么变量？</p>
<blockquote>
<p>a 是全局变量，b 是局部变量</p>
</blockquote>
<hr>
<p>为什么 a 在函数中定义还是全局变量？</p>
<blockquote>
<p>因为 a 不是用 var 声明的</p>
</blockquote>
<hr>
<p>不用 <code>var</code> 声明的变量都是全局变量？</p>
<blockquote>
<p>是的</p>
</blockquote>
<hr>
<p>用 <code>var</code> 声明的变量都是局部变量？</p>
<blockquote>
<p>不是</p>
</blockquote>
<hr>
<p>为什么？</p>
<blockquote>
<p>在全局作用域中声明的变量都是全局变量，即使这个变量是用 var 声明的</p>
</blockquote>
<hr>
<p>全局作用域是什么？</p>
<blockquote>
<p>函数作用域以外的地方都是就是全局作用域</p>
</blockquote>
<hr>
<p>函数作用域又是什么？</p>
<blockquote>
<p>函数内部</p>
</blockquote>
<hr>
<p>可以举个例子吗？</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> baz = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>foo 变量和 bar 函数都处于全局作用域中，baz 变量处于函数作用域中</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码中有多少个作用域？</p>
<blockquote>
<p>2 个，foo 函数所处的全局作用域和 bar 变量所处的函数作用域</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码中有多少个作用域？</p>
<blockquote>
<p>3 个，foo 函数所处的全局作用域，bar 所处的函数作用域，和 test 所处的函数作用域</p>
</blockquote>
<hr>
<p>上面的 bar 变量和 baz 函数处于同一个作用域吗？</p>
<blockquote>
<p>是的，因为它们都在 foo 函数中</p>
</blockquote>
<hr>
<p>上面 test 变量和 bar，baz处于同一个作用域中吗？</p>
<blockquote>
<p>不是，因为 test 变量在 baz 函数中</p>
</blockquote>
<hr>
<p>JavaScript 用函数来划分作用域吗？</p>
<blockquote>
<p>是的</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure>
<p>会输出什么？</p>
<blockquote>
<p>Uncaught ReferenceError: bar is not defined</p>
</blockquote>
<hr>
<p>为什么会报错呢？</p>
<blockquote>
<p>因为外部作用域<strong>不能</strong>访问内部作用域</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure>
<p>会输出什么？</p>
<blockquote>
<p>1</p>
</blockquote>
<hr>
<p>为什么不会报错？</p>
<blockquote>
<p>因为内部作用域<strong>可以</strong>访问外部作用域</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<p>会输出什么？</p>
<blockquote>
<p>2</p>
</blockquote>
<hr>
<p>为什么不是输出 1 ？</p>
<blockquote>
<p>因为局部变量的优先级比外部变量高</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<p>会输出什么？</p>
<blockquote>
<p>undefined<br>2</p>
</blockquote>
<hr>
<p>为什么会这么奇怪？</p>
<blockquote>
<p>因为变量声明有变量提升（Variable Hoisting）的过程</p>
</blockquote>
<hr>
<p>变量提升是什么？</p>
<blockquote>
<p>声明语句会在执行前被处理，在任何地方声明一个变量，相当于在顶部位置声明</p>
</blockquote>
<hr>
<p>可以举个例子吗？</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bla = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bla;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bla;</span><br><span class="line">bla = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<p>这和之前的例子有什么关系？</p>
<blockquote>
<p>函数内部声明的变量，都会先在函数的顶部声明。所以之前的例子就相当于<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<p>什么是词法作用域？</p>
<blockquote>
<p>变量的作用域是由它在源代码中所处位置决定的（词法），并且嵌套的函数可以访问到其外层作用域中声明的变量。</p>
</blockquote>
<hr>
<p>这和上面说到的内部作用域可以访问外部作用域有什么区别吗？</p>
<blockquote>
<p>没有</p>
</blockquote>
<hr>
<p>什么是自由变量？</p>
<blockquote>
<p>在函数内部使用到，但既不是该函数的参数，也不是该函数的局部变量的变量。</p>
</blockquote>
<hr>
<p>可以举个例子吗？</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> baz = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(foo + baz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 bar 函数有三个变量：baz, console, foo<br>其中 baz 是局部变量， console 和 foo 都属于自由变量</p>
</blockquote>
<hr>
<p>为什么 console 和 foo 都是自由变量？</p>
<blockquote>
<p>因为 console 和 foo 都在全局作用域中，在 bar 函数中是通过引用的方式来使用 console 和 foo 的</p>
</blockquote>
<hr>
<p>还需要了解其他概念吗？</p>
<blockquote>
<p>不需要，现在已经可以深入了解闭包了</p>
</blockquote>
<hr>
<h2 id="闭包">闭包</h2><p>什么是闭包？</p>
<blockquote>
<p>闭包是一个内部函数 [注1]</p>
</blockquote>
<hr>
<p>内部函数都是闭包吗？</p>
<blockquote>
<p>不是，引用了自由变量的内部函数才是闭包</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>foo 函数是一个闭包吗？</p>
<blockquote>
<p>不是，因为 foo 函数不是一个内部函数</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bar 函数是一个闭包吗？</p>
<blockquote>
<p>不是，因为它只是一个内部函数，并没有引用自由变量</p>
</blockquote>
<hr>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bar 函数是一个闭包吗？</p>
<blockquote>
<p>是的，因为它是一个内部函数，同时引用了自由变量</p>
</blockquote>
<hr>
<p>闭包有什么特点？</p>
<blockquote>
<ol>
<li>闭包可以访问外部变量</li>
<li>闭包可以在外部函数返回之后依然保留外部变量的引用</li>
<li>闭包会保留外部变量的引用，不是该变量的值</li>
</ol>
</blockquote>
<hr>
<p>第一点在前面的例子中已经懂了。</p>
<blockquote>
<p>很好</p>
</blockquote>
<hr>
<p>第二点还没懂，可以举个例子吗？</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add5 = add(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">10</span>)) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>即便 add 函数已经返回，add5 中依然可以访问 x</p>
</blockquote>
<hr>
<p>第三点还没懂，可以举个例子吗？</p>
<hr>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getId: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> id; &#125;,</span><br><span class="line">    setId: <span class="function"><span class="keyword">function</span>(<span class="params">newId</span>) </span>&#123; id = newId &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = user();</span><br><span class="line">foo.getId(); <span class="comment">// 1</span></span><br><span class="line">foo.setId(<span class="number">2</span>);</span><br><span class="line">foo.getId(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>这里闭包中的 id 是一个引用，不是实际值</p>
</blockquote>
<hr>
<p>有点像私有方法？</p>
<blockquote>
<p>是的，我们可以用闭包来实现私有方法</p>
</blockquote>
<hr>
<p>闭包还可以用来做什么？</p>
<blockquote>
<p>闭包是函数式编程的骨架，掌握闭包之后你可以写出函数式 JavaScript 代码。</p>
</blockquote>
<hr>
<p>函数式编程是什么？</p>
<blockquote>
<p>这不是本文的讨论范围，自己去学习吧。</p>
</blockquote>
<hr>
<h2 id="One_More_Thing">One More Thing</h2><p>[注1] 根据 <a href="https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="external">Understanding JavaScript Closures</a> 这篇文章，事实上所有函数在创建的时候都会形成闭包。但这种闭包并没什么趣味，也没什么特别的用途，所以我们更关注的是由内部函数形成的闭包。</p>
<h2 id="参考资料">参考资料</h2><p><a href="http://uternet.github.io/TLS/" target="_blank" rel="external">http://uternet.github.io/TLS/</a><br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting</a><br><a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/" target="_blank" rel="external">http://javascriptissexy.com/understand-javascript-closures-with-ease/</a><br><a href="http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/" target="_blank" rel="external">http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/</a><br><a href="http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions" target="_blank" rel="external">http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions</a><br><a href="https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="external">https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/</a><br><a href="http://www.moye.me/2014/12/29/closure_higher-order-function/" target="_blank" rel="external">http://www.moye.me/2014/12/29/closure_higher-order-function/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="写在前面">写在前面</h2><p>本文尝试模仿 <a href="http://uternet.github.io/TLS/" target="_blank" rel="external">The Little Schema</a> 的风格，介绍 JavaScr]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-DnD 的使用]]></title>
    <link href="http://scarletsky.github.io/2015-11-17-react-dnd-usage/"/>
    <id>http://scarletsky.github.io/2015-11-17-react-dnd-usage/</id>
    <published>2015-11-17T02:59:31.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trello 和 Storify 这样的应用，在不同地方通过拖拽转移数据，而组件会改变它们的外观和应用的状态来响应拖拽事件。</p>
<h2 id="基本用法">基本用法</h2><ol>
<li>把应用的根组件包装在 <code>DragDropContext</code> 中</li>
<li>把可以拖拽的组件包装在 <code>DragSource</code> 中<ol>
<li>设置 type</li>
<li>设置 spec，让组件可以响应拖拽事件</li>
<li>设置 collect，把拖拽过程中需要信息注入组件的 props</li>
</ol>
</li>
<li>把可以接受拖拽的组件包装在 <code>DropTarget</code> 中<ol>
<li>设置 type</li>
<li>设置 spec，让组件可以响应拖拽事件</li>
<li>设置 collect，把拖拽过程中需要信息注入组件的 props</li>
</ol>
</li>
<li>完</li>
</ol>
<p>翻译成代码就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> HTML5Backend <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragDropContext &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DragDropContext(HTML5Backend)(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">import</span> &#123; DragSource &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DragSource(type, spec, collect)(MyComponent);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">import</span> &#123; DropTarget &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent2</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DropTarget(types, spec, collect)(MyComponent2);</span><br></pre></td></tr></table></figure>
<p>这样，MyComponent 就变得可以拖拽，而 MyComponent2 就变得可以接受拖拽了，但这并不代表 MyComponent 可以放到 MyComponent2 中！</p>
<h2 id="一些概念">一些概念</h2><p>React DnD 中有一些特殊的概念，理解这些概念之后才能活用这个库！</p>
<ul>
<li><code>Backend</code> 实现 DnD 的方式，默认是用 HTML5 DnD API，它不能在触屏环境下工作，而且在 IE 下可定制性比其他浏览器弱。你也可以用自己实现，具体请看官方文档。</li>
<li><code>Items</code> 拖拽数据的表现形式，用 Object 来表示。譬如，要拖拽一张卡片，那这张卡片的<strong>数据</strong>的表现形式可能是 <code>{ id: xxx, content: yyy }</code>。</li>
<li><code>Types</code> 表示拖/放组件的兼容性，<code>DragSource</code> 和 <code>DropTarget</code> 必须指定 <code>type</code>。只有在 <code>type</code> 相同的情况下，<code>DragSource</code> 才能放到 <code>DropTarget</code> 中。</li>
<li><code>Monitors</code> 用来响应拖拽事件，可以用来更新组件的的状态。</li>
<li><code>Connectors</code> 底层接触 DOM 的东西，用来封装你的组件，让你的组件有拖拽的特性。一般在 collect 方法中指定，然后注入到组件的 props 中，最后 render 方法中包装你自己的组件。</li>
<li><code>DragSource &amp;&amp; DropTarget</code> 把上面的概念都绑在一起的东西，也是真正跟你的组件打交道的东西。</li>
</ul>
<h2 id="主要_API_介绍">主要 API 介绍</h2><p>这些主要 API 都是通过包装你的组件，然后返回一个新的组件。</p>
<h3 id="DragDropContext(backend)">DragDropContext(backend)</h3><ul>
<li><code>backend</code> 实现 DnD 的方式，一般是 HTML5Backend</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DragDropContext(HTML5Backend)(App);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DragSource(type,_spec,_collect)">DragSource(type, spec, collect)</h3><h3 id="DropTarget(type,_spec,_collect)">DropTarget(type, spec, collect)</h3><ul>
<li><code>type</code> 必须。type 是自定义的，可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props。该组件只能放到相同 type 的 DropTarget 中。</li>
<li><code>spec</code> 必须。一个带有特定方法的纯 Object，里面是一些响应拖拽事件的方法。</li>
<li><code>collect</code> 必须。一个函数返回一个 Object，这个 Object 会注入到组件的 props 中。</li>
<li><code>options</code> 可选。除非有性能问题，否则不需要关心这个参数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="string">'xxx'</span>;</span><br><span class="line"><span class="keyword">const</span> spec = &#123; ... &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collect</span>(<span class="params">connect, monitor</span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DragSource(type, spec, collect)(MyComponent);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DropTarget(type, spec, collect)(MyComponent2);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DragSource#spec">DragSource#spec</h3><p>让你的组件响应 dnd 相关事件，支持以下方法：</p>
<ul>
<li><code>beginDrag(props, monitor, component)</code> <strong>必须</strong></li>
<li><code>endDrag(props, monitor, component)</code> 可选</li>
<li><code>canDrag(props, monitor)</code> 可选</li>
<li><code>isDragging(props, monitor)</code> 可选</li>
</ul>
<p>参数含义如下：</p>
<ul>
<li><code>props</code> 组件当前的 props</li>
<li><code>monitor</code> 是一个 <code>DragSourceMonitor</code> 实例，用来查询当前 drag state 的信息。</li>
<li><code>component</code> 表示当前组件，可以省略。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spec = &#123;</span><br><span class="line">    beginDrag(props) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; </span><br><span class="line">        	id: props.id, </span><br><span class="line">        	content: props.content</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DropTarget#spec">DropTarget#spec</h3><p>让你的组件响应 dnd 相关事件，支持以下方法：</p>
<ul>
<li><code>drop(props, monitor, component)</code> 可选，响应 drop 事件</li>
<li><code>hover(props, monitor, component)</code> 可选</li>
<li><code>canDrop(props, monitor)</code> 可选</li>
</ul>
<p>参数含义如下：</p>
<ul>
<li><code>props</code> 组件当前的 props</li>
<li><code>monitor</code> 是一个 <code>DropTargetMonitor</code> 实例，用来查询当前 drag state 的信息。</li>
<li><code>component</code> 表示当前组件，可以省略。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spec = &#123;</span><br><span class="line">	drop(props, monitor, component) &#123;</span><br><span class="line">		<span class="comment">// 获取正在拖放的数据</span></span><br><span class="line">		<span class="keyword">const</span> item = monitor.getItem();</span><br><span class="line">		<span class="comment">// 更新组件状态</span></span><br><span class="line">		component.setState(&#123;</span><br><span class="line">			item</span><br><span class="line">		&#125;)</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DragSource#collect(connect,_monitor)">DragSource#collect(connect, monitor)</h3><h3 id="DropTarget#collect(connect,_monitor)">DropTarget#collect(connect, monitor)</h3><p>返回一个 object，这个 object 可以会注入到组件的 props 中。</p>
<ul>
<li><code>connect</code> 一个 <code>DragSourceConnector</code>/<code>DropTargetConnector</code> 实例，可以用 <code>connect.dragSource()</code>/<code>connect.dropTarget()</code> 来封装我们的组件。</li>
<li><code>monitor</code> 一个 <code>DragSourceMonitor</code>/<code>DropTargetMonitor</code> 实例，用来查询当前拖拽的信息。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collect</span>(<span class="params">connect, monitor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        isDragging: monitor.isDragging(),</span><br><span class="line">        connectDragSource: connect.dragSource()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">	render() &#123;</span><br><span class="line">		<span class="comment">// 可以访问 collect 中返回的  object</span></span><br><span class="line">		<span class="keyword">const</span> &#123; isDragging, connectDragSource &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">		<span class="comment">// 需要用 connect.dragSource()/connect.dropTarget() 封装自己的组件</span></span><br><span class="line">		<span class="keyword">return</span> connectDragSource(</span><br><span class="line">			<span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span>123<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">		)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="具体例子">具体例子</h2><ul>
<li><a href="http://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html" target="_blank" rel="external">演示</a></li>
<li><a href="https://github.com/gaearon/react-dnd/tree/master/examples" target="_blank" rel="external">代码</a></li>
</ul>
<h2 id="参考资料">参考资料</h2><p><a href="http://gaearon.github.io/react-dnd/" target="_blank" rel="external">官方文档</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trello 和 Storify 这样的应用，在不同地方通过拖拽转移数据，而组件会改变它们的外观和应用的]]>
    </summary>
    
      <category term="react" scheme="http://scarletsky.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写在二十四岁生日]]></title>
    <link href="http://scarletsky.github.io/2015-10-25-birthday-summary/"/>
    <id>http://scarletsky.github.io/2015-10-25-birthday-summary/</id>
    <published>2015-10-25T09:38:50.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<p>又一年过去了，今年是第四年。<br>今年的生日是和女朋友一起，平平淡淡地过的。<br>回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。</p>
<p>相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着去挤时间——把上下班坐地铁/公交的时间利用起来。于是乎，这一年下来看的书大概有：</p>
<ul>
<li>《三体系列》</li>
<li>《啊哈，算法》</li>
<li>《黑客与画家》</li>
<li>《Rework-重来：更为简单有效的商业思维》</li>
<li>《失控》</li>
<li>《教训》</li>
<li>《跨界》</li>
<li>《把时间当朋友》</li>
<li>《JavaScript 函数式编程》</li>
<li>《The Little Schemer》</li>
<li>《实用 Common Lisp 编程》</li>
</ul>
<p>还有其他还没看完的技术书/文章。<br>这样看下来今年看得书不多不少，时间利用率还算可以吧。</p>
<p>从上面的书单可以看到，其实我今年开始去学习函数式语言了。我想去了解下面向对象之外的世界是怎样的。至于到底会不会用上这些技术，以后才知道，现在只管学就好了。</p>
<p>工作上面，今年年中的时候以前的老大找过我，问我要不要跟他一起干，说他能给我我现在拥有的一切给我，还把项目的一切控制权交给我，其实他们的项目前景还是挺好的，但跟我的技术栈不符合，加上我对他们所在行业不太感兴趣，所以只好推掉了~看以后还有没有机会合作~</p>
<p>另外，我今年还试着做了一个开源的网站，<a href="http://aniquo.com" target="_blank" rel="external">http://aniquo.com</a> 大家有兴趣的可以去围观一下。没什么特别有趣的东西，只有我自己收录的一些经典的语录而已。本来是想把它做成一个语录搜索系统的，但精力有限，现阶段大概算是一个可用的版本。至于用户量，从头到尾都只有我一个，233. 继续做这个的原因，只剩下情怀了。如果有人有兴趣的话，联系我吧~至于源码，到 github 搜下就找到了，写的很烂的东西。</p>
<p>今年的总结大概就这些了~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又一年过去了，今年是第四年。<br>今年的生日是和女朋友一起，平平淡淡地过的。<br>回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。</p>
<p>相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着]]>
    </summary>
    
      <category term="life" scheme="http://scarletsky.github.io/tags/life/"/>
    
      <category term="life" scheme="http://scarletsky.github.io/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js 中 Stream API 的使用]]></title>
    <link href="http://scarletsky.github.io/2015-10-22-node-stream-api-learning/"/>
    <id>http://scarletsky.github.io/2015-10-22-node-stream-api-learning/</id>
    <published>2015-10-22T09:09:06.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基本介绍">基本介绍</h2><p>在 Node.js 中，读取文件的方式有两种，一种是用 <code>fs.readFile</code>，另外一种是利用 <code>fs.createReadStream</code> 来读取。</p>
<p><code>fs.readFile</code> 对于每个 Node.js 使用者来说最熟悉不过了，简单易懂，很好上手。但它的缺点是会先将数据全部读入内存，一旦遇到大文件的时候，这种方式读取的效率就非常低下了。</p>
<p>而 <code>fs.createReadStream</code> 则是通过 Stream 来读取数据，它会把文件（数据）分割成小块，然后触发一些特定的事件，我们可以监听这些事件，编写特定的处理函数。这种方式相对上面来说，并不好上手，但它效率非常高。</p>
<p>事实上， Stream 在 Node.js 中并非仅仅用在文件处理上，其他地方也可以看到它的身影，如 <code>process.stdin/stdout</code>, <code>http</code>, <code>tcp sockets</code>, <code>zlib</code>, <code>crypto</code> 等都有用到。</p>
<p>本文是我学习 Node.js 中的 Stream API 中的一点总结，希望对大家有用。</p>
<h2 id="特点">特点</h2><ul>
<li>基于事件通讯</li>
<li>可以通过 <code>pipe</code> 来连接流</li>
</ul>
<h2 id="种类">种类</h2><ul>
<li>Readable Stream  可读数据流</li>
<li>Writeable Stream  可写数据流</li>
<li>Duplex Stream  双向数据流，可以同时读和写</li>
<li>Transform Stream 转换数据流，可读可写，同时可以转换（处理）数据</li>
</ul>
<h2 id="事件">事件</h2><h3 id="可读数据流的事件">可读数据流的事件</h3><ul>
<li><code>readable</code> 数据向外流时触发</li>
<li><code>data</code> 对于那些没有显式暂停的数据流，添加data事件监听函数，会将数据流切换到流动态，尽快向外提供数据</li>
<li><code>end</code> 读取完数据时触发。注意不能和 <code>writeableStream.end()</code> 混淆，writeableStream 并没有 end 事件，只有 <code>.end()</code> 方法</li>
<li><code>close</code> 数据源关闭时触发</li>
<li><code>error</code> 读取数据发生错误时触发</li>
</ul>
<h3 id="可写数据流的事件">可写数据流的事件</h3><ul>
<li><code>drain</code> <code>writable.write(chunk)</code> 返回 false 之后，缓存全部写入完成，可以重新写入时就会触发</li>
<li><code>finish</code> 调用 <code>.end</code> 方法时，所有缓存的数据释放后触发，类似于可读数据流中的 <strong>end</strong> 事件，表示写入过程结束</li>
<li><code>pipe</code> 作为 pipe 目标时触发</li>
<li><code>unpipe</code> 作为 unpipe 目标时触发</li>
<li><code>error</code> 写入数据发生错误时触发</li>
</ul>
<h2 id="状态">状态</h2><p>可读数据流有两种状态：<strong>流动态</strong> 和 <strong>暂停态</strong>，改变数据流状态的方法如下：</p>
<p><strong>暂停态 -&gt; 流动态</strong></p>
<ul>
<li>添加 data 事件的监听函数</li>
<li>调用 resume 方法</li>
<li>调用 pipe 方法</li>
</ul>
<p><strong>注意：</strong> 如果转为流动态时，没有 data 事件的监听函数，也没有 pipe 方法的目的地，那么数据将遗失。</p>
<p><strong>流动态 -&gt; 暂停态</strong></p>
<ul>
<li>不存在 pipe 方法的目的地时，调用 pause 方法</li>
<li>存在 pipe 方法的目的地时，移除所有 data 事件的监听函数，并且调用 unpipe 方法，移除所有 pipe 方法的目的地</li>
</ul>
<p><strong>注意：</strong> 只移除 data 事件的监听函数，并不会自动引发数据流进入「暂停态」。另外，存在 pipe 方法的目的地时，调用 pause 方法，并不能保证数据流总是处于暂停态，一旦那些目的地发出数据请求，数据流有可能会继续提供数据。</p>
<h2 id="用法">用法</h2><h3 id="读写文件">读写文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 新建可读数据流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'./test1.txt'</span>);</span><br><span class="line"><span class="comment">// 新建可写数据流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'./test2.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听可读数据流结束事件</span></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'read text1.txt successfully!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听可写数据流结束事件</span></span><br><span class="line">ws.on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'write text2.txt successfully!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 把可读数据流转换成流动态，流进可写数据流中</span></span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure>
<h3 id="读取_CSV_文件，并上传数据（我在生产环境中写过）">读取 CSV 文件，并上传数据（我在生产环境中写过）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> es = <span class="built_in">require</span>(<span class="string">'event-stream'</span>);</span><br><span class="line"><span class="keyword">var</span> csv = <span class="built_in">require</span>(<span class="string">'csv'</span>);</span><br><span class="line"><span class="keyword">var</span> parser = csv.parse();</span><br><span class="line"><span class="keyword">var</span> transformer = csv.transform(<span class="function"><span class="keyword">function</span>(<span class="params">record</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> record.join(<span class="string">','</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = fs.createReadStream(<span class="string">'./demo.csv'</span>);</span><br><span class="line">data</span><br><span class="line">    .pipe(parser)</span><br><span class="line">    .pipe(transformer)</span><br><span class="line">    <span class="comment">// 处理前一个 stream 传递过来的数据</span></span><br><span class="line">    .pipe(es.map(<span class="function"><span class="keyword">function</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">        upload(data, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            callback(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">// 相当于监听前一个 stream 的 end 事件</span></span><br><span class="line">    .pipe(es.wait(<span class="function"><span class="keyword">function</span>(<span class="params">err, body</span>) </span>&#123;</span><br><span class="line">        process.stdout.write(<span class="string">'done!'</span>);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure>
<h3 id="更多用法">更多用法</h3><p>可以参考一下 <a href="https://github.com/jeresig/node-stream-playground" target="_blank" rel="external">https://github.com/jeresig/node-stream-playground</a> ，进去示例网站之后直接点 add stream 就能看到结果了。</p>
<h2 id="常见坑">常见坑</h2><ul>
<li>用 <code>rs.pipe(ws)</code> 的方式来写文件并不是把 rs 的内容 append 到 ws 后面，而是直接用 rs 的内容覆盖 ws 原有的内容</li>
<li>已结束/关闭的流不能重复使用，必须重新创建数据流</li>
<li><p>pipe 方法返回的是目标数据流，如 <code>a.pipe(b)</code> 返回的是 b，因此监听事件的时候请注意你监听的对象是否正确</p>
<ul>
<li><p>如果你要监听多个数据流，同时你又使用了 pipe 方法来串联数据流的话，你就要写成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data end'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(a)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a end'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(b)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'b end'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="常用类库">常用类库</h2><ul>
<li><a href="https://github.com/dominictarr/event-stream" target="_blank" rel="external">event-stream</a> 用起来有函数式编程的感觉，个人比较喜欢</li>
<li><a href="https://github.com/sindresorhus/awesome-nodejs#streams" target="_blank" rel="external">awesome-nodejs#streams</a> 由于其他 stream 库我都没用过，所以有需求的就直接看这里吧</li>
</ul>
<h2 id="参考资料">参考资料</h2><p><a href="http://javascript.ruanyifeng.com/nodejs/stream.html" target="_blank" rel="external">阮一峰 - stream接口</a><br><a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">nodejs.org Stream</a><br><a href="http://codewinds.com/blog/2013-08-20-nodejs-transform-streams.html" target="_blank" rel="external">Transforming data with Node.js transform streams</a><br><a href="http://stackoverflow.com/questions/18335499/nodejs-whats-the-difference-between-a-duplex-stream-and-a-transform-stream" target="_blank" rel="external">NodeJS: What’s the difference between a Duplex stream and a Transform stream?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="基本介绍">基本介绍</h2><p>在 Node.js 中，读取文件的方式有两种，一种是用 <code>fs.readFile</code>，另外一种是利用 <code>fs.createReadStream</code> 来读取。</p>
<p><code>fs]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CommonJS 学习笔记]]></title>
    <link href="http://scarletsky.github.io/2015-08-19-commonjs-learning/"/>
    <id>http://scarletsky.github.io/2015-08-19-commonjs-learning/</id>
    <published>2015-08-19T02:11:10.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。</p>
<p>根据 CommonJS 规范，一个 JavaScript 文件就是一个模块，其他模块可以通过 <code>require</code> 来获取 <code>module.exports</code> 中暴露的内容，而其他部分都是私有的，其他模块不能访问。</p>
<h1 id="module_对象">module 对象</h1><p>每个模块都有一个module变量，该变量指向当前模块。module不是全局变量，而是每个模块都有的本地变量。</p>
<ul>
<li><p><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</p>
</li>
<li><p><code>module.filename</code> 模块的文件名。</p>
</li>
<li><p><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</p>
</li>
<li><p><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</p>
</li>
<li><p><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。数组中的内容是其他要用到的模块的 <code>module</code> 对象。</p>
</li>
<li><p><code>module.paths</code> 返回一个数组，表示模块查找路径，排在越前面的优先级越高。具体请查看 <a href="http://www.infoq.com/cn/articles/nodejs-module-mechanism/" target="_blank" rel="external">这里</a></p>
</li>
<li><p><code>module.exports</code> 表示其他模块可以通过 <code>require</code> 获取的内容。默认情况下是一个空对象，即 <code>{}</code>。</p>
</li>
</ul>
<h1 id="module-exports_和_exports">module.exports 和 exports</h1><p>默认情况下，<code>module.exports</code> 和 <code>exports</code> 两者是等价的，即 <code>module.exports === exports</code></p>
<p><code>exports</code> 只是为了方便我们编码而添加的，相当于在每个文件中自动添加了 <code>var exports = module.exports</code>。</p>
<p>我们可以根据个人喜好，把需要暴露的东西挂在 <code>exports</code> 或 <code>module.exports</code> 下。</p>
<p><strong>但是</strong>，必须注意以下几点：</p>
<ul>
<li><p>不能把 <code>exports</code> 重新赋值，因为这样会令 <code>exports</code> 不再指向 <code>module.exports</code>，这样 <code>exports</code> 就没用了。</p>
</li>
<li><p>我们可以通过 <code>module.exports = function() {...}</code> 这种方式指定 <code>module.exports</code> 的指向，这样在其他模块中 <code>require</code> 这个模块，获得的就是一个 <code>function</code>，而不是一个对象。这样做也会导致 <code>exports</code> 失效。</p>
</li>
<li><p>由于上面的原因，我们会在很多地方看到 <code>module.exports = exports = xxx</code> 这样的代码。</p>
</li>
</ul>
<h1 id="参考资料">参考资料</h1><p><a href="http://javascript.ruanyifeng.com/nodejs/commonjs.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/nodejs/commonjs.html</a><br><a href="http://www.infoq.com/cn/articles/nodejs-module-mechanism/" target="_blank" rel="external">http://www.infoq.com/cn/articles/nodejs-module-mechanism/</a><br><a href="http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js" target="_blank" rel="external">http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概述">概述</h1><p>CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。</p>
<p>根据 CommonJS 规范，一个 JavaScript 文件就是一个模块，其他模块可以通过 <code>require</code]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 中 Object.defineProperty 的使用]]></title>
    <link href="http://scarletsky.github.io/2015-08-18-Object-learning-in-javascript/"/>
    <id>http://scarletsky.github.io/2015-08-18-Object-learning-in-javascript/</id>
    <published>2015-08-18T09:57:31.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Object-defineProperty">Object.defineProperty</h1><blockquote>
<p>The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</p>
</blockquote>
<p>直接在一个对象上定义一个新的属性，或修改一个已经存在的属性。这个方法会返回该对象。</p>
<h3 id="语法">语法</h3><p><code>Object.defineProperty(obj, prop, descriptor)</code></p>
<h3 id="参数">参数</h3><ul>
<li><p><code>Object obj</code> 目标对象</p>
</li>
<li><p><code>String prop</code> 需要定义的属性</p>
</li>
<li><p><code>Object descriptor</code> 该属性拥有的特性，可设置的值有：</p>
<ul>
<li><p><code>value</code> 属性的值，默认为 <code>undefined</code>。</p>
</li>
<li><p><code>writable</code> 该属性是否可写，如果设置成 <code>false</code>，则任何对该属性改写的操作都无效（但不会报错），默认为 <code>false</code>。</p>
</li>
<li><p><code>get</code> 一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 <code>undefined</code>。</p>
</li>
<li><p><code>set</code> 一旦目标对象设置该属性，就会调用这个方法。默认为 <code>undeinfed</code>。</p>
</li>
<li><p><code>configurable</code> 如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化，默认为 <code>false</code>。</p>
</li>
<li><p><code>enumerable</code> 是否能在for…in循环中遍历出来或在Object.keys中列举出来。默认为 <code>false</code>。</p>
</li>
</ul>
</li>
</ul>
<h4 id="注意"><strong>注意</strong></h4><p>在 <code>descriptor</code> 中不能<strong>同时</strong>设置访问器 (<code>get</code> 和 <code>set</code>) 和 <code>wriable</code> 或 <code>value</code>，否则会报以下错误：<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Invalid <span class="keyword">property</span>.  A <span class="keyword">property</span> cannot both have accessors <span class="keyword">and</span> be writable <span class="keyword">or</span> have a value</span><br></pre></td></tr></table></figure></p>
<h3 id="实际应用">实际应用</h3><p>我们知道，在 <code>Express.js</code> 升级到 4.0 之后，它把很多功能从核心库中移除了。当我们访问那些被移除的属性时，它会报错，告诉我们该属性已经被移除了。这个功能就是通过 <code>Object.defineProperty</code> 来实现的。看看源码吧：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">'json'</span>,</span><br><span class="line">  <span class="string">'urlencoded'</span>,</span><br><span class="line">  <span class="string">'bodyParser'</span>,</span><br><span class="line">  <span class="string">'compress'</span>,</span><br><span class="line">  <span class="string">'cookieSession'</span>,</span><br><span class="line">  <span class="string">'session'</span>,</span><br><span class="line">  <span class="string">'logger'</span>,</span><br><span class="line">  <span class="string">'cookieParser'</span>,</span><br><span class="line">  <span class="string">'favicon'</span>,</span><br><span class="line">  <span class="string">'responseTime'</span>,</span><br><span class="line">  <span class="string">'errorHandler'</span>,</span><br><span class="line">  <span class="string">'timeout'</span>,</span><br><span class="line">  <span class="string">'methodOverride'</span>,</span><br><span class="line">  <span class="string">'vhost'</span>,</span><br><span class="line">  <span class="string">'csrf'</span>,</span><br><span class="line">  <span class="string">'directory'</span>,</span><br><span class="line">  <span class="string">'limit'</span>,</span><br><span class="line">  <span class="string">'multipart'</span>,</span><br><span class="line">  <span class="string">'staticCache'</span>,</span><br><span class="line">].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(exports, name, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Most middleware (like '</span> + name + <span class="string">') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="Object-defineProperties">Object.defineProperties</h1><blockquote>
<p>The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.</p>
</blockquote>
<p>和 <code>Object.defineProperty</code> 类似，只不过这个方法可以设置多个属性。</p>
<h3 id="语法-1">语法</h3><p><code>Object.defineProperties(obj, props)</code></p>
<h3 id="参数-1">参数</h3><ul>
<li><p><code>Object obj</code> 目标对象</p>
</li>
<li><p><code>Object props</code> 要为目标对象添加的属性，其中 <code>key</code> 和 <code>value</code> 分别代表 <code>Object.defineProperty</code> 中的第二和第三个参数。</p>
</li>
</ul>
<h1 id="参考资料">参考资料</h1><p><a href="http://www.cnblogs.com/rubylouvre/archive/2010/09/19/1831128.html" target="_blank" rel="external">http://www.cnblogs.com/rubylouvre/archive/2010/09/19/1831128.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a><br><a href="https://github.com/strongloop/express/blob/master/lib/express.js" target="_blank" rel="external">https://github.com/strongloop/express/blob/master/lib/express.js</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Object-defineProperty">Object.defineProperty</h1><blockquote>
<p>The Object.defineProperty() method defines a new property directly ]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用 Gulp 处理前端工作流程]]></title>
    <link href="http://scarletsky.github.io/2015-08-14-use-gulp-for-front-end-workflow/"/>
    <id>http://scarletsky.github.io/2015-08-14-use-gulp-for-front-end-workflow/</id>
    <published>2015-08-14T08:57:33.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本用法">基本用法</h1><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line">gulp.task<span class="params">('foo', function<span class="params">()</span> &#123;</span><br><span class="line">    gulp.src<span class="params">(glob)</span></span><br><span class="line">        .pipe<span class="params">(...)</span></span><br><span class="line">        .pipe<span class="params">(...)</span></span><br><span class="line">        .pipe<span class="params">(gulp.dest<span class="params">(...)</span>)</span></span><br><span class="line">        .pipe<span class="params">(...)</span></span><br><span class="line">        .pipe<span class="params">(gulp.dest<span class="params">(...)</span>)</span></span><br><span class="line">&#125;)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shell</span></span><br><span class="line">$ gulp foo</span><br></pre></td></tr></table></figure>
<h1 id="基本_API">基本 API</h1><ul>
<li><p><code>gulp.src(glob[, options])</code></p>
<ul>
<li>根据 <code>glob</code> 匹配文件，返回 <code>stream</code>，可以通过 <code>.pipe()</code> 方法传递给后续的插件。</li>
</ul>
</li>
<li><p><code>gulp.dest(path[, options])</code></p>
<ul>
<li><p>一般用法 <code>.pipe(gulp.dest(path))</code>，把 <code>pipe</code> 中的内容按照指定的 <code>path</code> 写成文件，会自动创建不存在的文件夹。</p>
</li>
<li><p>注意，可以通过 <code>.pipe</code> 多次指定输出的地方，具体请看 <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options" target="_blank" rel="external">这里</a></p>
</li>
</ul>
</li>
<li><p><code>gulp.task(name[, deps], fn)</code></p>
<ul>
<li><p>定义名为 <code>name</code> 的任务，定义之后就可以在命令行中使用 <code>gulp xxx</code> 来执行任务。</p>
</li>
<li><p><code>deps</code> 里面的任务全部完成后才会执行 <code>fn</code></p>
</li>
<li><p><code>deps</code> 里面的任务都是并行执行的，如果需要顺序执行，需要特殊写法。具体看 <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#return-a-promise" target="_blank" rel="external">这里</a></p>
</li>
</ul>
</li>
<li><p><code>gulp.watch(glob[, opts, cb])</code></p>
<ul>
<li><p>监听文件变化</p>
</li>
<li><p>根据<a href="http://stackoverflow.com/questions/22391527/gulps-gulp-watch-not-triggered-for-new-or-deleted-files" target="_blank" rel="external">这个帖子</a>，<code>gulp.watch</code> 不会监听新文件（目录），所以一般你会需要 <a href="https://github.com/floatdrop/gulp-watch" target="_blank" rel="external">gulp-watch</a></p>
</li>
</ul>
</li>
</ul>
<h1 id="常用命令_（自定义）">常用命令 （自定义）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for development mode</span></span><br><span class="line">gulp server</span><br><span class="line"></span><br><span class="line"><span class="comment"># run test</span></span><br><span class="line">gulp <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for production mode</span></span><br><span class="line">gulp build</span><br></pre></td></tr></table></figure>
<h2 id="gulp_server_流程"><code>gulp server</code> 流程</h2><ul>
<li><p>把 <code>less</code>, <code>sass</code>, 之类的文件编译成 CSS，常用插件：</p>
<ul>
<li><p><a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">gulp-less</a></p>
</li>
<li><p><a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="external">gulp-sass</a></p>
</li>
</ul>
</li>
<li><p>创建 Web Server (with Live Reload)，常用：</p>
<ul>
<li><p><a href="https://github.com/AveVlad/gulp-connect" target="_blank" rel="external">gulp-connect</a>，用来创建 Web Server，其实还有其他选择的，但多数都是利用 <a href="https://github.com/senchalabs/connect" target="_blank" rel="external">connect</a> 来创建 Web Server 的。</p>
</li>
<li><p><a href="https://github.com/andrewrk/node-proxy-middleware" target="_blank" rel="external">node-proxy-middle</a>，用来代理请求，可以把 <code>/api/xxx</code> 发送到指定的地址。(常用于 SPA 开发)</p>
</li>
<li><p><a href="https://github.com/tinganho/connect-modrewrite" target="_blank" rel="external">connect-modrewrite</a>，匹配资源，如果不匹配就可以重定向到指定地址。(常用于 SPA 开发)</p>
</li>
<li><p><a href="https://github.com/bripkens/connect-history-api-fallback" target="_blank" rel="external">connect-history-api-fallback</a>，作用同上，也用于匹配资源，但用起来简单很多。(常用于 SPA 开发)</p>
</li>
</ul>
</li>
<li><p>监听文件变化，常用插件：</p>
<ul>
<li><a href="https://github.com/floatdrop/gulp-watch" target="_blank" rel="external">gulp-watch</a></li>
</ul>
</li>
</ul>
<h3 id="示例代码">示例代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean:css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    del.sync(<span class="string">'app/styles/*.css'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'less'</span>, [<span class="string">'clean:css'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stream = gulp</span><br><span class="line">            .src(<span class="string">'app/styles/main.less'</span>)</span><br><span class="line">            .pipe(less())</span><br><span class="line">            .pipe(gulp.dest(<span class="string">'app/styles/'</span>));</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">'./app'</span>,</span><br><span class="line">        port: <span class="number">9000</span>,</span><br><span class="line">        livereload: <span class="literal">true</span>,</span><br><span class="line">        middleware: <span class="function"><span class="keyword">function</span> (<span class="params">connect, o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line">                    <span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'proxy-middleware'</span>);</span><br><span class="line">                    <span class="keyword">var</span> options = url.parse(<span class="string">'http://localhost:3000/api'</span>);</span><br><span class="line">                    options.route = <span class="string">'/api'</span>;</span><br><span class="line">                    <span class="keyword">return</span> proxy(options);</span><br><span class="line">                &#125;)(),</span><br><span class="line">                modRewrite([</span><br><span class="line">                    <span class="string">'!\\.html|\\.js|\\.css|\\.swf|\\.jp(e?)g|\\.png|\\.gif|\\.eot|\\.woff|\\.ttf|\\.svg$ /index.html'</span></span><br><span class="line">                ])</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp</span><br><span class="line">        .src(<span class="string">'app/styles/**/*.less'</span>, &#123;read: <span class="literal">false</span>&#125;)</span><br><span class="line">        .pipe(watch(<span class="string">'app/styles/**/*.less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> gulp</span><br><span class="line">                .src(<span class="string">'app/styles/main.less'</span>)</span><br><span class="line">                .pipe(less())</span><br><span class="line">                .pipe(gulp.dest(<span class="string">'app/styles/'</span>))</span><br><span class="line">                .pipe(connect.reload());</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    gulp</span><br><span class="line">        .src([<span class="string">'app/scripts/**/*.js'</span>, <span class="string">'app/**/*.html'</span>])</span><br><span class="line">        .pipe(watch([<span class="string">'app/scripts/**/*.js'</span>, <span class="string">'app/**/*.html'</span>]))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'server'</span>, [<span class="string">'less'</span>, <span class="string">'connect'</span>, <span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure>
<h2 id="gulp_build_流程"><code>gulp build</code> 流程</h2><ul>
<li><p>清理 <code>dist/</code> 文件夹</p>
<ul>
<li><a href="https://github.com/sindresorhus/del" target="_blank" rel="external">del</a>，根据 <code>glob</code> 来删除文件/目录</li>
</ul>
</li>
<li><p>压缩文件</p>
<ul>
<li><p><a href="https://github.com/jonschlinkert/gulp-htmlmin" target="_blank" rel="external">gulp-htmlmin</a>，压缩 <code>html</code> 文件</p>
</li>
<li><p><a href="https://github.com/murphydanger/gulp-minify-html" target="_blank" rel="external">gulp-minify-html</a>，同上</p>
</li>
<li><p><a href="https://github.com/chilijung/gulp-cssmin" target="_blank" rel="external">gulp-cssmin</a>，压缩 <code>css</code> 文件</p>
</li>
<li><p><a href="https://github.com/murphydanger/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a>，同上，封装了 <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="external">clean-css</a>，star 比上面的多</p>
</li>
<li><p><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a>，混淆 <code>JavaScript</code> 代码</p>
</li>
<li><p><a href="https://github.com/zont/gulp-usemin" target="_blank" rel="external">gulp-usemin</a>，合并指定 <code>block</code> 中的文件</p>
</li>
<li><p><a href="https://github.com/sindresorhus/gulp-rev" target="_blank" rel="external">gulp-rev</a>，给静态文件加上版本号，如 <code>app.js</code> -&gt; <code>app-d41d8cd98f.js</code></p>
</li>
</ul>
</li>
<li><p>复制其他文件到 <code>dist/</code></p>
<ul>
<li><code>gulp.src(...).pipe(gulp.dest(...))</code></li>
</ul>
</li>
</ul>
<h3 id="实例代码">实例代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'clean:build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    del.sync(<span class="string">'dist/'</span>, &#123;force: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify'</span>, [<span class="string">'clean:build'</span>, <span class="string">'less'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp</span><br><span class="line">        .src(<span class="string">'app/views/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlmin(&#123;collapseWhitespace: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/views'</span>));</span><br><span class="line"></span><br><span class="line">    gulp</span><br><span class="line">        .src(<span class="string">'app/index.html'</span>)</span><br><span class="line">        .pipe(usemin(&#123;</span><br><span class="line">            js: [uglify(), rev()],</span><br><span class="line">            css: [minifyCss(), <span class="string">'concat'</span>, rev()]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'copyfonts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp</span><br><span class="line">        .src(<span class="string">'app/styles/fonts/*'</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'clean:build'</span>, <span class="string">'minify'</span>, <span class="string">'copyfonts'</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><p><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">英文文档</a><br><a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">中文文档</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基本用法">基本用法</h1><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulpf]]>
    </summary>
    
      <category term="gulp" scheme="http://scarletsky.github.io/tags/gulp/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongo Shell 使用过程中遇到的坑]]></title>
    <link href="http://scarletsky.github.io/2015-08-11-mongo-shell-trap/"/>
    <id>http://scarletsky.github.io/2015-08-11-mongo-shell-trap/</id>
    <published>2015-08-11T04:17:47.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="编写_js_脚本">编写 js 脚本</h1><ul>
<li><p>js 脚本中不能包含 <code>use</code> 关键字，需要用 <code>$ mongo mydb xxx.js</code> 这样的方式来指定数据库</p>
</li>
<li><p>不能用 <code>console.log</code>，需要用 <code>print</code> 代替</p>
</li>
<li><p>调用 <code>ObjectId()</code> 时需要确保传进去的值为字符串，否则会出现 <code>Error: invalid object id: length</code></p>
</li>
<li><p>使用 <code>$set</code> 来设置数字时需要注意，mongo shell 默认会把所有数字类型的值转换成浮点型，如果你需要插入整形，你需要用 <code>NumberInt()</code> 或 <code>NumberLong()</code> 来代替。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ mongo mydb test.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">var</span> users = db.users.find(&#123;&#125;);</span><br><span class="line">users.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not console.log(u._id) !!</span></span><br><span class="line">    <span class="comment">// use print instead of console!</span></span><br><span class="line">    print(u._id);</span><br><span class="line"></span><br><span class="line">    db.users.update(&#123;</span><br><span class="line">        _id: ObjectId(<span class="string">''</span> + u._id) <span class="comment">// make sure the params is string</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        $set: &#123;</span><br><span class="line">            money: NumberInt(<span class="number">100</span>) <span class="comment">// it will be int, not float.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><p><a href="http://stackoverflow.com/questions/8218484/mongodb-inserts-float-when-trying-to-insert-integer" target="_blank" rel="external">http://stackoverflow.com/questions/8218484/mongodb-inserts-float-when-trying-to-insert-integer</a></p>
<p><a href="http://docs.mongodb.org/manual/core/shell-types/" target="_blank" rel="external">http://docs.mongodb.org/manual/core/shell-types/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="编写_js_脚本">编写 js 脚本</h1><ul>
<li><p>js 脚本中不能包含 <code>use</code> 关键字，需要用 <code>$ mongo mydb xxx.js</code> 这样的方式来指定数据库</p>
</li>
<li><p]]>
    </summary>
    
      <category term="mongodb" scheme="http://scarletsky.github.io/tags/mongodb/"/>
    
      <category term="mongodb" scheme="http://scarletsky.github.io/categories/mongodb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试总结]]></title>
    <link href="http://scarletsky.github.io/2015-08-07-interview-summary/"/>
    <id>http://scarletsky.github.io/2015-08-07-interview-summary/</id>
    <published>2015-08-07T13:32:41.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="面试前的准备">面试前的准备</h1><ul>
<li><p>了解该公司的业务</p>
<ul>
<li>如果不了解的话，面试的时候 HR 们那些一系列专业的术语会让你头晕</li>
</ul>
</li>
<li><p>想清楚你为什么不去投其他公司（如BAT）</p>
</li>
<li><p>想清楚该公司哪些方面吸引你，常见的有</p>
<ul>
<li><p>办公环境优雅</p>
</li>
<li><p>技术先进</p>
</li>
<li><p>工作自由</p>
</li>
<li><p>福利待遇好</p>
</li>
<li><p>业务熟悉</p>
</li>
</ul>
</li>
<li><p>想清楚你要问的问题，常见的有</p>
<ul>
<li><p>期望工资（互联网行业跳槽一般涨幅 10% ~ 20% —— By 某 HR）</p>
</li>
<li><p>试用期长度</p>
</li>
<li><p>工作情况（几点上下班，一周上几天，加班怎么办）</p>
</li>
<li><p>各种制度（打卡，加班，调休，激励，补助）</p>
</li>
<li><p>是否社保（五险一金）</p>
</li>
</ul>
</li>
<li><p>想清楚你目前公司产品（你参与过的项目）的状况</p>
<ul>
<li><p>优点</p>
</li>
<li><p>缺点</p>
</li>
<li><p>当初选择这种架构/技术的原因</p>
</li>
<li><p>是否出现过问题？怎么解决？</p>
</li>
</ul>
</li>
<li><p>想清楚你问什么要离开现在的公司</p>
<ul>
<li><p>自身发展（技术，业务）达到瓶颈？</p>
</li>
<li><p>待遇不佳</p>
</li>
<li><p>工作强度大</p>
</li>
<li><p>为了更好的待遇</p>
</li>
</ul>
</li>
<li><p>想清楚你想加入什么样的公司/团队（你理想中的公司/团队是怎样的）</p>
<ul>
<li><p>所处的行业</p>
</li>
<li><p>技术水平</p>
</li>
<li><p>为什么</p>
</li>
</ul>
</li>
</ul>
<h1 id="面试中">面试中</h1><ul>
<li><p>介绍自己</p>
<ul>
<li><p>谈谈自己的成长经历</p>
</li>
<li><p>谈谈自己对未来的期待</p>
</li>
</ul>
</li>
<li><p>聊面试前准备的问题，相互问答。注意几点：</p>
<ul>
<li><p>不要紧张</p>
</li>
<li><p>想清楚，组织清楚语言再回答</p>
</li>
</ul>
</li>
<li><p>你觉得刚才的 HR 怎么样？（多轮面试下会问到），注意：</p>
<ul>
<li><p>不要无中生有</p>
</li>
<li><p>回答尽量圆滑</p>
</li>
</ul>
</li>
</ul>
<h1 id="面试后">面试后</h1><ul>
<li><p>冷静下来，再次思考</p>
<ul>
<li><p>新公司和旧公司之间的差别</p>
</li>
<li><p>跳槽的目的</p>
</li>
<li><p>跳槽是否有必要</p>
</li>
</ul>
</li>
<li><p>衡量跳槽的成本</p>
<ul>
<li><p>搬家成本（如果需要搬家的话）</p>
</li>
<li><p>交通成本</p>
</li>
<li><p>适应新环境所需时间</p>
</li>
<li><p>是否会带来其他问题</p>
</li>
</ul>
</li>
<li><p>做出决定</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="面试前的准备">面试前的准备</h1><ul>
<li><p>了解该公司的业务</p>
<ul>
<li>如果不了解的话，面试的时候 HR 们那些一系列专业的术语会让你头晕</li>
</ul>
</li>
<li><p>想清楚你为什么不去投其他公司（如BAT）<]]>
    </summary>
    
      <category term="career" scheme="http://scarletsky.github.io/tags/career/"/>
    
      <category term="life" scheme="http://scarletsky.github.io/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Support Design Library 注意事项]]></title>
    <link href="http://scarletsky.github.io/2015-07-06-android-support-design-library-experience/"/>
    <id>http://scarletsky.github.io/2015-07-06-android-support-design-library-experience/</id>
    <published>2015-07-05T15:45:02.000Z</published>
    <updated>2016-01-19T06:39:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="CoordinatorLayout">CoordinatorLayout</h1><p>这个新 Layout 是 FrameLayout 的加强版，用来协调各个子 view 的行为。最主要是用来实现 Toolbar 的折叠效果，也可以用来实现 FAB 自动消失的效果。</p>
<p>常见的用法如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span></span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span></span><br><span class="line">        xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_gravity=<span class="string">"fill_vertical"</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">        android:<span class="attribute">background</span>=<span class="string">"@android:color/white"</span></span><br><span class="line">        app:layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;FrameLayout</span><br><span class="line">            android:id=<span class="string">"@+id/frame_image_toolbar_content"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            &gt;</span><br><span class="line">        &lt;/FrameLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android<span class="class">.support</span><span class="class">.v4</span><span class="class">.widget</span><span class="class">.NestedScrollView</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span></span><br><span class="line">        android:id=<span class="string">"@+id/appbar"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"256dp"</span></span><br><span class="line">        android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span></span><br><span class="line">            android:id=<span class="string">"@+id/collapsing_toolbar_wrapper"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            app:contentScrim=<span class="string">"?attr/colorPrimary"</span></span><br><span class="line">            app:expandedTitleMarginEnd=<span class="string">"64dp"</span></span><br><span class="line">            app:expandedTitleMarginStart=<span class="string">"48dp"</span></span><br><span class="line">            app:layout_scrollFlags=<span class="string">"scroll|exitUntilCollapsed"</span></span><br><span class="line">            &gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">"@+id/collapsing_toolbar_image"</span></span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">                android:scaleType=<span class="string">"centerCrop"</span></span><br><span class="line">                app:layout_collapseMode=<span class="string">"parallax"</span></span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br><span class="line">                android:id=<span class="string">"@+id/collapsing_toolbar"</span></span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"?attr/actionBarSize"</span></span><br><span class="line">                app:layout_collapseMode=<span class="string">"pin"</span></span><br><span class="line">                app:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span><br><span class="line">                app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>CollapsingToolbarLayout.setTitle 代替 Toolbar.setTitle</li>
<li>NestedScrollView 中必须添加 <code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code> 属性之后，里面的内容才会位于 AppBarLayout 之下</li>
<li>NestedScrollView 中 <code>android:layout_gravity=&quot;fill_vertical&quot;</code> 和 <code>android:layout_marginBottom=&quot;?attr/actionBarSize&quot;</code> 属性不是必须的，但如果内容不够高，则内容会位于屏幕底部，而不是 AppBarLayout 下面。<code>layout_gravity=&quot;fill_vertical&quot;</code> 可以修复这个问题。</li>
</ul>
<h1 id="参考资料">参考资料</h1><p><a href="http://segmentfault.com/a/1190000002888109" target="_blank" rel="external">Android Support Design 中 CoordinatorLayout 与 Behaviors 初探</a><br><a href="http://stackoverflow.com/questions/30612310/android-nestedscrollview-has-wrong-size-after-applayout-behavior" target="_blank" rel="external">http://stackoverflow.com/questions/30612310/android-nestedscrollview-has-wrong-size-after-applayout-behavior</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="CoordinatorLayout">CoordinatorLayout</h1><p>这个新 Layout 是 FrameLayout 的加强版，用来协调各个子 view 的行为。最主要是用来实现 Toolbar 的折叠效果，也可以用来实现 FAB 自动消失的效]]>
    </summary>
    
      <category term="android" scheme="http://scarletsky.github.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView 基本用法]]></title>
    <link href="http://scarletsky.github.io/2015-06-29-recyclerview-basic-usage/"/>
    <id>http://scarletsky.github.io/2015-06-29-recyclerview-basic-usage/</id>
    <published>2015-06-29T12:55:00.000Z</published>
    <updated>2016-01-19T06:39:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本用法">基本用法</h1><ul>
<li><p>在 XML 中添加 <code>&lt;android.support.v7.widget.RecyclerView/&gt;</code></p>
</li>
<li><p>编写继承 <code>RecyclerView.Adapter&lt;RecyclerViewAdapter.ViewHolder&gt;</code> 的 <code>Adapter</code></p>
<ul>
<li><code>Constructor</code></li>
<li>编写继承 <code>RecyclerView.ViewHolder</code> 的 <code>ViewHolder</code></li>
<li><code>onCreateViewHolder</code></li>
<li><code>onBindViewHolder</code></li>
<li><code>getItemCount</code></li>
</ul>
</li>
<li><p>设置 <code>RecyclerView</code></p>
<ul>
<li><code>setLayoutManager</code></li>
<li><code>setAdapter</code></li>
<li><code>setItemAnimator</code>(可选)</li>
<li><code>addItemDecoration</code>(可选)</li>
</ul>
</li>
</ul>
<h1 id="XML">XML</h1><p>新建 xml，添加 <code>RecyclerView</code>。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;RelativeLayout xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:<span class="variable">fab=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:<span class="variable">orientation=</span><span class="string">"vertical"</span></span><br><span class="line">    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/my_recyclerview"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<h1 id="ViewHolder">ViewHolder</h1><p>我们以前使用 <code>ListView</code> 的时候，会用以下的方式来提高 <code>ListView</code> 的性能:</p>
<ul>
<li>用 <code>convertView</code> 来减少 <code>LayoutInflater.inflate</code> 的使用</li>
<li>用 <code>ViewHolder</code> 来减少 <code>findViewById</code> 的使用</li>
</ul>
<p><code>RecyclerView</code> 标准化了 <code>ViewHolder</code> 来缓存昂贵 <code>findViewById</code> 的结果。</p>
<p>例子：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MyViewHolder <span class="keyword">extends</span> RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextView mTitle;</span><br><span class="line">    <span class="keyword">public</span> TextView mSubtitle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span> <span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(v);</span><br><span class="line">        mTitle = (TextView) v.findViewById(R.id.title);</span><br><span class="line">        mSubtitle = (TextView) v.findViewById(R.id.subtitle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS: 一般 <code>ViewHolder</code> 会编写在 <code>Adapter</code> 的内部。</p>
<h1 id="Adapter">Adapter</h1><p>我们需要继承 <code>RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;</code> 来编写我们自己的 <code>Adapter</code> 。编写我们自己的 <code>Adapter</code> 的时候，最重要的是要重写 <code>onCreateViewHolder</code> 和 <code>onBindViewHolder</code> 方法。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span> <span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View v = LayoutInflater.from(ctx).inflate(R.layout.my_adapter, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBindViewHolder</span> <span class="params">(RecyclerView.ViewHolder h, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        MyViewHolder holder = (MyViewHolder) h;</span><br><span class="line">        holder.mTitle.setText(<span class="string">"This is my title"</span>);</span><br><span class="line">        holder.mSubtitle.setText(<span class="string">"This is my subtitle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> data.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，在这个例子中我们的 <code>MyAdapter</code> 存放的是 <code>&lt;RecyclerView.ViewHolder&gt;</code>，所以在 <code>onCreateViewHolder</code> 中返回的也必须是 <code>&lt;RecyclerView.ViewHolder&gt;</code>，而在 <code>onBindViewHolder</code> 的回调中，我们拿到的也是 <code>RecyclerView.ViewHolder</code>，要把它强转成我们之前编写的 <code>MyViewHolder</code> 之后才能正常使用。</p>
<h1 id="RecyclerView">RecyclerView</h1><p>最后只要设置一下 <code>RecyclerView</code> 就能使用了。</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">RecyclerView mRecyclerView = <span class="params">(RecyclerView)</span> findViewById<span class="params">(R.id.my_recyclerview)</span>;</span><br><span class="line">mRecyclerView.setLayoutManager<span class="params">(new LinearLayoutManager<span class="params">(this)</span>)</span>;</span><br><span class="line">mRecyclerView.setAdapter<span class="params">(adapter)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><p><a href="http://wobushi.ren/recyclerview.html" target="_blank" rel="external">RecyclerView全攻略</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">Android RecyclerView 使用完全解析 体验艺术般的控件</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基本用法">基本用法</h1><ul>
<li><p>在 XML 中添加 <code>&lt;android.support.v7.widget.RecyclerView/&gt;</code></p>
</li>
<li><p>编写继承 <code>Recycl]]>
    </summary>
    
      <category term="android" scheme="http://scarletsky.github.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5 Canvas 技巧]]></title>
    <link href="http://scarletsky.github.io/2015-03-15-html5-canvas-tricks/"/>
    <id>http://scarletsky.github.io/2015-03-15-html5-canvas-tricks/</id>
    <published>2015-03-15T12:55:00.000Z</published>
    <updated>2016-01-19T06:38:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="注意事项">注意事项</h1><p>用 <code>&lt;canvas&gt;</code> 标签进行绘图时必须要设置 <code>width</code> 和 <code>height</code> 属性，这里并不是指 CSS 属性中的 <code>width</code> 和 <code>height</code>，而是 <code>&lt;canvas&gt;</code> 标签本身的属性！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">width</span>=<span class="value">"500"</span> <span class="attribute">height</span>=<span class="value">"500"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 错误 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">style</span>=<span class="value">"width: 500px; height: 500px;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">id</span>=<span class="value">"canvas"</span> <span class="attribute">style</span>=<span class="value">"width: 500px; height: 500px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="mel"></span><br><span class="line">var <span class="keyword">canvas</span> = document.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">canvas</span>.setAttribute(<span class="string">'width'</span>, <span class="string">'500'</span>);</span><br><span class="line"><span class="keyword">canvas</span>.setAttribute(<span class="string">'height'</span>, <span class="string">'500'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我以前一直以为 <code>&lt;canvas&gt;</code> 的 <code>width</code> 和 <code>height</code> 属性和 CSS 中的 <code>width</code> 和 <code>height</code> 是同一个东西，直到我看到 Stackoverflow 上面的<a href="http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties" target="_blank" rel="external">这个帖子</a>…</p>
<h1 id="读取图像文件，并绘制到_canvas_的中央">读取图像文件，并绘制到 canvas 的中央</h1><p>下面演示一下如何让用户选择一张图片，然后把图片绘制到 canvas 中央。</p>
<p>HTML<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">id</span>=<span class="value">"canvas"</span> <span class="attribute">width</span>=<span class="value">"500"</span> <span class="attribute">height</span>=<span class="value">"500"</span> <span class="attribute">style</span>=<span class="value">"border: 1px solid black;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"input"</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">style</span>=<span class="value">"display: none;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Javascript<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了方便起见，还是用 jQuery 吧</span></span><br><span class="line"><span class="keyword">var</span> $canvas = $(<span class="string">'#canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> $input = $(<span class="string">'#input'</span>);</span><br><span class="line"><span class="keyword">var</span> canvas = $canvas[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> input = $input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过点击 canvas 触发 input 的 click 事件，用来选择文件</span></span><br><span class="line">$canvas.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    input.click();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择文件后，会触发 change 事件</span></span><br><span class="line">$input.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 FileReader 来读取文件</span></span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定读取文件后的回调函数</span></span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="keyword">var</span> dataURL = e.target.result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过计算可以得到</span></span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> hRatio = canvas.width  / img.width    ;</span><br><span class="line">            <span class="keyword">var</span> vRatio =  canvas.height / img.height  ;</span><br><span class="line">            <span class="keyword">var</span> ratio  = <span class="built_in">Math</span>.min ( hRatio, vRatio );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> centerShiftX = ( canvas.width - img.width*ratio ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">var</span> centerShiftY = ( canvas.height - img.height*ratio ) / <span class="number">2</span>;  </span><br><span class="line"></span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">            ctx.drawImage(img,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, img.width, img.height, <span class="comment">// 原始图像</span></span><br><span class="line">                centerShiftX, centerShiftY, img.width*ratio, img.height*ratio); <span class="comment">// 目标图像</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      img.src = dataURL;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果用户在选择文件时点了取消，file 就会为 undefined</span></span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">        <span class="comment">// 读取文件，并返回 DataURL，可以通过 e.target.result 来得到这个 DataURL</span></span><br><span class="line">        reader.readAsDataURL(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="参考资料：">参考资料：</h1><p><a href="http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties" target="_blank" rel="external">http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties</a></p>
<p><a href="http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties" target="_blank" rel="external">http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="注意事项">注意事项</h1><p>用 <code>&lt;canvas&gt;</code> 标签进行绘图时必须要设置 <code>width</code> 和 <code>height</code> 属性，这里并不是指 CSS 属性中的 <code>width]]>
    </summary>
    
      <category term="canvas html5" scheme="http://scarletsky.github.io/tags/canvas-html5/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 利用 Blob 进行分片上传]]></title>
    <link href="http://scarletsky.github.io/2015-01-27-javascript-upload-slice-file-using-blob/"/>
    <id>http://scarletsky.github.io/2015-01-27-javascript-upload-slice-file-using-blob/</id>
    <published>2015-01-27T09:28:00.000Z</published>
    <updated>2016-01-19T06:38:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本流程">基本流程</h1><ul>
<li><p>用户选择文件</p>
</li>
<li><p>判断文件大小</p>
<ul>
<li><p>如果文件小于限定文件大小，则直接上传</p>
</li>
<li><p>否则进行分片上传</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="分片流程">分片流程</h1><ul>
<li><p>给定限定大小。</p>
</li>
<li><p>利用 <code>Blob</code> 对象的 <code>slice</code> 方法把文件分成 N 份。</p>
</li>
<li><p>遍历 N 次，利用 <code>FormData</code> 创建需要提交的数据，上传数据。</p>
</li>
</ul>
<hr>
<h1 id="服务端处理流程">服务端处理流程</h1><ul>
<li><p>接收数据</p>
</li>
<li><p>判断数据总份数</p>
<ul>
<li><p>如果总份数为 1，则直接保存成文件，文件名不需要改变。保存完成后，直接返回信息给客户端。</p>
</li>
<li><p>否则保存成文件时，文件名后缀名需要带上 .partX 来表示该文件为第几部分。</p>
</li>
</ul>
</li>
<li><p>判断已上传的数据是否等于总份数。</p>
<ul>
<li><p>如果相等，则合并文件。</p>
</li>
<li><p>合并完成后，删除带有 .partX 的文件。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="代码实例">代码实例</h1><h2 id="客户端代码_-_html">客户端代码 - html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"upload"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="客户端代码_-_JavaScript">客户端代码 - JavaScript</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span> (<span class="params">url, blob, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> perFileSize = <span class="number">2097152</span>; <span class="comment">// 2 * 1024 * 1024</span></span><br><span class="line">    <span class="keyword">var</span> blobParts = <span class="built_in">Math</span>.ceil(blob.size / perFileSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; blobParts; i++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">            <span class="keyword">var</span> _blob = blob.slice(i * perFileSize, (i + <span class="number">1</span>) * perFileSize);</span><br><span class="line"></span><br><span class="line">            fd.append(<span class="string">'_blob'</span>, _blob);</span><br><span class="line">            fd.append(<span class="string">'filename'</span>, blob.name);</span><br><span class="line">            fd.append(<span class="string">'index'</span>, i + <span class="number">1</span>);</span><br><span class="line">            fd.append(<span class="string">'total'</span>, blobParts);</span><br><span class="line"></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                url: url,</span><br><span class="line">                data: fd,</span><br><span class="line">                processData: <span class="literal">false</span>,</span><br><span class="line">                contentType: <span class="literal">false</span></span><br><span class="line">            &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'upload status: '</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'this is '</span> + (i + <span class="number">1</span>) + <span class="string">'part, total '</span> + blobParts + <span class="string">' part(s).'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (res.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">                    callback(<span class="literal">null</span>, res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                callback(err, <span class="literal">null</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#upload'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    uploadFile(<span class="string">'/upload'</span>, file, <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> <span class="built_in">console</span>.log(err); &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'upload successfully!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="服务端代码_-_NodeJS">服务端代码 - NodeJS</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Expressjs</span></span><br><span class="line"><span class="keyword">var</span> multipart = <span class="built_in">require</span>(<span class="string">'connect-multiparty'</span>);</span><br><span class="line"><span class="keyword">var</span> multipartMiddleware = multipart();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadDir = <span class="string">'./upload/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeFiles</span>(<span class="params">fileName, fileParts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffers = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取各个部分的路径</span></span><br><span class="line">    <span class="keyword">var</span> filePartsPaths = fileParts.map(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> path.join(uploadDir, name);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取各个 part 的 buffer，并保存到 buffers 中</span></span><br><span class="line">    filePartsPaths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = fs.readFileSync(path);</span><br><span class="line">        buffers.push(buffer);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并文件</span></span><br><span class="line">    <span class="keyword">var</span> concatBuffer = Buffer.concat(buffers);</span><br><span class="line">    <span class="keyword">var</span> concatFilePath = path.join(uploadDir, fileName);</span><br><span class="line">    fs.writeFileSync(concatFilePath, concatBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除各个 part 的文件</span></span><br><span class="line">    filePartsPaths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">        fs.unlinkSync(path);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.body;</span><br><span class="line">        <span class="keyword">var</span> _blobPath = req.files._blob.path;</span><br><span class="line">        <span class="keyword">var</span> fileName = data.filename;</span><br><span class="line">        <span class="keyword">var</span> filePath;</span><br><span class="line">        <span class="keyword">var</span> total = <span class="built_in">parseInt</span>(data.total);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理文件路径</span></span><br><span class="line">        <span class="keyword">if</span> (total === <span class="number">1</span>) &#123;</span><br><span class="line">            filePath = path.join(uploadDir, fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> fileNameWithPart = fileName + <span class="string">'.part'</span> + data.index;</span><br><span class="line">            filePath = path.join(uploadDir, fileNameWithPart);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取上传的数据，保存到指定路径</span></span><br><span class="line">        <span class="keyword">var</span> tmpBuffer = fs.readFileSync(_blobPath);</span><br><span class="line">        fs.writeFileSync(filePath, tmpBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否上传完成</span></span><br><span class="line">        <span class="keyword">if</span> (total === <span class="number">1</span>) &#123;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取指定目录下的所有文件名</span></span><br><span class="line">            <span class="keyword">var</span> filesInDir = fs.readdirSync(uploadDir);</span><br><span class="line">            <span class="comment">// 找出指定文件名中带有 .part 的文件</span></span><br><span class="line">            <span class="keyword">var</span> fileParts = filesInDir.filter(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name.substring(<span class="number">0</span>, fileName.length + <span class="number">5</span>) === (fileName + <span class="string">'.part'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断是否需要合并文件</span></span><br><span class="line">            <span class="keyword">if</span> (fileParts.length === total) &#123;</span><br><span class="line">                mergeFiles(fileName, fileParts);</span><br><span class="line">                res.send(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(<span class="number">204</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="number">405</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/upload'</span>, multipartMiddleware, upload);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基本流程">基本流程</h1><ul>
<li><p>用户选择文件</p>
</li>
<li><p>判断文件大小</p>
<ul>
<li><p>如果文件小于限定文件大小，则直接上传</p>
</li>
<li><p>否则进行分片上传</p>
</li>
</u]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 常用技巧]]></title>
    <link href="http://scarletsky.github.io/2015-01-26-javascript-tricks/"/>
    <id>http://scarletsky.github.io/2015-01-26-javascript-tricks/</id>
    <published>2015-01-26T10:05:00.000Z</published>
    <updated>2016-01-19T06:37:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="字符串操作">字符串操作</h1><h2 id="首字母大写">首字母大写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.replace(<span class="regexp">/\b\w+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> word.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + word.substring(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="截取字符串最后几位">截取字符串最后几位</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.substring(str.length-X)</span><br></pre></td></tr></table></figure>
<h2 id="进制转换">进制转换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d.toString(<span class="number">16</span>)    (十进制 -&gt; 十六进制)</span><br><span class="line"><span class="built_in">parseInt</span>(‘ff’, <span class="number">16</span>) (十六进制 -&gt; 十进制)</span><br></pre></td></tr></table></figure>
<h2 id="移除左边多余的_0">移除左边多余的 0</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用正则, '000.00' -&gt; 0.00</span></span><br><span class="line"><span class="comment">// 基于 http://stackoverflow.com/questions/594325/truncate-leading-zeros-of-a-string-in-javascript</span></span><br><span class="line">str.replace(<span class="regexp">/^[0]&#123;2&#125;/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 parseInt , '000123' -&gt; '123'</span></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/6676488/remove-leading-zeros-from-a-number-in-javascript</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h2 id="生成随机字符串">生成随机字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substring(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// 出自 http://stackoverflow.com/questions/1349404/generate-a-string-of-5-random-characters-in-javascript</span></span><br></pre></td></tr></table></figure>
<h2 id="is-start-with?">is-start-with?</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">string.lastIndexOf(str, <span class="number">0</span>) === <span class="number">0</span></span><br><span class="line">string.substring(<span class="number">0</span>, str.length) === str</span><br><span class="line"><span class="comment">// 出自 http://stackoverflow.com/questions/646628/how-to-check-if-a-string-startswith-another-string</span></span><br></pre></td></tr></table></figure>
<h2 id="is-end-with?">is-end-with?</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 出自 http://stackoverflow.com/questions/280634/endswith-in-javascript</span></span><br></pre></td></tr></table></figure>
<h2 id="解析_Base64">解析 Base64</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> base64str = <span class="string">'this is base64 string'</span>;</span><br><span class="line">Buffer(base64str, <span class="string">'base64'</span>).toString();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="数组操作">数组操作</h1><h2 id="获取最后数组中最后一个元素">获取最后数组中最后一个元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.slice(-<span class="number">1</span>).pop() <span class="comment">// 简洁</span></span><br><span class="line">arr[arr.length - <span class="number">1</span>] <span class="comment">// 快速</span></span><br><span class="line"><span class="comment">// 出自 http://stackoverflow.com/questions/3216013/get-the-last-item-in-an-array</span></span><br></pre></td></tr></table></figure>
<h2 id="过滤重复元素">过滤重复元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(v) === i;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="日期操作">日期操作</h1><h2 id="获取当前时间戳">获取当前时间戳</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line"><span class="comment">// 出自 http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="字符串操作">字符串操作</h1><h2 id="首字母大写">首字母大写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.repla]]>
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5 Drag and Drop API]]></title>
    <link href="http://scarletsky.github.io/2015-01-13-html5-drag-and-drop-api/"/>
    <id>http://scarletsky.github.io/2015-01-13-html5-drag-and-drop-api/</id>
    <published>2015-01-13T10:28:04.000Z</published>
    <updated>2016-01-19T06:38:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本使用">基本使用</h1><h2 id="创建可拖放对象">创建可拖放对象</h2><p>在 HTML5 中创建可拖动内容非常简单，只需要在元素的属性中加上 <code>draggable=&quot;true&quot;</code> 就能创建可拖放对象了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect red"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect green"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect blue"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="如何拖动">如何拖动</h2><p>有了可拖放对象之后，我们还需要处理拖放事件才能实现拖放。拖放包含下面的事件：</p>
<ul>
<li><code>dragstart</code> 发生在元素开始被拖动时</li>
<li><code>drag</code> 发生在元素被拖动(按着鼠标不放时)</li>
<li><code>dragenter</code> 发生在有元素被拖进一个可放区域</li>
<li><code>dragover</code> 发生在有元素被拖在可放区域的上面</li>
<li><code>dragleave</code> 发生在有元素被拖离一个可放区域</li>
<li><code>drop</code> 发生在元素被放到可放区域内</li>
<li><code>dragend</code> 发生在拖放事件结束(松开鼠标或者按 esc 键)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> draggableElements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[draggable]'</span>);</span><br><span class="line"><span class="comment">// draggableElements 是 NodeList 对象，并不是 Array，因此没有 forEach 方法。</span></span><br><span class="line">[].forEach.call(draggableElements, <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    element.addEventListener(<span class="string">'drag'</span>, drag, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'dragstart'</span>, dragStart, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'dragenter'</span>, dragEnter, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'dragleave'</span>, dragLeave, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'dragover'</span>, dragOver, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'drop'</span>, drop, <span class="literal">false</span>);</span><br><span class="line">    element.addEventListener(<span class="string">'dragend'</span>, dragEnd, <span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="DataTransfer_对象">DataTransfer 对象</h2><p>dataTransfer 属性正是这一神奇 DnD 功能的动力来源，控制着拖动操作中发送的数据。dataTransfer 可在 dragstart 事件中进行设置，并在 drop 事件中读取/处理。调用 e.dataTransfer.setData(format, data) 会将对象内容设置成 MIME 类型，并将数据有效负载作为参数传递。</p>
<p>拖放不同对象需要设置不同的格式，下面是 MDN 推荐 drag types。</p>
<ul>
<li>文字：<code>text/plain</code></li>
<li>超链接：<code>text/uri-list</code>, <code>text/plain</code></li>
<li>HTML &amp; XML：<code>text/html</code>, <code>text/plain</code></li>
</ul>
<p>其他类型可以查看 MDN 上面的文档：<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types</a></p>
<p><strong>PS：综合自己试验和网上的说法，其实设置 <code>setData</code> 的 format 设置成自定义值也是可以使用的。</strong></p>
<h2 id="DataTransfer_属性">DataTransfer 属性</h2><p><code>effectAllowed</code> 和 <code>dropEffect</code> 是 DnD 里面常看见的属性，也是对新手来说最摸不着头脑的属性。</p>
<p>这两个属性最主要的作用是，用于配置拖放过程中鼠标的指针的类型，以便提示用户操作。其次作用是用来控制 <code>drop</code> 事件是否触发。</p>
<p>这两个属性的有效值可以查阅 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer</a>。</p>
<h2 id="注意"><strong>注意</strong></h2><ul>
<li><p><code>effectAllowed</code> 只能在 <code>dragstart</code> 事件中设置</p>
</li>
<li><p><code>dropEffect</code> 只能在 <code>dragenter</code> 和 <code>dragover</code> 事件中设置</p>
</li>
<li><p><code>dropEffect</code> 和 <code>effectAllowed</code> 不相等时，不会触发 <code>drop</code> 事件</p>
</li>
</ul>
<h2 id="使用心得">使用心得</h2><ul>
<li><p>必须禁止 <code>dragover</code> 的默认事件才能正常触发 <code>drop</code> 事件</p>
</li>
<li><p><code>e.dataTransfer.getData</code> 只能在 <code>drop</code> 事件中正常访问，在其他事件中访问的话会返回空值。具体请看 <a href="http://stackoverflow.com/questions/11927309/html5-dnd-datatransfer-setdata-or-getdata-not-working-in-every-browser-except-fi" target="_blank" rel="external">http://stackoverflow.com/questions/11927309/html5-dnd-datatransfer-setdata-or-getdata-not-working-in-every-browser-except-fi</a></p>
</li>
<li><p>拖放操作的结果一般情况下会产生新的 <code>DOM</code> 结构，因此不能使用 <code>$(selector).on(event, fn)</code> 来进行事件绑定，因为这样对新产生的 DOM 不起作用。要进行动态绑定的话，可以使用下面的写法：<code>$(document).on(event, selector, fn)</code>。</p>
</li>
</ul>
<h2 id="使用示例">使用示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="attr_selector">[draggable]</span> <span class="rules">&#123;<span class="rule"><span class="attribute">cursor</span>:<span class="value"> move</span></span>;&#125;</span></span><br><span class="line">        <span class="class">.dragging</span> <span class="rules">&#123;<span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.2</span></span></span>;&#125;</span></span><br><span class="line">        <span class="class">.over</span> <span class="rules">&#123;<span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed black</span></span>;&#125;</span></span><br><span class="line">        <span class="class">.rect</span> <span class="rules">&#123;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;&#125;</span></span><br><span class="line">        <span class="class">.red</span>, <span class="class">.green</span>, <span class="class">.blue</span>, <span class="class">.black</span> <span class="rules">&#123;<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;&#125;</span></span><br><span class="line">        <span class="class">.red</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF8C8C</span></span></span>;&#125;</span></span><br><span class="line">        <span class="class">.green</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#8CFFB5</span></span></span>;&#125;</span></span><br><span class="line">        <span class="class">.blue</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#8CA3FF</span></span></span>;&#125;</span></span><br><span class="line">        <span class="class">.black</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#3A3C44</span></span></span>;&#125;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"red"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"blue"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"rect"</span> <span class="attribute">draggable</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"black"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> dragSrc = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> draggableElements = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[draggable]'</span>);</span><br><span class="line">        <span class="comment">// draggableElements 是 NodeList 对象，并不是 Array，所以没有 forEach 方法。</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">resetDragSrc</span> (<span class="params"></span>) </span>&#123;dragSrc = <span class="literal">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dragStart</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drag start'</span>);</span><br><span class="line">            dragSrc = <span class="keyword">this</span>;</span><br><span class="line">            e.dataTransfer.effectAllowed = <span class="string">'move'</span>;</span><br><span class="line">            e.dataTransfer.setData(<span class="string">'text/html'</span>, <span class="keyword">this</span>.innerHTML);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.classList.add(<span class="string">'dragging'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dragOver</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drag over'</span>);</span><br><span class="line">            <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">                e.preventDefault(); <span class="comment">// Necessary. Allows us to drop.</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            e.dataTransfer.dropEffect = <span class="string">'move'</span>;  <span class="comment">// See the section on the DataTransfer object.</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dragEnter</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drag enter'</span>);</span><br><span class="line">            <span class="keyword">this</span>.classList.add(<span class="string">'over'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dragLeave</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drag leave'</span>);</span><br><span class="line">            <span class="keyword">this</span>.classList.remove(<span class="string">'over'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">drop</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drop!'</span>);</span><br><span class="line">            <span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">                e.stopPropagation(); <span class="comment">// stops the browser from redirecting.</span></span><br><span class="line">            &#125;</span><br><span class="line">            dragSrc.innerHTML = <span class="keyword">this</span>.innerHTML;</span><br><span class="line">            <span class="keyword">this</span>.innerHTML = e.dataTransfer.getData(<span class="string">'text/html'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dragEnd</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'drag end!'</span>);</span><br><span class="line">            [].forEach.call(draggableElements, <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">                element.classList.remove(<span class="string">'over'</span>);</span><br><span class="line">                element.classList.remove(<span class="string">'dragging'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            resetDragSrc();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">drag</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'dragging!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [].forEach.call(draggableElements, <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">            element.addEventListener(<span class="string">'dragstart'</span>, dragStart, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'dragenter'</span>, dragEnter, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'dragleave'</span>, dragLeave, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'dragover'</span>, dragOver, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'drag'</span>, drag, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'drop'</span>, drop, <span class="literal">false</span>);</span><br><span class="line">            element.addEventListener(<span class="string">'dragend'</span>, dragEnd, <span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><p><a href="http://www.html5rocks.com/zh/tutorials/dnd/basics/" target="_blank" rel="external">http://www.html5rocks.com/zh/tutorials/dnd/basics/</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Events</a><br><a href="http://stackoverflow.com/questions/203198/event-binding-on-dynamically-created-elements" target="_blank" rel="external">http://stackoverflow.com/questions/203198/event-binding-on-dynamically-created-elements</a><br><a href="http://www.cnblogs.com/fsjohnhuang/p/3961066.html" target="_blank" rel="external">http://www.cnblogs.com/fsjohnhuang/p/3961066.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基本使用">基本使用</h1><h2 id="创建可拖放对象">创建可拖放对象</h2><p>在 HTML5 中创建可拖动内容非常简单，只需要在元素的属性中加上 <code>draggable=&quot;true&quot;</code> 就能创建可拖放对象了。]]>
    </summary>
    
      <category term="drag-and-drop" scheme="http://scarletsky.github.io/tags/drag-and-drop/"/>
    
      <category term="HTML5" scheme="http://scarletsky.github.io/categories/HTML5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[D3.js 学习笔记2]]></title>
    <link href="http://scarletsky.github.io/2015-01-04-d3js-learning-2/"/>
    <id>http://scarletsky.github.io/2015-01-04-d3js-learning-2/</id>
    <published>2015-01-04T09:28:04.000Z</published>
    <updated>2016-01-19T06:37:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Layout">Layout</h1><p>和它的名字相比，D3 中的 Layout 并不会放任何东西在屏幕上。实际上，Layout 方法和可视化输出并没有直接关系。D3 Layout 会把你交给它的数据转换成更加方便处理的数据。</p>
<p>D3 中包含的全部的 Layout 列表如下：</p>
<ul>
<li>Bundle</li>
<li>Chord</li>
<li>Cluster</li>
<li>Force</li>
<li>Histogram</li>
<li>Pack</li>
<li>Partition</li>
<li>Pie</li>
<li>Stack</li>
<li>Tree</li>
<li>Treemap</li>
</ul>
<p>每一种 Layout 都会提供一些特别的方法帮助你处理数据。</p>
<p>本文主要介绍一下 <code>Pie Layout</code> 和 <code>Stack Layout</code>。</p>
<h2 id="Pie_Layout">Pie Layout</h2><p>Pie Layout 可以帮助你生成类似饼状图的数据结构。我们先看看它的使用方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">25</span> ];</span><br><span class="line"><span class="keyword">var</span> pie = d3.layout.pie();</span><br></pre></td></tr></table></figure>
<p>如下图所示，你会看到 Pie Layout 会帮助你生成新的数据。<br><img src="http://7tebgv.com1.z0.glb.clouddn.com/d3js-learning-2-01.png" alt=""></p>
<p>我们来看看如何用这些数据来生成饼状图。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">25</span> ];</span><br><span class="line"><span class="keyword">var</span> pie = d3.layout.pie();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">var</span> h = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> outerRadius = w / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> innerRadius = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arc = d3.svg.arc()  <span class="comment">// 创建弧形。</span></span><br><span class="line">                .innerRadius(innerRadius)  <span class="comment">// 内径</span></span><br><span class="line">                .outerRadius(outerRadius); <span class="comment">// 外径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Create SVG element</span></span><br><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</span><br><span class="line">            .append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, w)</span><br><span class="line">            .attr(<span class="string">"height"</span>, h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arcs = svg.selectAll(<span class="string">"g.arc"</span>)</span><br><span class="line">        .data(pie(dataset))</span><br><span class="line">        .enter()</span><br><span class="line">        .append(<span class="string">"g"</span>)</span><br><span class="line">        .attr(<span class="string">"class"</span>, <span class="string">"arc"</span>)</span><br><span class="line">        .attr(<span class="string">"transform"</span>, <span class="string">"translate("</span> + outerRadius + <span class="string">", "</span> + outerRadius + <span class="string">")"</span>);  <span class="comment">// 圆心位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = d3.scale.category10();  <span class="comment">// 创建颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Draw arc paths</span></span><br><span class="line">arcs.append(<span class="string">"path"</span>)</span><br><span class="line">    .attr(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color(i);  <span class="comment">// 会返回不同的颜色</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"d"</span>, arc);  <span class="comment">// d 是 path 的属性，用来定义路径的生成规则。</span></span><br><span class="line"></span><br><span class="line">arcs.append(<span class="string">"text"</span>)</span><br><span class="line">    .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"translate("</span> + arc.centroid(d) + <span class="string">")"</span>;  <span class="comment">// arc.centroid 是弧形中一个重要方法，会返回该弧形的中心位置。</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"text-anchor"</span>, <span class="string">"middle"</span>)</span><br><span class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d.value;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>你可以在下面这个连接里看到效果：<br><a href="http://examples.oreilly.com/0636920026938/chapter_11/01_pie.html" target="_blank" rel="external">http://examples.oreilly.com/0636920026938/chapter_11/01_pie.html</a></p>
<h2 id="Stack_Layout">Stack Layout</h2><p>Stack Layout 可以帮你处理如下图所示的类似“叠加柱形图”那样的数据结构。</p>
<p><img src="http://7tebgv.com1.z0.glb.clouddn.com/d3js-learning-2-02.png" alt=""></p>
<p>我们先来看看一组数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _dataset = [</span><br><span class="line">        &#123; apples: <span class="number">5</span>, oranges: <span class="number">10</span>, grapes: <span class="number">22</span> &#125;,</span><br><span class="line">        &#123; apples: <span class="number">4</span>, oranges: <span class="number">12</span>, grapes: <span class="number">28</span> &#125;,</span><br><span class="line">        &#123; apples: <span class="number">2</span>, oranges: <span class="number">19</span>, grapes: <span class="number">32</span> &#125;,</span><br><span class="line">        &#123; apples: <span class="number">7</span>, oranges: <span class="number">23</span>, grapes: <span class="number">35</span> &#125;,</span><br><span class="line">        &#123; apples: <span class="number">23</span>, oranges: <span class="number">17</span>, grapes: <span class="number">43</span> &#125;</span><br><span class="line">];  <span class="comment">// 转换前的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataset = [</span><br><span class="line">        [</span><br><span class="line">                &#123; x: <span class="number">0</span>, y: <span class="number">5</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">1</span>, y: <span class="number">4</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">2</span>, y: <span class="number">2</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">3</span>, y: <span class="number">7</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">4</span>, y: <span class="number">23</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">                &#123; x: <span class="number">0</span>, y: <span class="number">10</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">1</span>, y: <span class="number">12</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">2</span>, y: <span class="number">19</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">3</span>, y: <span class="number">23</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">4</span>, y: <span class="number">17</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">                &#123; x: <span class="number">0</span>, y: <span class="number">22</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">1</span>, y: <span class="number">28</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">2</span>, y: <span class="number">32</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">3</span>, y: <span class="number">35</span> &#125;,</span><br><span class="line">                &#123; x: <span class="number">4</span>, y: <span class="number">43</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">];  <span class="comment">// 转换后的数据</span></span><br></pre></td></tr></table></figure>
<p>要使用 Stack Layout，首先要把我们的数据处理一遍，把相同类型的数据归为一组，例如上面代码所示那样，第一组数据是 apples，第二组数据是 oranges， 第三组数据室 grapes。注意，分组后的数据必须同时包含 x 和 y，其中 x 只是代表他们的 id，y 才是真正的数据。</p>
<p>处理好数据之后我们可以试试调用 stack 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = d3.layout.stack();</span><br><span class="line">stack(dataset);</span><br></pre></td></tr></table></figure>
<p>之后我们可以看到下面的结果：<br><img src="http://7tebgv.com1.z0.glb.clouddn.com/d3js-learning-2-03.png" alt=""></p>
<p>看到规律了吗？用 stack 方法处理过的数据，都会多了一个 <code>y0</code> 的键。而这个键的值刚好就是前面数据的 y 值之和。利用这个 <code>y0</code>，我们就可以很方便的创建“叠加柱形图”了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Width and height</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">var</span> h = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Original data</span></span><br><span class="line"><span class="keyword">var</span> dataset = [</span><br><span class="line">    [</span><br><span class="line">        &#123; x: <span class="number">0</span>, y: <span class="number">5</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">1</span>, y: <span class="number">4</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">2</span>, y: <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">3</span>, y: <span class="number">7</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">4</span>, y: <span class="number">23</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123; x: <span class="number">0</span>, y: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">1</span>, y: <span class="number">12</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">2</span>, y: <span class="number">19</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">3</span>, y: <span class="number">23</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">4</span>, y: <span class="number">17</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123; x: <span class="number">0</span>, y: <span class="number">22</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">1</span>, y: <span class="number">28</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">2</span>, y: <span class="number">32</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">3</span>, y: <span class="number">35</span> &#125;,</span><br><span class="line">        &#123; x: <span class="number">4</span>, y: <span class="number">43</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set up stack method</span></span><br><span class="line"><span class="keyword">var</span> stack = d3.layout.stack();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Data, stacked</span></span><br><span class="line">stack(dataset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set up scales</span></span><br><span class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</span><br><span class="line">    .domain(d3.range(dataset[<span class="number">0</span>].length))</span><br><span class="line">    .rangeRoundBands([<span class="number">0</span>, w], <span class="number">0.05</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</span><br><span class="line">    .domain([<span class="number">0</span>,</span><br><span class="line">        d3.max(dataset, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> d3.max(d, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> d.y0 + d.y;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    ])</span><br><span class="line">    .range([<span class="number">0</span>, h]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Easy colors accessible via a 10-step ordinal scale</span></span><br><span class="line"><span class="keyword">var</span> colors = d3.scale.category10();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create SVG element</span></span><br><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</span><br><span class="line">            .append(<span class="string">"svg"</span>)</span><br><span class="line">            .attr(<span class="string">"width"</span>, w)</span><br><span class="line">            .attr(<span class="string">"height"</span>, h);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a group for each row of data</span></span><br><span class="line"><span class="keyword">var</span> groups = svg.selectAll(<span class="string">"g"</span>)</span><br><span class="line">    .data(dataset)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(<span class="string">"g"</span>)</span><br><span class="line">    .style(<span class="string">"fill"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> colors(i);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a rect for each data value</span></span><br><span class="line"><span class="keyword">var</span> rects = groups.selectAll(<span class="string">"rect"</span>)</span><br><span class="line">    .data(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;)</span><br><span class="line">    .enter()</span><br><span class="line">    .append(<span class="string">"rect"</span>)</span><br><span class="line">    .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xScale(i);</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yScale(d.y0);</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yScale(d.y);</span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"width"</span>, xScale.rangeBand());</span><br></pre></td></tr></table></figure>
<p>结果可以看看下面连接：<br><a href="http://examples.oreilly.com/0636920026938/chapter_11/03_stacked_bar.html" target="_blank" rel="external">http://examples.oreilly.com/0636920026938/chapter_11/03_stacked_bar.html</a></p>
<p>什么？你不想要从上往下的柱形图？你想要从下往上的柱形图？</p>
<p>其实要生成从下往上的柱形图很简单，只需要把 yScale 的 range 反过来，然后画图的时候调整一下 y 和 height 属性就好了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</span><br><span class="line">    ...</span><br><span class="line">    .range([h, <span class="number">0</span>]); <span class="comment">// 原来是 [0, h]</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> rects = groups.selectAll(<span class="string">"rect"</span>)</span><br><span class="line">    ...</span><br><span class="line">    .attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yScale(d.y0) - (h - yScale(d.y)); <span class="comment">// 原来是 return yScale(d.y0)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h - yScale(d.y);  <span class="comment">// 原来是 return yScale(d.y)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h1 id="参考资料">参考资料</h1><p><a href="http://chimera.labs.oreilly.com/books/1230000000345/ch11.html" target="_blank" rel="external">http://chimera.labs.oreilly.com/books/1230000000345/ch11.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Layout">Layout</h1><p>和它的名字相比，D3 中的 Layout 并不会放任何东西在屏幕上。实际上，Layout 方法和可视化输出并没有直接关系。D3 Layout 会把你交给它的数据转换成更加方便处理的数据。</p>
<p>D3 中包含的全部]]>
    </summary>
    
      <category term="d3.js" scheme="http://scarletsky.github.io/tags/d3-js/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
  </entry>
  
</feed>

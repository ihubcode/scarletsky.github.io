<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scarletsky</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scarletsky.github.io/"/>
  <updated>2016-02-29T01:53:34.000Z</updated>
  <id>http://scarletsky.github.io/</id>
  
  <author>
    <name>Scarletsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FlexibleInstances 和 TypeSynonymInstances 编译指令的区别</title>
    <link href="http://scarletsky.github.io/2016/02/28/flexible-instances-vs-type-synonym-instances-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/28/flexible-instances-vs-type-synonym-instances-in-haskell/</id>
    <published>2016-02-28T14:31:21.000Z</published>
    <updated>2016-02-29T01:53:34.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;FlexibleInstances&quot;&gt;&lt;a href=&quot;#FlexibleInstances&quot; class=&quot;headerlink&quot; title=&quot;FlexibleInstances&quot;&gt;&lt;/a&gt;FlexibleInstances&lt;/h2&gt;&lt;p&gt;先看看下面这个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Learning.hs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; a a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun :: a -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的定义看起来是没有问题的，因为不需要任何编译指令就能通过编译了。&lt;br&gt;我们可以运行看看：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :l &lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;type&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;             ( &lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;.hs, interpreted )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Ok&lt;/span&gt;, modules loaded: &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) :: &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) :: &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果我们需要为 &lt;code&gt;Vector a&lt;/code&gt; 不同的类型参数实现不同的 &lt;code&gt;myFun&lt;/code&gt; 的话呢？&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们再看看编译时会发生什么？&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;type&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;             ( &lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs, interpreted )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Illegal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; declaration for ‘&lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (&lt;span class=&quot;type&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; types must be &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the form (&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; a1 ... an)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a1 ... an are *distinct &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; variables*,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           and each &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; variable appears at most once in the instance head.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;FlexibleInstances&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; you want to disable this.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; declaration for ‘&lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Failed&lt;/span&gt;, modules loaded: none.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译失败！为什么会编译失败呢？&lt;/p&gt;
&lt;p&gt;因为通常情况下，我们不能给多态类型（polymorphic type）的特化版本（specialized version）写类型类实例。&lt;br&gt;在这个例子中，&lt;code&gt;Vector Int&lt;/code&gt; 和 &lt;code&gt;Vector Double&lt;/code&gt; 就是 &lt;code&gt;Vector a&lt;/code&gt; 的特化版本。&lt;br&gt;如果我们需要为这些特化版本写类型类实例的话，我们就需要开启 &lt;code&gt;FlexibleInstances&lt;/code&gt; 编译指令来取消这个限制。&lt;/p&gt;
&lt;h2 id=&quot;TypeSynonymInstances&quot;&gt;&lt;a href=&quot;#TypeSynonymInstances&quot; class=&quot;headerlink&quot; title=&quot;TypeSynonymInstances&quot;&gt;&lt;/a&gt;TypeSynonymInstances&lt;/h2&gt;&lt;p&gt;理解了上面的 &lt;code&gt;FlexibleInstances&lt;/code&gt; 后，&lt;code&gt;TypeSynonymInstances&lt;/code&gt; 就容易理解了。&lt;/p&gt;
&lt;p&gt;如果我需要为 &lt;code&gt;Vector Int&lt;/code&gt; 添加一个别名，然后让这个别名成为 MyClass 类型类的实例，我们就会需要用到 &lt;code&gt;TypeSynonymInstances&lt;/code&gt; 编译指令了。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VectorInt&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VectorInt&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，ghc 编译上面的代码时会报错，原因是 Haskell 98 并不支持这种语法。&lt;br&gt;要让 ghc 成功编译上面的代码，我们就需要开启 &lt;code&gt;TypeSynonymInstances&lt;/code&gt; 这个编译指令了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://rwh.readthedocs.org/en/latest/chp/6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rwh.readthedocs.org/en/latest/chp/6.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://book.realworldhaskell.org/read/using-typeclasses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://book.realworldhaskell.org/read/using-typeclasses.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FlexibleInstances&quot;&gt;&lt;a href=&quot;#FlexibleInstances&quot; class=&quot;headerlink&quot; title=&quot;FlexibleInstances&quot;&gt;&lt;/a&gt;FlexibleInstances&lt;/h2&gt;&lt;p&gt;先看看下面这个简单的
    
    </summary>
    
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>What is functor in Haskell ?</title>
    <link href="http://scarletsky.github.io/2016/02/09/what-is-functor-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/09/what-is-functor-in-haskell/</id>
    <published>2016-02-09T14:50:13.000Z</published>
    <updated>2016-02-11T02:42:31.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Functor-简介&quot;&gt;&lt;a href=&quot;#Functor-简介&quot; class=&quot;headerlink&quot; title=&quot;Functor 简介&quot;&gt;&lt;/a&gt;Functor 简介&lt;/h2&gt;&lt;p&gt;什么是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你可以认为 Functor 是一种数据类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以对 Functor 使用 &lt;code&gt;fmap&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是什么东西 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是一个函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是函数的话，那它的类型签名是什么 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我应该怎么看这个类型签名 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它接受一个函数和一个 Functor 类型作为参数，然后返回另一个 Functor 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于 &lt;code&gt;map&lt;/code&gt;&lt;br&gt;&lt;code&gt;map (+1) [1,2,3,4,5]  -- 返回 [2,3,4,5,6]&lt;/code&gt;&lt;br&gt;&lt;code&gt;fmap (+1) [1,2,3,4,5] -- 返回 [2,3,4,5,6]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以列表是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，List 是 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么列表是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为列表实现了 &lt;code&gt;fmap&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; [] &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap = map&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现了 &lt;code&gt;fmap&lt;/code&gt; 的数据类型都是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不一定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除了要实现 &lt;code&gt;fmap&lt;/code&gt; 之外，还需要满足一些条件才能成为 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;满足什么条件 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;必须保证 &lt;code&gt;fmap id = id&lt;/code&gt;，也就是说 &lt;code&gt;fmap id xs&lt;/code&gt; 和 &lt;code&gt;id xs&lt;/code&gt; 必须返回相同的值。&lt;/li&gt;
&lt;li&gt;必须是可组合的，两个 &lt;code&gt;fmap&lt;/code&gt; 组合使用的结果应该和两个函数组合起来再用 &lt;code&gt;fmap&lt;/code&gt; 的结果相同。&lt;br&gt;也就是说 &lt;code&gt;fmap f . fmap g&lt;/code&gt; 必须等于 &lt;code&gt;fmap (f . g)&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;条件一是什么意思 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意思是 &lt;code&gt;fmap&lt;/code&gt; 只能对值调用 &lt;code&gt;f&lt;/code&gt;，不能做额外的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有具体例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看这个经典的自定义数据类型，C表示计数器：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CMaybe&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CMaybe&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;          = &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; counter x) = &lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; (counter + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) (f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;ha&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ho&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hoha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;he&quot;&lt;/span&gt;) (fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;ha&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ho&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hohahe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;blah&quot;&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;fmap&lt;/code&gt; 除了对值调用 &lt;code&gt;f&lt;/code&gt; 之外，还对 &lt;code&gt;counter&lt;/code&gt; 加一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这有什么问题吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再看看 &lt;code&gt;fmap id&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap id (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; id (&lt;span class=&quot;type&quot;&gt;Cjust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看出问题了吗 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap id&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 返回的结果不相等 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，所以即便 &lt;code&gt;CMaybe a&lt;/code&gt; 实现了 &lt;code&gt;fmap&lt;/code&gt;，但它也不是 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;条件二有点像乘法分配律。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。&lt;br&gt;乘法分配律是 &lt;code&gt;(a + b) x c = a x c + b x c&lt;/code&gt;。&lt;br&gt;而条件二是 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;条件二有具体例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以类比函数，因为函数本身也是 Functor，所以函数会满足&lt;strong&gt;可组合&lt;/strong&gt;这个条件。&lt;br&gt;而实际应用中，我们也经常使用到函数组合这个特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现了 &lt;code&gt;fmap&lt;/code&gt; ，同时满足两个条件的数据类型就是 Functor 吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不，还有一个规则，就是该数据类型要有一个类型参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能举个例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经知道 List 是一个 Functor，先看看 List 的定义：&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; [] a = [] | a : [a]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表有一个类型参数 a，表示一个列表中可以包含相同类型的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 只能有一个类型参数吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，我们可以通过其他方法让多于一个类型参数的数据类型都能成为 Functor 的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么手段 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要先知道怎么定义一个 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;自定义-Functor&quot;&gt;&lt;a href=&quot;#自定义-Functor&quot; class=&quot;headerlink&quot; title=&quot;自定义 Functor&quot;&gt;&lt;/a&gt;自定义 Functor&lt;/h2&gt;&lt;p&gt;我应该怎么自定义 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先定义一个数据类型，再让该类型成为 Functor 的实例。&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; x) = &lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; (f x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，我们定义的 MyFunctor 就是一个 Functor 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚才提到的让多于一个类型参数的数据类型成为 Functor 实例的方法是？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用 Haskell 中不全调用的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以给个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor2&lt;/span&gt; a b = &lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; a b &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;MyFunctor2&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; x y) = &lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; x (f y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Haskell 中，我们可以利用 Haskell 不全调用的特性，把 MyFunctor2 a 当成一个整体，这样就相当于只有 b 一个类型参数了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;真-·-Functor&quot;&gt;&lt;a href=&quot;#真-·-Functor&quot; class=&quot;headerlink&quot; title=&quot;真 · Functor&quot;&gt;&lt;/a&gt;真 · Functor&lt;/h2&gt;&lt;p&gt;我从上面看到，Functor 是一个类型类？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。事实上，&lt;strong&gt;Functor 是一个类型类，表示满足一些条件的数据类型。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;满足上面提到的条件？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有哪些常见的 Functor ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;等等。&lt;br&gt;你可以在 ghci 中输入 &lt;code&gt;:i Functor&lt;/code&gt; 来查看更多预定义的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些 Functor 有什么特点？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它们都带有上下文：即可以表示有值，也可以表示空值。&lt;br&gt;[] 表示空值，[a] 表示有值；&lt;br&gt;Nothing 表示空值，Just a表示有值；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样有什么好处吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好处是显然易见的。考虑下下面的伪代码：&lt;br&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;post = Posts.find_by_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; post.title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为什么这段伪代码需要判断 post 是否为空？因为 post 没有上下文环境，不能表示空值。&lt;br&gt;如果 post 有上下文环境 (也就是 post 可以表示空值)，那么我们的代码就可以直接写成：&lt;br&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;post = Posts.find_by_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; post.title&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，如果一个值可以带有上下文环境的话，我们的代码就可以写的非常简洁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把刚才的伪代码写成 Haskell 代码 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap (getPostTitle) (findPosts 1)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;if else&lt;/code&gt; 不见了？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，这里假设 post 是一个 Functor，它可以表示带有空值的情况。所以 &lt;code&gt;if else&lt;/code&gt; 就不需要了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那 &lt;code&gt;fmap&lt;/code&gt; 呢？ 它事实上是什么东西？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 确确实实是一个函数，它知道怎么把传进的函数应用到 Functor 中，并返回一个新的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 对 Functor 调用函数的过程发生了什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看下面两张图 (图出自 &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;)：&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/2386165/12949440/c8753e16-d042-11e5-84ff-b47753d65c52.png&quot; alt=&quot;fmap_just&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/2386165/12949441/c87a69b8-d042-11e5-80d6-2ee458e13e37.png&quot; alt=&quot;fmap_nothing&quot;&gt;&lt;br&gt;实际上，&lt;code&gt;fmap&lt;/code&gt; 先取出 Functor 中的值，然后把值传进函数中，再把函数的返回值放回到 Functor 中，最后返回新的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 有什么限制？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 只接受一个参数。&lt;br&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 不能带有上下文 (换句话说只能是 (+42) 不能是 &lt;code&gt;Just (+42)&lt;/code&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于 Functor 的知识，还有什么我是需要知道的 ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 可以中缀调用，即 &lt;code&gt;f `fmap` xs&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 是 &lt;code&gt;fmap&lt;/code&gt; 的别名，一般用于中缀调用，即 &lt;code&gt;f &amp;lt;$&amp;gt; xs&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Functor 是类型类，只要满足以下条件的数据类型都可以成为 Functor 的实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;fmap&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;保证 &lt;code&gt;fmap id = id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;保证 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;该数据类型必须有一个以上的类型参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，强烈建议看看 &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，相当形象生动。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicative Functors and Monoids&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cnhaskell.com/chp/10.html#functor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functor 简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Functor-简介&quot;&gt;&lt;a href=&quot;#Functor-简介&quot; class=&quot;headerlink&quot; title=&quot;Functor 简介&quot;&gt;&lt;/a&gt;Functor 简介&lt;/h2&gt;&lt;p&gt;什么是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你可
    
    </summary>
    
    
      <category term="functor" scheme="http://scarletsky.github.io/tags/functor/"/>
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>(译) Haskell 中随机数的使用</title>
    <link href="http://scarletsky.github.io/2016/02/06/random-numbers-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/06/random-numbers-in-haskell/</id>
    <published>2016-02-06T09:35:18.000Z</published>
    <updated>2016-02-06T14:25:55.000Z</updated>
    
    <content type="html">&lt;p&gt;随机数（我指的是伪随机数）是通过显式或隐式的状态来生成的。这意味着在 Haskell 中，随机数的使用（通过 &lt;code&gt;System.Random&lt;/code&gt; 库）是伴随着状态的传递的。 &lt;/p&gt;
&lt;p&gt;大部分需要获得帮助的人都有命令式编程的背景，因此，我会先用命令式的方式，然后再用函数式的方式来教大家在 Haskell 中使用随机数。&lt;/p&gt;
&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;我会生成满足以下条件的随机列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表长度是 1 到 7 &lt;/li&gt;
&lt;li&gt;列表中的每一项都是 0.0 到 1.0 之间的浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令式&quot;&gt;&lt;a href=&quot;#命令式&quot; class=&quot;headerlink&quot; title=&quot;命令式&quot;&gt;&lt;/a&gt;命令式&lt;/h2&gt;&lt;p&gt;在 IO monad 中有一个全局的生成器，你可以初始化它，然后获取随机数。下面有一些常用的函数：&lt;/p&gt;
&lt;h3 id=&quot;setStdGen-StdGen-gt-IO&quot;&gt;&lt;a href=&quot;#setStdGen-StdGen-gt-IO&quot; class=&quot;headerlink&quot; title=&quot;setStdGen :: StdGen -&amp;gt; IO ()&quot;&gt;&lt;/a&gt;&lt;code&gt;setStdGen :: StdGen -&amp;gt; IO ()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;初始化或者设置全局生成器，我们可以用 &lt;code&gt;mkStdGen&lt;/code&gt; 来生成随机种子。因此，有一个很傻瓜式的用法：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;setStdGen&lt;/span&gt; (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你可以用任意的 &lt;code&gt;Int&lt;/code&gt; 来替换 &lt;code&gt;42&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其实，你可以选择是否调用 &lt;code&gt;setStdGen&lt;/code&gt;，如果你不调用的话，全局的生成器还是可用的。因为在 runtime 会在启动的时候用一个任意的种子去初始化它，所以每次启动的时候，都会有一个不同的种子。&lt;/p&gt;
&lt;h3 id=&quot;randomRIO-Random-a-gt-a-a-gt-IO-a&quot;&gt;&lt;a href=&quot;#randomRIO-Random-a-gt-a-a-gt-IO-a&quot; class=&quot;headerlink&quot; title=&quot;randomRIO :: (Random a) =&amp;gt; (a,a) -&amp;gt; IO a&quot;&gt;&lt;/a&gt;&lt;code&gt;randomRIO :: (Random a) =&amp;gt; (a,a) -&amp;gt; IO a&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在给定范围随机返回一个类型为 &lt;code&gt;a&lt;/code&gt; 的值，同时全局生成器也会更新。你可以通过一个元组来指定范围。下面这个例子会返回 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;z&lt;/code&gt; 之间的随机值（包含 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;z&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt; &amp;lt;- randomRIO (&#39;a&#39;, &#39;z&#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 可以是任意类型吗？并非如此。在 Haskell 98 标准中， &lt;code&gt;Random&lt;/code&gt; 库只支持 &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Char&lt;/code&gt;,  &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;（你可以自己去扩展这个支持的范围，但这是另外一个话题了）。&lt;/p&gt;
&lt;h3 id=&quot;randomIO-Random-a-gt-IO-a&quot;&gt;&lt;a href=&quot;#randomIO-Random-a-gt-IO-a&quot; class=&quot;headerlink&quot; title=&quot;randomIO :: (Random a) =&amp;gt; IO a&quot;&gt;&lt;/a&gt;&lt;code&gt;randomIO :: (Random a) =&amp;gt; IO a&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;返回一个类型为 &lt;code&gt;a&lt;/code&gt; 的随机数（&lt;code&gt;a&lt;/code&gt; 可以是任意类型吗？看上文），全局的生成器也会更新。下面这个例子会返回一个 &lt;code&gt;Double&lt;/code&gt; 类型的随机数：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt; &amp;lt;- randomIO :: &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随机数返回的范围由类型决定。&lt;/p&gt;
&lt;p&gt;需要注意的是，这些都是 IO 函数，因此你只可以在 IO 函数中使用它们。换句话说，如果你写了一个要使用它们的函数，它的返回类型也会变成是 IO 函数。&lt;/p&gt;
&lt;p&gt;举个例子，上面提到的代码片段都要写在 &lt;code&gt;do block&lt;/code&gt; 中。这只是一个提醒，因为我们想要用命令式的方式来生成随机数。&lt;/p&gt;
&lt;p&gt;下面这个例子展示如何在 IO monad 中完成之前的任务：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;import&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; System.Random&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setStdGen (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;-- 这步是可选的，如果有这一步，你每一次运行的结果都是一样的，因为随机种子固定是 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s &amp;lt;- randomStuff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n &amp;lt;- randomRIO (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sequence (replicate n (randomRIO (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;纯函数式&quot;&gt;&lt;a href=&quot;#纯函数式&quot; class=&quot;headerlink&quot; title=&quot;纯函数式&quot;&gt;&lt;/a&gt;纯函数式&lt;/h2&gt;&lt;p&gt;你可能有以下原因想知道如何用函数式的方式生成随机数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你有好奇心&lt;/li&gt;
&lt;li&gt;你不想用 IO monad&lt;/li&gt;
&lt;li&gt;因为一些并发或者其他原因，你想几个生成器同时存在，共享全局生成器不能解决你的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，有两种方法来用函数式的方式去生成随机数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 stream（无限列表） 中提取随机数&lt;/li&gt;
&lt;li&gt;把生成器当成函数参数的一部分，然后返回随机数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有一些常用的函数用来创建生成器和包含随机数的无限列表。&lt;/p&gt;
&lt;h3 id=&quot;mkStdGen-Int-gt-StdGen&quot;&gt;&lt;a href=&quot;#mkStdGen-Int-gt-StdGen&quot; class=&quot;headerlink&quot; title=&quot;mkStdGen :: Int -&amp;gt; StdGen&quot;&gt;&lt;/a&gt;&lt;code&gt;mkStdGen :: Int -&amp;gt; StdGen&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用随机种子创建生成器。&lt;/p&gt;
&lt;h3 id=&quot;randomRs-Random-a-RandomGen-g-gt-a-a-gt-g-gt-a&quot;&gt;&lt;a href=&quot;#randomRs-Random-a-RandomGen-g-gt-a-a-gt-g-gt-a&quot; class=&quot;headerlink&quot; title=&quot;randomRs :: (Random a, RandomGen g) =&amp;gt; (a, a) -&amp;gt; g -&amp;gt; [a]&quot;&gt;&lt;/a&gt;&lt;code&gt;randomRs :: (Random a, RandomGen g) =&amp;gt; (a, a) -&amp;gt; g -&amp;gt; [a]&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用生成器生成给定范围的无限列表。例子：用 &lt;code&gt;42&lt;/code&gt; 作为随机种子，返回 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;z&lt;/code&gt; 之间包含 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;z&lt;/code&gt; 的无限列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomRs&lt;/span&gt; (&#39;a&#39;, &#39;z&#39;) (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类型 &lt;code&gt;a&lt;/code&gt; 是随机数的类型。类型 &lt;code&gt;g&lt;/code&gt; 看起来是通用的，但实际上它总是 &lt;code&gt;StdGen&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;randoms-Random-a-RandomGen-g-gt-g-gt-a&quot;&gt;&lt;a href=&quot;#randoms-Random-a-RandomGen-g-gt-g-gt-a&quot; class=&quot;headerlink&quot; title=&quot;randoms :: (Random a, RandomGen g) =&amp;gt; g -&amp;gt; [a]&quot;&gt;&lt;/a&gt;&lt;code&gt;randoms :: (Random a, RandomGen g) =&amp;gt; g -&amp;gt; [a]&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用给定的生成器生成随机数的无限列表。例如：用 &lt;code&gt;42&lt;/code&gt; 作为随机种子生成 &lt;code&gt;Double&lt;/code&gt; 类型的列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randoms&lt;/span&gt; (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;) :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随机数的范围由类型决定，你需要查文档来确定具体范围，或者直接用 &lt;code&gt;randomRs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意，这些都是函数式的 —— 意味着这里面没有副作用，特别是生成器并不会更新。如果你用一个生成器去生成第一个列表，然后用相同的生成器去生成第二个列表…&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; = randoms g :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;b&lt;/span&gt; = randoms g :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;猜猜结果，由于透明引用，这两个列表的结果是一样的！（如果你想用一个随机种子来生成两个不同的列表，我等下告诉你一个方法）。&lt;/p&gt;
&lt;p&gt;下面一种方法来完成创建 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt; 的随机列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;import&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; System.Random&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; g   = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [s] = take &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (randomStuff g)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;RandomGen&lt;/span&gt; g =&amp;gt; g -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; g = work (randomRs (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) g)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; :: [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;] -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; (r:rs)      =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n        = truncate (r * &lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (xs, ys) = splitAt n rs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs : work ys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了必要的打印操作外，这是纯函数式的。它用生成器生成了无限列表，然后再用这个无限列表来生成另一个无限列表作为答案，最后取第一个作为返回值。&lt;/p&gt;
&lt;p&gt;我这样做是因为尽管我们今天的人物是生成一个随机数，但你通常会需要很多个，我希望这个例子可以对你有点帮助。&lt;/p&gt;
&lt;p&gt;上面的代码的工作原理是：用一个生成器，创建一个包含 &lt;code&gt;Float&lt;/code&gt; 的无限列表。截取第一个值，并扩大这个值到 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt;，然后用剩下的列表来生成答案。换句话说，把输入的列表分成 &lt;code&gt;(r:rs)&lt;/code&gt;，&lt;code&gt;r&lt;/code&gt; 决定生成列表的长度（&lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt;），&lt;code&gt;rs&lt;/code&gt; 之后会被计算答案。&lt;/p&gt;
&lt;h3 id=&quot;split-RandomGen-g-gt-g-gt-g-g&quot;&gt;&lt;a href=&quot;#split-RandomGen-g-gt-g-gt-g-g&quot; class=&quot;headerlink&quot; title=&quot;split :: (RandomGen g) =&amp;gt; g -&amp;gt; (g, g)&quot;&gt;&lt;/a&gt;&lt;code&gt;split :: (RandomGen g) =&amp;gt; g -&amp;gt; (g, g)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用一个随机种子创建两个不同的生成器，其他情况下重用相同的种子是不明智的。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(ga, gb) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- do not use g elsewhere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想创建多余两个的生成器，你可以对新的生成器中的其中一个使用 &lt;code&gt;split&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(ga, g&#39;) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gb, gc) = split g&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- do not use g, g&#39; elsewhere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以用 &lt;code&gt;split&lt;/code&gt; 来获得两个生成器，这样我们就可以产生两个随机列表了。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;RandomGen&lt;/span&gt; g =&amp;gt; g -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; g = work (randomRs (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;) ga) (randomRs (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) gb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; (ga,gb) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; :: [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;] -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; (n:ns) rs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (xs,ys) = splitAt n rs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs : work ns ys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它把生成器分成两个，然后产生两个列表。&lt;/p&gt;
&lt;p&gt;我在主程序中硬编码了随机种子。正常情况下你可以在其他地方获取随机种子 —— 从输入中获取，从文件中获取，从时间上获取，或者从某些设备中获取。&lt;/p&gt;
&lt;p&gt;这些在主程序中都是 do-able 的，因为它们都可以在 IO monad 中访问。&lt;/p&gt;
&lt;p&gt;你也可以通过 &lt;code&gt;getStdGen&lt;/code&gt; 获取全局生成器：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g &amp;lt;- getStdGen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [s] = take randomStuff g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.vex.net/~trebla/haskell/random.xhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随机数（我指的是伪随机数）是通过显式或隐式的状态来生成的。这意味着在 Haskell 中，随机数的使用（通过 &lt;code&gt;System.Random&lt;/code&gt; 库）是伴随着状态的传递的。 &lt;/p&gt;
&lt;p&gt;大部分需要获得帮助的人都有命令式编程的背景，因此，我会先用命令式的
    
    </summary>
    
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
      <category term="random" scheme="http://scarletsky.github.io/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>在 Node.js 中利用 js-xlsx 处理 Excel 文件</title>
    <link href="http://scarletsky.github.io/2016/01/30/nodejs-process-excel/"/>
    <id>http://scarletsky.github.io/2016/01/30/nodejs-process-excel/</id>
    <published>2016-01-30T03:31:46.000Z</published>
    <updated>2016-02-11T03:42:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的 &lt;code&gt;js-xlsx&lt;/code&gt; 库来处理 Excel 文件。&lt;br&gt;&lt;code&gt;js-xlsx&lt;/code&gt; 库是目前 Github 上 star 数量最多的处理 Excel 的库，功能强大，但上手难度稍大。文档有些乱，不适合快速上手。&lt;br&gt;本文对 &lt;code&gt;js-xlsx&lt;/code&gt; 库进行一定的总结，并提供几个实用的例子供读者测试，学习，交流。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install xlsx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;在使用这个库之前，先介绍库中的一些概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;workbook&lt;/code&gt; 对象，指的是整份 Excel 文档。我们在使用 &lt;code&gt;js-xlsx&lt;/code&gt; 读取 Excel 文档之后就会获得 &lt;code&gt;workbook&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;worksheet&lt;/code&gt; 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 &lt;code&gt;worksheet&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cell&lt;/code&gt; 对象，指的就是 &lt;code&gt;worksheet&lt;/code&gt; 中的单元格，一个单元格就是一个 &lt;code&gt;cell&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的关系如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;XLSX.readFile&lt;/code&gt; 打开 Excel 文件，返回 &lt;code&gt;workbook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;workbook.SheetNames&lt;/code&gt; 获取表名&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;workbook.Sheets[xxx]&lt;/code&gt; 通过表名获取表格&lt;/li&gt;
&lt;li&gt;按自己的需求去处理表格&lt;/li&gt;
&lt;li&gt;生成新的 Excel 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;具体用法&quot;&gt;&lt;a href=&quot;#具体用法&quot; class=&quot;headerlink&quot; title=&quot;具体用法&quot;&gt;&lt;/a&gt;具体用法&lt;/h3&gt;&lt;p&gt;读取 Excel 文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; XLSX &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;xlsx&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; workbook = XLSX.readFile(&lt;span class=&quot;string&quot;&gt;&#39;someExcel.xlsx&#39;&lt;/span&gt;, opts);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取 Excel 文件中的表&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 Excel 中所有表名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sheetNames = workbook.SheetNames; &lt;span class=&quot;comment&quot;&gt;// 返回 [&#39;sheet1&#39;, &#39;sheet2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据表名获取对应某张表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; worksheet = workbook.Sheets[sheetNames[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;worksheet[address]&lt;/code&gt; 来操作表格，以 &lt;code&gt;!&lt;/code&gt; 开头的 key 是特殊的字段。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 A1 单元格对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a1 = worksheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 返回 &amp;#123; v: &#39;hello&#39;, t: &#39;s&#39;, ... &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 A1 中的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1.v &lt;span class=&quot;comment&quot;&gt;// 返回 &#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取表的有效范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回 &#39;A1:B20&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!range&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回 range 对象，&amp;#123; s: &amp;#123; r: 0, c: 0&amp;#125;, e: &amp;#123; r: 100, c: 2 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取合并过的单元格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!merges&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回一个包含 range 对象的列表，[ &amp;#123;s: &amp;#123; r: 0, c: 0 &amp;#125;, c: &amp;#123; r: 2, c: 1 &amp;#125; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;解析-Excel-生成-JSON&quot;&gt;&lt;a href=&quot;#解析-Excel-生成-JSON&quot; class=&quot;headerlink&quot; title=&quot;解析 Excel 生成 JSON&quot;&gt;&lt;/a&gt;解析 Excel 生成 JSON&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt; 事实上，你可以直接通过 &lt;code&gt;XLSX.utils.sheet_to_json(worksheet)&lt;/code&gt; 获得同样的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 本例子中假设表的第一行为字段名&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; headers = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; keys = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(worksheet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过滤以 ! 开头的 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter(k =&amp;gt; k[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] !== &lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历所有单元格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach(k =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如 A11 中的 A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; col = k.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如 A11 中的 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; row = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(k.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 当前单元格的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = worksheet[k].v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 保存字段名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (row === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            headers[col] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 解析成 JSON&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!data[row]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data[row] = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data[row][headers[col]] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data); &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; &#39;姓名&#39;: &#39;test1&#39;, &#39;年龄&#39;: 20 &amp;#125;, &amp;#123; &#39;姓名&#39;: &#39;test2&#39;, &#39;年龄&#39;: 10 &amp;#125; ... ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;合并表格&quot;&gt;&lt;a href=&quot;#合并表格&quot; class=&quot;headerlink&quot; title=&quot;合并表格&quot;&gt;&lt;/a&gt;合并表格&lt;/h4&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取多份表格&lt;/li&gt;
&lt;li&gt;合并数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; 其实合并表格跟 &lt;code&gt;XLSX&lt;/code&gt; 没什么关系，只是处理几个数组而已。&lt;/p&gt;
&lt;p&gt;sheet1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;test1&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;test2&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;test3&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;sheet2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;remark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;China&lt;/td&gt;
&lt;td&gt;hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;America&lt;/td&gt;
&lt;td&gt;world&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Unkonw&lt;/td&gt;
&lt;td&gt;???&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sheet1 = XLSX.utils.sheet_to_json(sheet1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sheet2 = XLSX.utils.sheet_to_json(sheet2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先合并 sheet1 和 sheet2，再对统一处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = sheet1.concat(sheet2).reduce((prev, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = prev.findIndex((elem, i) =&amp;gt; elem.id === next.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index === -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev.concat(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prev[index] = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev[index], next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; id: &#39;1&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test1&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;30&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;China&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;hello&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &amp;#123; id: &#39;2&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test2&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;20&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;America&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;world&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &amp;#123; id: &#39;3&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test3&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;18&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;Unkonw&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;???&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;导出表格&quot;&gt;&lt;a href=&quot;#导出表格&quot; class=&quot;headerlink&quot; title=&quot;导出表格&quot;&gt;&lt;/a&gt;导出表格&lt;/h4&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建特定的数据结构，如下。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;XLSX.writeFile(workbook, filename)&lt;/code&gt; 即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A1:E4&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 必须要有这个范围才能输出，否则导出的 excel 会是一个空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _headers = [&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;country&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;remark&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _data = [ &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt; &amp;#125; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headers = _headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 为 _headers 添加对应的单元格位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; v: &#39;id&#39;, position: &#39;A1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;name&#39;, position: &#39;B1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;age&#39;, position: &#39;C1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;country&#39;, position: &#39;D1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;remark&#39;, position: &#39;E1&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .map((v, i) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &amp;#123;v: v, position: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+i) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 转换成 worksheet 需要的结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// &amp;#123; A1: &amp;#123; v: &#39;id&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   B1: &amp;#123; v: &#39;name&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   C1: &amp;#123; v: &#39;age&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   D1: &amp;#123; v: &#39;country&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   E1: &amp;#123; v: &#39;remark&#39; &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .reduce((prev, next) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = _data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 匹配 headers 的位置，生成对应的单元格数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// [ [ &amp;#123; v: &#39;1&#39;, position: &#39;A2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test1&#39;, position: &#39;B2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;30&#39;, position: &#39;C2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;China&#39;, position: &#39;D2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;hello&#39;, position: &#39;E2&#39; &amp;#125; ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   [ &amp;#123; v: &#39;2&#39;, position: &#39;A3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test2&#39;, position: &#39;B3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;20&#39;, position: &#39;C3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;America&#39;, position: &#39;D3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;world&#39;, position: &#39;E3&#39; &amp;#125; ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   [ &amp;#123; v: &#39;3&#39;, position: &#39;A4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test3&#39;, position: &#39;B4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;18&#39;, position: &#39;C4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;Unkonw&#39;, position: &#39;D4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;???&#39;, position: &#39;E4&#39; &amp;#125; ] ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .map((v, i) =&amp;gt; _headers.map((k, j) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &amp;#123; v: v[k], position: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+j) + (i+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#125;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 对刚才的结果进行降维处理（二维数组变成一维数组）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; v: &#39;1&#39;, position: &#39;A2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test1&#39;, position: &#39;B2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;30&#39;, position: &#39;C2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;China&#39;, position: &#39;D2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;hello&#39;, position: &#39;E2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;2&#39;, position: &#39;A3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test2&#39;, position: &#39;B3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;20&#39;, position: &#39;C3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;America&#39;, position: &#39;D3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;world&#39;, position: &#39;E3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;3&#39;, position: &#39;A4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test3&#39;, position: &#39;B4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;18&#39;, position: &#39;C4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;Unkonw&#39;, position: &#39;D4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;???&#39;, position: &#39;E4&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, next) =&amp;gt; prev.concat(next))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 转换成 worksheet 需要的结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; A2: &amp;#123; v: &#39;1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B2: &amp;#123; v: &#39;test1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C2: &amp;#123; v: &#39;30&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D2: &amp;#123; v: &#39;China&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E2: &amp;#123; v: &#39;hello&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     A3: &amp;#123; v: &#39;2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B3: &amp;#123; v: &#39;test2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C3: &amp;#123; v: &#39;20&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D3: &amp;#123; v: &#39;America&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E3: &amp;#123; v: &#39;world&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     A4: &amp;#123; v: &#39;3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B4: &amp;#123; v: &#39;test3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C4: &amp;#123; v: &#39;18&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D4: &amp;#123; v: &#39;Unkonw&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E4: &amp;#123; v: &#39;???&#39; &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, next) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 合并 headers 和 data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, headers, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取所有单元格的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; outputPos = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算出范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ref = outputPos[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + outputPos[outputPos.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 构建 workbook 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wb = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, output, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: ref &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 导出 Excel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XLSX.writeFile(wb, &lt;span class=&quot;string&quot;&gt;&#39;output.xlsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SheetJS/js-xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SheetJS/js-xlsx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的 &lt;code&gt;js-xlsx&lt;/code&gt; 库来处理 Excel 文件。&lt;br&gt;&lt;code&gt;js-xlsx&lt;
    
    </summary>
    
    
      <category term="excel" scheme="http://scarletsky.github.io/tags/excel/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="js-xlsx" scheme="http://scarletsky.github.io/tags/js-xlsx/"/>
    
      <category term="node" scheme="http://scarletsky.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>简单易懂的 Flexbox</title>
    <link href="http://scarletsky.github.io/2016/01/23/simple-flexbox/"/>
    <id>http://scarletsky.github.io/2016/01/23/simple-flexbox/</id>
    <published>2016-01-23T01:58:37.000Z</published>
    <updated>2016-01-23T06:06:27.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;设置父容器的 &lt;code&gt;display&lt;/code&gt; 为 &lt;code&gt;flex&lt;/code&gt;，然后调节容器相关的属性。&lt;/li&gt;
&lt;li&gt;调节子元素相关的属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.container &amp;#123; display: flex; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;具体用法&quot;&gt;&lt;a href=&quot;#具体用法&quot; class=&quot;headerlink&quot; title=&quot;具体用法&quot;&gt;&lt;/a&gt;具体用法&lt;/h2&gt;&lt;p&gt;要使用 Flexbox 布局，你需要设置父容器和子元素的属性。&lt;/p&gt;
&lt;h3 id=&quot;父容器设置&quot;&gt;&lt;a href=&quot;#父容器设置&quot; class=&quot;headerlink&quot; title=&quot;父容器设置&quot;&gt;&lt;/a&gt;父容器设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启用 flex 布局 &lt;code&gt;display: flex | inline-flex&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置主轴方向 &lt;code&gt;flex-direction: row | row-reverse | column | column-reverse&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt; 默认值，从左到右&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row-reverse&lt;/code&gt; 从右到左&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt; 从上到下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-reverse&lt;/code&gt; 从下到上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素的换行方式 &lt;code&gt;flex-wrap: nowrap | wrap | wrap-reverse&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt; 默认值，让所有子元素排在一行中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt; 自动换行，方向为从右到左。(这里的方向是指换行方向，不是指排列方向)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap-reverse&lt;/code&gt; 自动换行，方向为从左到右&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flex-direction&lt;/code&gt; 和 &lt;code&gt;flex-wrap&lt;/code&gt; 的简写：&lt;code&gt;flex-flow: &amp;lt;&amp;#39;flex-direction&amp;#39;&amp;gt; || &amp;lt;&amp;#39;flex-wrap&amp;#39;&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素的在主轴中对齐方式 &lt;code&gt;justify-content: flex-start | flex-end | center | space-between | space-around&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 默认值，在起始位置对齐。和 &lt;code&gt;flex-direction: row&lt;/code&gt; 一起用的话相当于左对齐，和 &lt;code&gt;flex-direction: column&lt;/code&gt; 一起用的话相当于上对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 在终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 居中对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-bewteen&lt;/code&gt; 第一个子元素会在起始位置，最后一个子元素会在终点位置，它们之间的元素会在剩余位置中平均分布&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt; 所有元素都会平均分布在容器中。注意，视觉上元素不是平均分布的。那是因为所有元素所占的空间都被平均分了，元素两边都有空间，第一个元素和最后一个元素靠近容器的边缘只有一份空间，其他空白的地方都是有两份空间组成的，所以看起来两边的空间少，而中间的空间多。好好体会一下 &lt;code&gt;space-around&lt;/code&gt; 字面上的意思就能理解了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素在侧轴中的对齐方式 &lt;code&gt;align-items: flex-start | flex-end | center | baseline | stretch&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt; 默认值，拉伸元素来填充父容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 在侧轴的起始位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 在侧轴的终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 居中于侧轴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseline&lt;/code&gt; 在基线对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置侧轴中行(不是元素)的对齐方式 &lt;code&gt;align-content: flex-start | flex-end | center | space-between | space-around | stretch&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt; 默认值，拉伸行来填充剩余的空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 所有行在容器的起始位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 所有行在容器的终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 所有行居中于容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-between&lt;/code&gt; 类似 &lt;code&gt;justify-content: space-between&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt; 类似 &lt;code&gt;justify-content: space-around&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;子元素设置&quot;&gt;&lt;a href=&quot;#子元素设置&quot; class=&quot;headerlink&quot; title=&quot;子元素设置&quot;&gt;&lt;/a&gt;子元素设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置元素的排序方式 &lt;code&gt;order: &amp;lt;integer&amp;gt;&lt;/code&gt;，数字越小，排越前面。默认情况下是以文档流的先后顺序排序，负值合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的扩展能力 &lt;code&gt;flex-grow: &amp;lt;number&amp;gt;&lt;/code&gt;，默认为1，增大该值表示该元素所占空间是其他元素的 n 倍，负值不合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的收缩能力 &lt;code&gt;flex-shrink: &amp;lt;number&amp;gt;&lt;/code&gt;，默认为 1，减少该值表示该元素所站空间是其他元素的 1/n，负值不合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的基本大小：&lt;code&gt;flex-basis: &amp;lt;length&amp;gt; | auto&lt;/code&gt;，默认为 auto。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面属性的缩写：&lt;code&gt;flex: none | [ &amp;lt;&amp;#39;flex-grow&amp;#39;&amp;gt; &amp;lt;&amp;#39;flex-shrink&amp;#39;&amp;gt;? || &amp;lt;&amp;#39;flex-basis&amp;#39;&amp;gt; ]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定元素的排列方式，作用和容器中的 &lt;code&gt;align-items&lt;/code&gt; 类似，优先级比 &lt;code&gt;align-items&lt;/code&gt; 高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;vertical-align&lt;/code&gt; 在子元素中不起作用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/a-guide-to-flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/a-guide-to-flexbox.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://zh.learnlayout.com/flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/flexbox.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="css" scheme="http://scarletsky.github.io/tags/css/"/>
    
      <category term="flexbox" scheme="http://scarletsky.github.io/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>Spacemacs 使用总结</title>
    <link href="http://scarletsky.github.io/2016/01/22/spacemacs-usage/"/>
    <id>http://scarletsky.github.io/2016/01/22/spacemacs-usage/</id>
    <published>2016-01-22T07:20:38.000Z</published>
    <updated>2016-02-29T02:21:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。&lt;/p&gt;
&lt;h2 id=&quot;安装-amp-使用&quot;&gt;&lt;a href=&quot;#安装-amp-使用&quot; class=&quot;headerlink&quot; title=&quot;安装 &amp;amp; 使用&quot;&gt;&lt;/a&gt;安装 &amp;amp; 使用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/syl20bnr/spacemacs ~/.emacs.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ emacs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;p&gt;Spacemacs 的配置文件位于 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中，我们只需要修改这个文件就可以制定自己的配置了。&lt;/p&gt;
&lt;p&gt;一般情况下，我们只需要在 &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; 中添加自己需要的 layer 就可以了。&lt;/p&gt;
&lt;h2 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h2&gt;&lt;h4 id=&quot;配置文件管理&quot;&gt;&lt;a href=&quot;#配置文件管理&quot; class=&quot;headerlink&quot; title=&quot;配置文件管理&quot;&gt;&lt;/a&gt;配置文件管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f e d&lt;/code&gt; 快速打开配置文件 &lt;code&gt;.spacemacs&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC f e R&lt;/code&gt; 同步配置文件&lt;/p&gt;
&lt;h4 id=&quot;文件管理&quot;&gt;&lt;a href=&quot;#文件管理&quot; class=&quot;headerlink&quot; title=&quot;文件管理&quot;&gt;&lt;/a&gt;文件管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f f&lt;/code&gt; 打开文件（夹），相当于 &lt;code&gt;$ open xxx&lt;/code&gt; 或 &lt;code&gt;$ cd /path/to/project&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC p f&lt;/code&gt; 搜索文件名，相当于 ST / Atom 中的 &lt;code&gt;Ctrl + p&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC s a p&lt;/code&gt; 搜索内容，相当于 &lt;code&gt;$ ag xxx&lt;/code&gt; 或 ST / Atom 中的 &lt;code&gt;Ctrl + Shift + f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC b k&lt;/code&gt; 关闭当前 buffer&lt;br&gt;&lt;code&gt;SPC SPC&lt;/code&gt; 搜索当前文件 &lt;/p&gt;
&lt;h4 id=&quot;窗口管理&quot;&gt;&lt;a href=&quot;#窗口管理&quot; class=&quot;headerlink&quot; title=&quot;窗口管理&quot;&gt;&lt;/a&gt;窗口管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f t 或 SPC p t&lt;/code&gt; 用 NeoTree 打开/关闭侧边栏，相当于 ST / Atom 中的 &lt;code&gt;Ctrl(cmd) + k + b&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC f t&lt;/code&gt; 打开当前文件所在的目录&lt;br&gt;&lt;code&gt;SPC p t&lt;/code&gt; 打开当前文件所在的&lt;strong&gt;根&lt;/strong&gt;目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC 0&lt;/code&gt; 光标跳转到侧边栏（NeoTree）中&lt;br&gt;&lt;code&gt;SPC n(数字)&lt;/code&gt; 光标跳转到第 n 个 buffer 中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC w s 或 SPC w -&lt;/code&gt; 水平分割窗口&lt;br&gt;&lt;code&gt;SPC w v 或 SPC w /&lt;/code&gt; 垂直分割窗口&lt;br&gt;&lt;code&gt;SPC w c&lt;/code&gt; 关闭当前窗口&lt;/p&gt;
&lt;h4 id=&quot;对齐&quot;&gt;&lt;a href=&quot;#对齐&quot; class=&quot;headerlink&quot; title=&quot;对齐&quot;&gt;&lt;/a&gt;对齐&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC j =&lt;/code&gt; 自动对齐，相当于 beautify&lt;/p&gt;
&lt;h4 id=&quot;Shell-集成-必须先配置-Shell-layer&quot;&gt;&lt;a href=&quot;#Shell-集成-必须先配置-Shell-layer&quot; class=&quot;headerlink&quot; title=&quot;Shell 集成 (必须先配置 Shell layer)&quot;&gt;&lt;/a&gt;Shell 集成 (必须先配置 Shell layer)&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC &amp;#39;(单引号)&lt;/code&gt; 打开/关闭 Shell&lt;br&gt;&lt;code&gt;C-k&lt;/code&gt; 前一条 shell 命令，相当于在 shell 中按上箭头&lt;br&gt;&lt;code&gt;C-j&lt;/code&gt; 后一条 shell 命令，相当于在 shell 中按下箭头&lt;/p&gt;
&lt;h2 id=&quot;让-Spacemacs-支持-EditorConfig&quot;&gt;&lt;a href=&quot;#让-Spacemacs-支持-EditorConfig&quot; class=&quot;headerlink&quot; title=&quot;让 Spacemacs 支持 EditorConfig&quot;&gt;&lt;/a&gt;让 Spacemacs 支持 EditorConfig&lt;/h2&gt;&lt;p&gt;EditorConfig 是一个配置文件，一般位于项目的根目录，它可以让不同的编辑器和IDE 都按照相同的格式来格式化代码，对于项目的维护者来说是一个很好的工具。&lt;/p&gt;
&lt;p&gt;Spacemacs 也支持 EditorConfig，只需要在配置文件中添加配置即可。下面以 OS X 为例，通过以下步骤即可让 Spacemacs 支持 EditorConfig：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ brew install editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中的 &lt;code&gt;dotspacemacs-additional-packages&lt;/code&gt; 中添加 &lt;code&gt;editorconfig&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;dotspacemacs&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;additional-packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   editorconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 &lt;code&gt;.editorconfig&lt;/code&gt; 文件，写上自己喜欢的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;M-x&lt;/code&gt; 打开 &lt;code&gt;editorconfig-mode&lt;/code&gt; 或调用 &lt;code&gt;editorconfig-apply&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;完。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Git-集成-必须先配置Magit-的使用&quot;&gt;&lt;a href=&quot;#Git-集成-必须先配置Magit-的使用&quot; class=&quot;headerlink&quot; title=&quot;Git 集成 (必须先配置Magit 的使用)&quot;&gt;&lt;/a&gt;Git 集成 (必须先配置Magit 的使用)&lt;/h2&gt;&lt;p&gt;Git 是一个优秀的版本控制工具，我们可以在 &lt;code&gt;.spacemacs&lt;/code&gt; 的 &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; 列表中添加 &lt;code&gt;git&lt;/code&gt; 就可以集成 git 了。&lt;/p&gt;
&lt;p&gt;下面是一些常用的 git 命令，前缀为 &lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC g i&lt;/code&gt; 相当于 &lt;code&gt;git init&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC g s&lt;/code&gt; 相当于 &lt;code&gt;git status&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC g S&lt;/code&gt; 相当于 &lt;code&gt;git add currentFile&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC g c c&lt;/code&gt; 相当于 &lt;code&gt;git commit&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC g C&lt;/code&gt; 相当于 &lt;code&gt;git checkout xxx&lt;/code&gt; (切换分支)&lt;br&gt;&lt;code&gt;SPC g P p&lt;/code&gt; 相当于 &lt;code&gt;git push&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC g l l&lt;/code&gt; 相当于 &lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 commit 时，我们输入完 commit message 之后，需要按 &lt;code&gt;C-c C-c&lt;/code&gt; 来完成 commit 操作，也可以按 &lt;code&gt;C-c C-k&lt;/code&gt; 来取消 commit 。&lt;/p&gt;
&lt;h2 id=&quot;设置文件默认的主模式&quot;&gt;&lt;a href=&quot;#设置文件默认的主模式&quot; class=&quot;headerlink&quot; title=&quot;设置文件默认的主模式&quot;&gt;&lt;/a&gt;设置文件默认的主模式&lt;/h2&gt;&lt;p&gt;虽然我们可以通过 &lt;code&gt;M-x&lt;/code&gt; 来设置文件的主模式，但这种方式只是在单独修改某个文件的主模式时好用，如果要把所有同类型的文件都改成其他模式，这种方式的效率就太低了。&lt;/p&gt;
&lt;p&gt;在 Spacemacs 中，我们可以用 &lt;code&gt;auto-mode-alist&lt;/code&gt; 来设置某一类文件默认的主模式。&lt;/p&gt;
&lt;p&gt;我们只需要在 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中的 &lt;code&gt;user-config&lt;/code&gt; 中加入下面代码即可：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(add-to-list &amp;#39;auto-mode-alist &amp;#39;(&amp;#34;\\.js\\&amp;#39;&amp;#34; . react-mode))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码会用 &lt;code&gt;react-mode&lt;/code&gt; 打开所有 &lt;code&gt;.js&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&quot;Emacs-服务器&quot;&gt;&lt;a href=&quot;#Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;Emacs 服务器&quot;&gt;&lt;/a&gt;Emacs 服务器&lt;/h2&gt;&lt;p&gt;Spacemacs 会在启动时启动服务器，这个服务器会在 Spacemacs 关闭的时候被杀掉。&lt;/p&gt;
&lt;h3 id=&quot;使用-Emacs-服务器&quot;&gt;&lt;a href=&quot;#使用-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;使用 Emacs 服务器&quot;&gt;&lt;/a&gt;使用 Emacs 服务器&lt;/h3&gt;&lt;p&gt;当 Emacs 服务器启动的时候，我们可以在命令行中使用 &lt;code&gt;emacsclient&lt;/code&gt; 命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -c&lt;/code&gt; 用 Emacs GUI 来打开文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -t&lt;/code&gt; 用命令行中 Emacs 来打开文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;杀掉-Emacs-服务器&quot;&gt;&lt;a href=&quot;#杀掉-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;杀掉 Emacs 服务器&quot;&gt;&lt;/a&gt;杀掉 Emacs 服务器&lt;/h3&gt;&lt;p&gt;除了关闭 Spacemacs 之外，我们还可以用下面的命令来杀掉 Emacs 服务器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -e &amp;#39;(kill-emacs)&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;持久化-Emacs-服务器&quot;&gt;&lt;a href=&quot;#持久化-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;持久化 Emacs 服务器&quot;&gt;&lt;/a&gt;持久化 Emacs 服务器&lt;/h3&gt;&lt;p&gt;我们可以持久化 Emacs 服务器，在 Emacs 关闭的时候，服务器不被杀掉。只要设置 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中 &lt;code&gt;dotspacemacs-persistent-server&lt;/code&gt; 为 &lt;code&gt;t&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;但这种情况下，我们只可以通过以下方式来杀掉服务器了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC q q&lt;/code&gt; 退出 Emacs 并杀掉服务器，会对已修改的 Buffer 给出保存的提示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC q Q&lt;/code&gt; 同上，但会丢失所有未保存的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。&lt;/p&gt;
&lt;h2 id=&quot;安装-amp-使用&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="emacs" scheme="http://scarletsky.github.io/tags/emacs/"/>
    
      <category term="spacemacs" scheme="http://scarletsky.github.io/tags/spacemacs/"/>
    
  </entry>
  
  <entry>
    <title>Localtunnel（Node.js 版） 使用教程</title>
    <link href="http://scarletsky.github.io/2016/01/17/localtunnel-usage/"/>
    <id>http://scarletsky.github.io/2016/01/17/localtunnel-usage/</id>
    <published>2016-01-17T09:07:06.000Z</published>
    <updated>2016-01-19T06:39:22.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g localtunnel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;假设本地服务器在 8000 端口，我们可以通过下面的命令把本地服务器暴露到公网中&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lt --port 8000&amp;#10;your url is: https://uhhzexcifv.localtunnel.me&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的命令，我们不需要做其他设置就可以通过 &lt;code&gt;https://uhhzexcifv.localtunnel.me&lt;/code&gt; 来访问我们本地服务器了。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;localtunnel.me&lt;/code&gt; 是国外的服务器，访问速度有时候不太理想，这时候我们可以自己搭建 localtunnel 的服务端。&lt;/p&gt;
&lt;h2 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h2&gt;&lt;h3 id=&quot;安装-1&quot;&gt;&lt;a href=&quot;#安装-1&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone git://github.com/defunctzombie/localtunnel-server.git&amp;#10;$ cd localtunnel-server&amp;#10;$ npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;以监听 2000 端口为例：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#10;$ bin/server --port 2000&amp;#10;&amp;#10;# &amp;#37197;&amp;#21512; pm2 &amp;#20351;&amp;#29992;&amp;#10;$ pm2 start bin/server --name lt -- --port 2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动服务端程序后，我们只要在使用客户端 &lt;code&gt;lt&lt;/code&gt; 时加上 &lt;code&gt;--host&lt;/code&gt; 参数，就可以指定服务端了。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# host &amp;#21518;&amp;#38754;&amp;#19981;&amp;#35201;&amp;#21152; /&amp;#10;$ lt --host http://helloworld.com:2000 --port 8000&amp;#10;your url is: http://jhuyudvlum.helloworld.com:2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，我们就可以通过自己的代理服务器来访问本地服务器了，不用经过第三方代理服务器，不必担心代理服务器的安全问题。&lt;/p&gt;
&lt;h2 id=&quot;高级用法&quot;&gt;&lt;a href=&quot;#高级用法&quot; class=&quot;headerlink&quot; title=&quot;高级用法&quot;&gt;&lt;/a&gt;高级用法&lt;/h2&gt;&lt;h3 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;&gt;&lt;/a&gt;反向代理&lt;/h3&gt;&lt;p&gt;在 Github 上面有一份 Nginx 的&lt;a href=&quot;https://github.com/localtunnel/server/blob/master/devops/nginx/sites/localtunnel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置&lt;/a&gt;，我们可以直接使用，或者按照自己的需要做些修改。&lt;/p&gt;
&lt;h3 id=&quot;指定子域名&quot;&gt;&lt;a href=&quot;#指定子域名&quot; class=&quot;headerlink&quot; title=&quot;指定子域名&quot;&gt;&lt;/a&gt;指定子域名&lt;/h3&gt;&lt;p&gt;有时候，用随机字符串作为子域名并不是一件好事，我们可能需要固定的域名来访问本地服务器。这时，&lt;code&gt;lt --subdomain&lt;/code&gt; 就可以派上用场了。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# subdomain &amp;#38480;&amp;#21046;&amp;#38271;&amp;#24230;&amp;#20026; 4 ~ 63&amp;#10;$ lt --host http://helloworld.com:2000 --port 8000 --subdomain mysubdomain&amp;#10;your url is: http://mysubdomain.helloworld.com:2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到了吗？通过 &lt;code&gt;--subdomain&lt;/code&gt;，我们就可以指定自己喜欢的子域名了。&lt;/p&gt;
&lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;然而&lt;/strong&gt;，如果我们通过 &lt;code&gt;--host&lt;/code&gt; 来指定子域名，会发生什么？&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lt --host http://mysubdomain.hello.com --port 8000&amp;#10;Error: localtunnel server returned an error, please try again&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就算配置了 Nginx 的反向代理，你依然会得到这个错误。可以查看 &lt;a href=&quot;https://github.com/localtunnel/server/issues/21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#21&lt;/a&gt; 和  &lt;a href=&quot;https://github.com/localtunnel/server/issues/31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#31&lt;/a&gt; 来看更多的细节。&lt;/p&gt;
&lt;p&gt;要解决这个问题，最简单的就是 &lt;strong&gt;不用&lt;/strong&gt; &lt;code&gt;--host&lt;/code&gt; 来指定子域名，而用 &lt;code&gt;--subdomain&lt;/code&gt; 来指定。&lt;/p&gt;
&lt;p&gt;其实有好几个 pull request 都尝试去解决这个问题的，但不知道什么原因，作者一直没去合并。或者再过一段时间，这个问题就会解决，到时候， localtunnel 就会变得更加好用了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/localtunnel/localtunnel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/localtunnel/localtunnel&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/localtunnel/server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/localtunnel/server&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; cl
    
    </summary>
    
    
      <category term="localtunnel" scheme="http://scarletsky.github.io/tags/localtunnel/"/>
    
  </entry>
  
  <entry>
    <title>The Little JavaScript Closures</title>
    <link href="http://scarletsky.github.io/2015/12/02/the-little-javascript-closures/"/>
    <id>http://scarletsky.github.io/2015/12/02/the-little-javascript-closures/</id>
    <published>2015-12-02T12:55:54.000Z</published>
    <updated>2016-01-19T06:39:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文尝试模仿 &lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Little Schema&lt;/a&gt; 的风格，介绍 JavaScript 的闭包。本文同时也是我学习 JavaScript 闭包的一次总结。欢迎一起讨论。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;什么是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;闭包都是函数吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;函数都是闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;我怎么判断一个函数是不是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你现在还不能回答，因为你还不知道以下概念：&lt;br&gt;全局变量（Global Variable）&lt;br&gt;局部变量（Local Variable）&lt;br&gt;自由变量（Free Variable）&lt;br&gt;词法作用域（Lexical Scope）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;变量与作用域&quot;&gt;&lt;a href=&quot;#变量与作用域&quot; class=&quot;headerlink&quot; title=&quot;变量与作用域&quot;&gt;&lt;/a&gt;变量与作用域&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var a = 1;&lt;/code&gt; a 是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全局变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;a = 1;&lt;/code&gt; a 是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全局变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 a，b 分别是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a 是全局变量，b 是局部变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么 a 在函数中定义还是全局变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 a 不是用 var 声明的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;不用 &lt;code&gt;var&lt;/code&gt; 声明的变量都是全局变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;用 &lt;code&gt;var&lt;/code&gt; 声明的变量都是局部变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在全局作用域中声明的变量都是全局变量，即使这个变量是用 var 声明的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;全局作用域是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数作用域以外的地方都是就是全局作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;函数作用域又是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数内部&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo 变量和 bar 函数都处于全局作用域中，baz 变量处于函数作用域中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码中有多少个作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2 个，foo 函数所处的全局作用域和 bar 变量所处的函数作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码中有多少个作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3 个，foo 函数所处的全局作用域，bar 所处的函数作用域，和 test 所处的函数作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;上面的 bar 变量和 baz 函数处于同一个作用域吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，因为它们都在 foo 函数中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;上面 test 变量和 bar，baz处于同一个作用域中吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为 test 变量在 baz 函数中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript 用函数来划分作用域吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught ReferenceError: bar is not defined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么会报错呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为外部作用域&lt;strong&gt;不能&lt;/strong&gt;访问内部作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么不会报错？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为内部作用域&lt;strong&gt;可以&lt;/strong&gt;访问外部作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么不是输出 1 ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为局部变量的优先级比外部变量高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;undefined&lt;br&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么会这么奇怪？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为变量声明有变量提升（Variable Hoisting）的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;变量提升是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明语句会在执行前被处理，在任何地方声明一个变量，相当于在顶部位置声明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bla = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bla;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bla;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bla = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;这和之前的例子有什么关系？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数内部声明的变量，都会先在函数的顶部声明。所以之前的例子就相当于&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;什么是词法作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量的作用域是由它在源代码中所处位置决定的（词法），并且嵌套的函数可以访问到其外层作用域中声明的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;这和上面说到的内部作用域可以访问外部作用域有什么区别吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;什么是自由变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在函数内部使用到，但既不是该函数的参数，也不是该函数的局部变量的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 bar 函数有三个变量：baz, console, foo&lt;br&gt;其中 baz 是局部变量， console 和 foo 都属于自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;为什么 console 和 foo 都是自由变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 console 和 foo 都在全局作用域中，在 bar 函数中是通过引用的方式来使用 console 和 foo 的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;还需要了解其他概念吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不需要，现在已经可以深入了解闭包了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;什么是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是一个内部函数 [注1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;内部函数都是闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，引用了自由变量的内部函数才是闭包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为 foo 函数不是一个内部函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bar 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为它只是一个内部函数，并没有引用自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bar 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，因为它是一个内部函数，同时引用了自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;闭包有什么特点？&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;闭包可以访问外部变量&lt;/li&gt;
&lt;li&gt;闭包可以在外部函数返回之后依然保留外部变量的引用&lt;/li&gt;
&lt;li&gt;闭包会保留外部变量的引用，不是该变量的值&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;第一点在前面的例子中已经懂了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;第二点还没懂，可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add5 = add(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(add5(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即便 add 函数已经返回，add5 中依然可以访问 x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;第三点还没懂，可以举个例子吗？&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;user&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getId: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setId: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newId&lt;/span&gt;) &lt;/span&gt;&amp;#123; id = newId &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = user();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getId(); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.setId(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getId(); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里闭包中的 id 是一个引用，不是实际值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;有点像私有方法？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，我们可以用闭包来实现私有方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;闭包还可以用来做什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是函数式编程的骨架，掌握闭包之后你可以写出函数式 JavaScript 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;函数式编程是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是本文的讨论范围，自己去学习吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;One-More-Thing&quot;&gt;&lt;a href=&quot;#One-More-Thing&quot; class=&quot;headerlink&quot; title=&quot;One More Thing&quot;&gt;&lt;/a&gt;One More Thing&lt;/h2&gt;&lt;p&gt;[注1] 根据 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding JavaScript Closures&lt;/a&gt; 这篇文章，事实上所有函数在创建的时候都会形成闭包。但这种闭包并没什么趣味，也没什么特别的用途，所以我们更关注的是由内部函数形成的闭包。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://uternet.github.io/TLS/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptissexy.com/understand-javascript-closures-with-ease/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.moye.me/2014/12/29/closure_higher-order-function/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.moye.me/2014/12/29/closure_higher-order-function/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文尝试模仿 &lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot;
    
    </summary>
    
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React-DnD 的使用</title>
    <link href="http://scarletsky.github.io/2015/11/17/react-dnd-usage/"/>
    <id>http://scarletsky.github.io/2015/11/17/react-dnd-usage/</id>
    <published>2015-11-17T02:59:31.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trello 和 Storify 这样的应用，在不同地方通过拖拽转移数据，而组件会改变它们的外观和应用的状态来响应拖拽事件。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把应用的根组件包装在 &lt;code&gt;DragDropContext&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;把可以拖拽的组件包装在 &lt;code&gt;DragSource&lt;/code&gt; 中&lt;ol&gt;
&lt;li&gt;设置 type&lt;/li&gt;
&lt;li&gt;设置 spec，让组件可以响应拖拽事件&lt;/li&gt;
&lt;li&gt;设置 collect，把拖拽过程中需要信息注入组件的 props&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;把可以接受拖拽的组件包装在 &lt;code&gt;DropTarget&lt;/code&gt; 中&lt;ol&gt;
&lt;li&gt;设置 type&lt;/li&gt;
&lt;li&gt;设置 spec，让组件可以响应拖拽事件&lt;/li&gt;
&lt;li&gt;设置 collect，把拖拽过程中需要信息注入组件的 props&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;翻译成代码就是：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTML5Backend &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd-html5-backend&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragDropContext &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragDropContext(HTML5Backend)(App);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragSource(type, spec, collect)(MyComponent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent2&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DropTarget(types, spec, collect)(MyComponent2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，MyComponent 就变得可以拖拽，而 MyComponent2 就变得可以接受拖拽了，但这并不代表 MyComponent 可以放到 MyComponent2 中！&lt;/p&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;React DnD 中有一些特殊的概念，理解这些概念之后才能活用这个库！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Backend&lt;/code&gt; 实现 DnD 的方式，默认是用 HTML5 DnD API，它不能在触屏环境下工作，而且在 IE 下可定制性比其他浏览器弱。你也可以用自己实现，具体请看官方文档。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Items&lt;/code&gt; 拖拽数据的表现形式，用 Object 来表示。譬如，要拖拽一张卡片，那这张卡片的&lt;strong&gt;数据&lt;/strong&gt;的表现形式可能是 &lt;code&gt;{ id: xxx, content: yyy }&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Types&lt;/code&gt; 表示拖/放组件的兼容性，&lt;code&gt;DragSource&lt;/code&gt; 和 &lt;code&gt;DropTarget&lt;/code&gt; 必须指定 &lt;code&gt;type&lt;/code&gt;。只有在 &lt;code&gt;type&lt;/code&gt; 相同的情况下，&lt;code&gt;DragSource&lt;/code&gt; 才能放到 &lt;code&gt;DropTarget&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monitors&lt;/code&gt; 用来响应拖拽事件，可以用来更新组件的的状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Connectors&lt;/code&gt; 底层接触 DOM 的东西，用来封装你的组件，让你的组件有拖拽的特性。一般在 collect 方法中指定，然后注入到组件的 props 中，最后 render 方法中包装你自己的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DragSource &amp;amp;&amp;amp; DropTarget&lt;/code&gt; 把上面的概念都绑在一起的东西，也是真正跟你的组件打交道的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主要-API-介绍&quot;&gt;&lt;a href=&quot;#主要-API-介绍&quot; class=&quot;headerlink&quot; title=&quot;主要 API 介绍&quot;&gt;&lt;/a&gt;主要 API 介绍&lt;/h2&gt;&lt;p&gt;这些主要 API 都是通过包装你的组件，然后返回一个新的组件。&lt;/p&gt;
&lt;h3 id=&quot;DragDropContext-backend&quot;&gt;&lt;a href=&quot;#DragDropContext-backend&quot; class=&quot;headerlink&quot; title=&quot;DragDropContext(backend)&quot;&gt;&lt;/a&gt;DragDropContext(backend)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;backend&lt;/code&gt; 实现 DnD 的方式，一般是 HTML5Backend&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragDropContext(HTML5Backend)(App);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-type-spec-collect&quot;&gt;&lt;a href=&quot;#DragSource-type-spec-collect&quot; class=&quot;headerlink&quot; title=&quot;DragSource(type, spec, collect)&quot;&gt;&lt;/a&gt;DragSource(type, spec, collect)&lt;/h3&gt;&lt;h3 id=&quot;DropTarget-type-spec-collect&quot;&gt;&lt;a href=&quot;#DropTarget-type-spec-collect&quot; class=&quot;headerlink&quot; title=&quot;DropTarget(type, spec, collect)&quot;&gt;&lt;/a&gt;DropTarget(type, spec, collect)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 必须。type 是自定义的，可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props。该组件只能放到相同 type 的 DropTarget 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt; 必须。一个带有特定方法的纯 Object，里面是一些响应拖拽事件的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collect&lt;/code&gt; 必须。一个函数返回一个 Object，这个 Object 会注入到组件的 props 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; 可选。除非有性能问题，否则不需要关心这个参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; type = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123; ... &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;connect, monitor&lt;/span&gt;) &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragSource(type, spec, collect)(MyComponent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DropTarget(type, spec, collect)(MyComponent2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-spec&quot;&gt;&lt;a href=&quot;#DragSource-spec&quot; class=&quot;headerlink&quot; title=&quot;DragSource#spec&quot;&gt;&lt;/a&gt;DragSource#spec&lt;/h3&gt;&lt;p&gt;让你的组件响应 dnd 相关事件，支持以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beginDrag(props, monitor, component)&lt;/code&gt; &lt;strong&gt;必须&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endDrag(props, monitor, component)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canDrag(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isDragging(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; 组件当前的 props&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 是一个 &lt;code&gt;DragSourceMonitor&lt;/code&gt; 实例，用来查询当前 drag state 的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt; 表示当前组件，可以省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    beginDrag(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	id: props.id, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	content: props.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DropTarget-spec&quot;&gt;&lt;a href=&quot;#DropTarget-spec&quot; class=&quot;headerlink&quot; title=&quot;DropTarget#spec&quot;&gt;&lt;/a&gt;DropTarget#spec&lt;/h3&gt;&lt;p&gt;让你的组件响应 dnd 相关事件，支持以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop(props, monitor, component)&lt;/code&gt; 可选，响应 drop 事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hover(props, monitor, component)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canDrop(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; 组件当前的 props&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 是一个 &lt;code&gt;DropTargetMonitor&lt;/code&gt; 实例，用来查询当前 drag state 的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt; 表示当前组件，可以省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	drop(props, monitor, component) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 获取正在拖放的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item = monitor.getItem();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 更新组件状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		component.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-collect-connect-monitor&quot;&gt;&lt;a href=&quot;#DragSource-collect-connect-monitor&quot; class=&quot;headerlink&quot; title=&quot;DragSource#collect(connect, monitor)&quot;&gt;&lt;/a&gt;DragSource#collect(connect, monitor)&lt;/h3&gt;&lt;h3 id=&quot;DropTarget-collect-connect-monitor&quot;&gt;&lt;a href=&quot;#DropTarget-collect-connect-monitor&quot; class=&quot;headerlink&quot; title=&quot;DropTarget#collect(connect, monitor)&quot;&gt;&lt;/a&gt;DropTarget#collect(connect, monitor)&lt;/h3&gt;&lt;p&gt;返回一个 object，这个 object 可以会注入到组件的 props 中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connect&lt;/code&gt; 一个 &lt;code&gt;DragSourceConnector&lt;/code&gt;/&lt;code&gt;DropTargetConnector&lt;/code&gt; 实例，可以用 &lt;code&gt;connect.dragSource()&lt;/code&gt;/&lt;code&gt;connect.dropTarget()&lt;/code&gt; 来封装我们的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 一个 &lt;code&gt;DragSourceMonitor&lt;/code&gt;/&lt;code&gt;DropTargetMonitor&lt;/code&gt; 实例，用来查询当前拖拽的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;connect, monitor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isDragging: monitor.isDragging(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connectDragSource: connect.dragSource()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 可以访问 collect 中返回的  object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; isDragging, connectDragSource &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 需要用 connect.dragSource()/connect.dropTarget() 封装自己的组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connectDragSource(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;具体例子&quot;&gt;&lt;a href=&quot;#具体例子&quot; class=&quot;headerlink&quot; title=&quot;具体例子&quot;&gt;&lt;/a&gt;具体例子&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gaearon/react-dnd/tree/master/examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://gaearon.github.io/react-dnd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trel
    
    </summary>
    
    
      <category term="react" scheme="http://scarletsky.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>写在二十四岁生日</title>
    <link href="http://scarletsky.github.io/2015/10/25/birthday-summary/"/>
    <id>http://scarletsky.github.io/2015/10/25/birthday-summary/</id>
    <published>2015-10-25T09:38:50.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;p&gt;又一年过去了，今年是第四年。&lt;br&gt;今年的生日是和女朋友一起，平平淡淡地过的。&lt;br&gt;回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。&lt;/p&gt;
&lt;p&gt;相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着去挤时间——把上下班坐地铁/公交的时间利用起来。于是乎，这一年下来看的书大概有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《三体系列》&lt;/li&gt;
&lt;li&gt;《啊哈，算法》&lt;/li&gt;
&lt;li&gt;《黑客与画家》&lt;/li&gt;
&lt;li&gt;《Rework-重来：更为简单有效的商业思维》&lt;/li&gt;
&lt;li&gt;《失控》&lt;/li&gt;
&lt;li&gt;《教训》&lt;/li&gt;
&lt;li&gt;《跨界》&lt;/li&gt;
&lt;li&gt;《把时间当朋友》&lt;/li&gt;
&lt;li&gt;《JavaScript 函数式编程》&lt;/li&gt;
&lt;li&gt;《The Little Schemer》&lt;/li&gt;
&lt;li&gt;《实用 Common Lisp 编程》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有其他还没看完的技术书/文章。&lt;br&gt;这样看下来今年看得书不多不少，时间利用率还算可以吧。&lt;/p&gt;
&lt;p&gt;从上面的书单可以看到，其实我今年开始去学习函数式语言了。我想去了解下面向对象之外的世界是怎样的。至于到底会不会用上这些技术，以后才知道，现在只管学就好了。&lt;/p&gt;
&lt;p&gt;工作上面，今年年中的时候以前的老大找过我，问我要不要跟他一起干，说他能给我我现在拥有的一切给我，还把项目的一切控制权交给我，其实他们的项目前景还是挺好的，但跟我的技术栈不符合，加上我对他们所在行业不太感兴趣，所以只好推掉了~看以后还有没有机会合作~&lt;/p&gt;
&lt;p&gt;另外，我今年还试着做了一个开源的网站，&lt;a href=&quot;http://aniquo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://aniquo.com&lt;/a&gt; 大家有兴趣的可以去围观一下。没什么特别有趣的东西，只有我自己收录的一些经典的语录而已。本来是想把它做成一个语录搜索系统的，但精力有限，现阶段大概算是一个可用的版本。至于用户量，从头到尾都只有我一个，233. 继续做这个的原因，只剩下情怀了。如果有人有兴趣的话，联系我吧~至于源码，到 github 搜下就找到了，写的很烂的东西。&lt;/p&gt;
&lt;p&gt;今年的总结大概就这些了~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又一年过去了，今年是第四年。&lt;br&gt;今年的生日是和女朋友一起，平平淡淡地过的。&lt;br&gt;回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。&lt;/p&gt;
&lt;p&gt;相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着
    
    </summary>
    
      <category term="life" scheme="http://scarletsky.github.io/categories/life/"/>
    
    
      <category term="life" scheme="http://scarletsky.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 中 Stream API 的使用</title>
    <link href="http://scarletsky.github.io/2015/10/22/node-stream-api-learning/"/>
    <id>http://scarletsky.github.io/2015/10/22/node-stream-api-learning/</id>
    <published>2015-10-22T09:09:06.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;在 Node.js 中，读取文件的方式有两种，一种是用 &lt;code&gt;fs.readFile&lt;/code&gt;，另外一种是利用 &lt;code&gt;fs.createReadStream&lt;/code&gt; 来读取。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fs.readFile&lt;/code&gt; 对于每个 Node.js 使用者来说最熟悉不过了，简单易懂，很好上手。但它的缺点是会先将数据全部读入内存，一旦遇到大文件的时候，这种方式读取的效率就非常低下了。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;fs.createReadStream&lt;/code&gt; 则是通过 Stream 来读取数据，它会把文件（数据）分割成小块，然后触发一些特定的事件，我们可以监听这些事件，编写特定的处理函数。这种方式相对上面来说，并不好上手，但它效率非常高。&lt;/p&gt;
&lt;p&gt;事实上， Stream 在 Node.js 中并非仅仅用在文件处理上，其他地方也可以看到它的身影，如 &lt;code&gt;process.stdin/stdout&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;tcp sockets&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, &lt;code&gt;crypto&lt;/code&gt; 等都有用到。&lt;/p&gt;
&lt;p&gt;本文是我学习 Node.js 中的 Stream API 中的一点总结，希望对大家有用。&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于事件通讯&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;pipe&lt;/code&gt; 来连接流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;种类&quot;&gt;&lt;a href=&quot;#种类&quot; class=&quot;headerlink&quot; title=&quot;种类&quot;&gt;&lt;/a&gt;种类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Readable Stream  可读数据流&lt;/li&gt;
&lt;li&gt;Writeable Stream  可写数据流&lt;/li&gt;
&lt;li&gt;Duplex Stream  双向数据流，可以同时读和写&lt;/li&gt;
&lt;li&gt;Transform Stream 转换数据流，可读可写，同时可以转换（处理）数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;h3 id=&quot;可读数据流的事件&quot;&gt;&lt;a href=&quot;#可读数据流的事件&quot; class=&quot;headerlink&quot; title=&quot;可读数据流的事件&quot;&gt;&lt;/a&gt;可读数据流的事件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readable&lt;/code&gt; 数据向外流时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 对于那些没有显式暂停的数据流，添加data事件监听函数，会将数据流切换到流动态，尽快向外提供数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; 读取完数据时触发。注意不能和 &lt;code&gt;writeableStream.end()&lt;/code&gt; 混淆，writeableStream 并没有 end 事件，只有 &lt;code&gt;.end()&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close&lt;/code&gt; 数据源关闭时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 读取数据发生错误时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可写数据流的事件&quot;&gt;&lt;a href=&quot;#可写数据流的事件&quot; class=&quot;headerlink&quot; title=&quot;可写数据流的事件&quot;&gt;&lt;/a&gt;可写数据流的事件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drain&lt;/code&gt; &lt;code&gt;writable.write(chunk)&lt;/code&gt; 返回 false 之后，缓存全部写入完成，可以重新写入时就会触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finish&lt;/code&gt; 调用 &lt;code&gt;.end&lt;/code&gt; 方法时，所有缓存的数据释放后触发，类似于可读数据流中的 &lt;strong&gt;end&lt;/strong&gt; 事件，表示写入过程结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipe&lt;/code&gt; 作为 pipe 目标时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpipe&lt;/code&gt; 作为 unpipe 目标时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 写入数据发生错误时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;p&gt;可读数据流有两种状态：&lt;strong&gt;流动态&lt;/strong&gt; 和 &lt;strong&gt;暂停态&lt;/strong&gt;，改变数据流状态的方法如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;暂停态 -&amp;gt; 流动态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加 data 事件的监听函数&lt;/li&gt;
&lt;li&gt;调用 resume 方法&lt;/li&gt;
&lt;li&gt;调用 pipe 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果转为流动态时，没有 data 事件的监听函数，也没有 pipe 方法的目的地，那么数据将遗失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流动态 -&amp;gt; 暂停态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不存在 pipe 方法的目的地时，调用 pause 方法&lt;/li&gt;
&lt;li&gt;存在 pipe 方法的目的地时，移除所有 data 事件的监听函数，并且调用 unpipe 方法，移除所有 pipe 方法的目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 只移除 data 事件的监听函数，并不会自动引发数据流进入「暂停态」。另外，存在 pipe 方法的目的地时，调用 pause 方法，并不能保证数据流总是处于暂停态，一旦那些目的地发出数据请求，数据流有可能会继续提供数据。&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;h3 id=&quot;读写文件&quot;&gt;&lt;a href=&quot;#读写文件&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新建可读数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rs = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./test1.txt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新建可写数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ws = fs.createWriteStream(&lt;span class=&quot;string&quot;&gt;&#39;./test2.txt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听可读数据流结束事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;read text1.txt successfully!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听可写数据流结束事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ws.on(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;write text2.txt successfully!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 把可读数据流转换成流动态，流进可写数据流中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.pipe(ws);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;读取-CSV-文件，并上传数据（我在生产环境中写过）&quot;&gt;&lt;a href=&quot;#读取-CSV-文件，并上传数据（我在生产环境中写过）&quot; class=&quot;headerlink&quot; title=&quot;读取 CSV 文件，并上传数据（我在生产环境中写过）&quot;&gt;&lt;/a&gt;读取 CSV 文件，并上传数据（我在生产环境中写过）&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; es = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;event-stream&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; csv = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;csv&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parser = csv.parse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transformer = csv.transform(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;record&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; record.join(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./demo.csv&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(parser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(transformer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理前一个 stream 传递过来的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(es.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        upload(data, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callback(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 相当于监听前一个 stream 的 end 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(es.wait(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        process.stdout.write(&lt;span class=&quot;string&quot;&gt;&#39;done!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;更多用法&quot;&gt;&lt;a href=&quot;#更多用法&quot; class=&quot;headerlink&quot; title=&quot;更多用法&quot;&gt;&lt;/a&gt;更多用法&lt;/h3&gt;&lt;p&gt;可以参考一下 &lt;a href=&quot;https://github.com/jeresig/node-stream-playground&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jeresig/node-stream-playground&lt;/a&gt; ，进去示例网站之后直接点 add stream 就能看到结果了。&lt;/p&gt;
&lt;h2 id=&quot;常见坑&quot;&gt;&lt;a href=&quot;#常见坑&quot; class=&quot;headerlink&quot; title=&quot;常见坑&quot;&gt;&lt;/a&gt;常见坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;rs.pipe(ws)&lt;/code&gt; 的方式来写文件并不是把 rs 的内容 append 到 ws 后面，而是直接用 rs 的内容覆盖 ws 原有的内容&lt;/li&gt;
&lt;li&gt;已结束/关闭的流不能重复使用，必须重新创建数据流&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pipe 方法返回的是目标数据流，如 &lt;code&gt;a.pipe(b)&lt;/code&gt; 返回的是 b，因此监听事件的时候请注意你监听的对象是否正确&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果你要监听多个数据流，同时你又使用了 pipe 方法来串联数据流的话，你就要写成：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;data end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;a end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;b end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用类库&quot;&gt;&lt;a href=&quot;#常用类库&quot; class=&quot;headerlink&quot; title=&quot;常用类库&quot;&gt;&lt;/a&gt;常用类库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dominictarr/event-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;event-stream&lt;/a&gt; 用起来有函数式编程的感觉，个人比较喜欢&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome-nodejs#streams&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-nodejs#streams&lt;/a&gt; 由于其他 stream 库我都没用过，所以有需求的就直接看这里吧&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰 - stream接口&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://nodejs.org/api/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs.org Stream&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://codewinds.com/blog/2013-08-20-nodejs-transform-streams.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transforming data with Node.js transform streams&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18335499/nodejs-whats-the-difference-between-a-duplex-stream-and-a-transform-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJS: What’s the difference between a Duplex stream and a Transform stream?&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;在 Node.js 中，读取文件的方式有两种，一种是用 &lt;code&gt;fs.readFile&lt;/code&gt;，另外一种是利用 &lt;
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 学习笔记</title>
    <link href="http://scarletsky.github.io/2015/08/19/commonjs-learning/"/>
    <id>http://scarletsky.github.io/2015/08/19/commonjs-learning/</id>
    <published>2015-08-19T02:11:10.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。&lt;/p&gt;
&lt;p&gt;根据 CommonJS 规范，一个 JavaScript 文件就是一个模块，其他模块可以通过 &lt;code&gt;require&lt;/code&gt; 来获取 &lt;code&gt;module.exports&lt;/code&gt; 中暴露的内容，而其他部分都是私有的，其他模块不能访问。&lt;/p&gt;
&lt;h1 id=&quot;module-对象&quot;&gt;&lt;a href=&quot;#module-对象&quot; class=&quot;headerlink&quot; title=&quot;module 对象&quot;&gt;&lt;/a&gt;module 对象&lt;/h1&gt;&lt;p&gt;每个模块都有一个module变量，该变量指向当前模块。module不是全局变量，而是每个模块都有的本地变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.id&lt;/code&gt; 模块的识别符，通常是带有绝对路径的模块文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.filename&lt;/code&gt; 模块的文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.loaded&lt;/code&gt; 返回一个布尔值，表示模块是否已经完成加载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.parent&lt;/code&gt; 返回一个对象，表示调用该模块的模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.children&lt;/code&gt; 返回一个数组，表示该模块要用到的其他模块。数组中的内容是其他要用到的模块的 &lt;code&gt;module&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.paths&lt;/code&gt; 返回一个数组，表示模块查找路径，排在越前面的优先级越高。具体请查看 &lt;a href=&quot;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.exports&lt;/code&gt; 表示其他模块可以通过 &lt;code&gt;require&lt;/code&gt; 获取的内容。默认情况下是一个空对象，即 &lt;code&gt;{}&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;module-exports-和-exports&quot;&gt;&lt;a href=&quot;#module-exports-和-exports&quot; class=&quot;headerlink&quot; title=&quot;module.exports 和 exports&quot;&gt;&lt;/a&gt;module.exports 和 exports&lt;/h1&gt;&lt;p&gt;默认情况下，&lt;code&gt;module.exports&lt;/code&gt; 和 &lt;code&gt;exports&lt;/code&gt; 两者是等价的，即 &lt;code&gt;module.exports === exports&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exports&lt;/code&gt; 只是为了方便我们编码而添加的，相当于在每个文件中自动添加了 &lt;code&gt;var exports = module.exports&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以根据个人喜好，把需要暴露的东西挂在 &lt;code&gt;exports&lt;/code&gt; 或 &lt;code&gt;module.exports&lt;/code&gt; 下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，必须注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不能把 &lt;code&gt;exports&lt;/code&gt; 重新赋值，因为这样会令 &lt;code&gt;exports&lt;/code&gt; 不再指向 &lt;code&gt;module.exports&lt;/code&gt;，这样 &lt;code&gt;exports&lt;/code&gt; 就没用了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可以通过 &lt;code&gt;module.exports = function() {...}&lt;/code&gt; 这种方式指定 &lt;code&gt;module.exports&lt;/code&gt; 的指向，这样在其他模块中 &lt;code&gt;require&lt;/code&gt; 这个模块，获得的就是一个 &lt;code&gt;function&lt;/code&gt;，而不是一个对象。这样做也会导致 &lt;code&gt;exports&lt;/code&gt; 失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于上面的原因，我们会在很多地方看到 &lt;code&gt;module.exports = exports = xxx&lt;/code&gt; 这样的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/commonjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascript.ruanyifeng.com/nodejs/commonjs.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。&lt;/p&gt;
&lt;p&gt;根据 CommonJS 规范，一个 
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中 Object.defineProperty 的使用</title>
    <link href="http://scarletsky.github.io/2015/08/18/Object-learning-in-javascript/"/>
    <id>http://scarletsky.github.io/2015/08/18/Object-learning-in-javascript/</id>
    <published>2015-08-18T09:57:31.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperty&quot;&gt;&lt;/a&gt;Object.defineProperty&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接在一个对象上定义一个新的属性，或修改一个已经存在的属性。这个方法会返回该对象。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Object.defineProperty(obj, prop, descriptor)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object obj&lt;/code&gt; 目标对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;String prop&lt;/code&gt; 需要定义的属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object descriptor&lt;/code&gt; 该属性拥有的特性，可设置的值有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;value&lt;/code&gt; 属性的值，默认为 &lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;writable&lt;/code&gt; 该属性是否可写，如果设置成 &lt;code&gt;false&lt;/code&gt;，则任何对该属性改写的操作都无效（但不会报错），默认为 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;get&lt;/code&gt; 一旦目标对象访问该属性，就会调用这个方法，并返回结果。默认为 &lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;set&lt;/code&gt; 一旦目标对象设置该属性，就会调用这个方法。默认为 &lt;code&gt;undeinfed&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;configurable&lt;/code&gt; 如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化，默认为 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;enumerable&lt;/code&gt; 是否能在for…in循环中遍历出来或在Object.keys中列举出来。默认为 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在 &lt;code&gt;descriptor&lt;/code&gt; 中不能&lt;strong&gt;同时&lt;/strong&gt;设置访问器 (&lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;set&lt;/code&gt;) 和 &lt;code&gt;wriable&lt;/code&gt; 或 &lt;code&gt;value&lt;/code&gt;，否则会报以下错误：&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Invalid &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;  &lt;/span&gt;A &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt; &lt;/span&gt;cannot both have accessors &lt;span class=&quot;operator&quot;&gt;and&lt;/span&gt; be writable &lt;span class=&quot;operator&quot;&gt;or&lt;/span&gt; have a value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;实际应用&quot;&gt;&lt;a href=&quot;#实际应用&quot; class=&quot;headerlink&quot; title=&quot;实际应用&quot;&gt;&lt;/a&gt;实际应用&lt;/h3&gt;&lt;p&gt;我们知道，在 &lt;code&gt;Express.js&lt;/code&gt; 升级到 4.0 之后，它把很多功能从核心库中移除了。当我们访问那些被移除的属性时，它会报错，告诉我们该属性已经被移除了。这个功能就是通过 &lt;code&gt;Object.defineProperty&lt;/code&gt; 来实现的。看看源码吧：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;urlencoded&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;bodyParser&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;compress&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;cookieSession&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;session&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;logger&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;cookieParser&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;favicon&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;responseTime&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;errorHandler&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;timeout&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;methodOverride&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;vhost&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;csrf&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;directory&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;limit&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;multipart&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;staticCache&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;].forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(exports, name, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Most middleware (like &#39;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&#39;) is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurable: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Object-defineProperties&quot;&gt;&lt;a href=&quot;#Object-defineProperties&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperties&quot;&gt;&lt;/a&gt;Object.defineProperties&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 &lt;code&gt;Object.defineProperty&lt;/code&gt; 类似，只不过这个方法可以设置多个属性。&lt;/p&gt;
&lt;h3 id=&quot;语法-1&quot;&gt;&lt;a href=&quot;#语法-1&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Object.defineProperties(obj, props)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;参数-1&quot;&gt;&lt;a href=&quot;#参数-1&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object obj&lt;/code&gt; 目标对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object props&lt;/code&gt; 要为目标对象添加的属性，其中 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt; 分别代表 &lt;code&gt;Object.defineProperty&lt;/code&gt; 中的第二和第三个参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2010/09/19/1831128.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/rubylouvre/archive/2010/09/19/1831128.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/strongloop/express/blob/master/lib/express.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/strongloop/express/blob/master/lib/express.js&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperty&quot;&gt;&lt;/a&gt;Object.defineProperty&lt;/
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用 Gulp 处理前端工作流程</title>
    <link href="http://scarletsky.github.io/2015/08/14/use-gulp-for-front-end-workflow/"/>
    <id>http://scarletsky.github.io/2015/08/14/use-gulp-for-front-end-workflow/</id>
    <published>2015-08-14T08:57:33.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// gulpfile.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task&lt;span class=&quot;comment&quot;&gt;(&#39;foo&#39;, function()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp.src&lt;span class=&quot;comment&quot;&gt;(glob)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe&lt;span class=&quot;comment&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe&lt;span class=&quot;comment&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe&lt;span class=&quot;comment&quot;&gt;(gulp.dest(...)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe&lt;span class=&quot;comment&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe&lt;span class=&quot;comment&quot;&gt;(gulp.dest(...)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// shell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gulp foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;基本-API&quot;&gt;&lt;a href=&quot;#基本-API&quot; class=&quot;headerlink&quot; title=&quot;基本 API&quot;&gt;&lt;/a&gt;基本 API&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gulp.src(glob[, options])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 &lt;code&gt;glob&lt;/code&gt; 匹配文件，返回 &lt;code&gt;stream&lt;/code&gt;，可以通过 &lt;code&gt;.pipe()&lt;/code&gt; 方法传递给后续的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gulp.dest(path[, options])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般用法 &lt;code&gt;.pipe(gulp.dest(path))&lt;/code&gt;，把 &lt;code&gt;pipe&lt;/code&gt; 中的内容按照指定的 &lt;code&gt;path&lt;/code&gt; 写成文件，会自动创建不存在的文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意，可以通过 &lt;code&gt;.pipe&lt;/code&gt; 多次指定输出的地方，具体请看 &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gulp.task(name[, deps], fn)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义名为 &lt;code&gt;name&lt;/code&gt; 的任务，定义之后就可以在命令行中使用 &lt;code&gt;gulp xxx&lt;/code&gt; 来执行任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deps&lt;/code&gt; 里面的任务全部完成后才会执行 &lt;code&gt;fn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deps&lt;/code&gt; 里面的任务都是并行执行的，如果需要顺序执行，需要特殊写法。具体看 &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/API.md#return-a-promise&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;gulp.watch(glob[, opts, cb])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;监听文件变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据&lt;a href=&quot;http://stackoverflow.com/questions/22391527/gulps-gulp-watch-not-triggered-for-new-or-deleted-files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个帖子&lt;/a&gt;，&lt;code&gt;gulp.watch&lt;/code&gt; 不会监听新文件（目录），所以一般你会需要 &lt;a href=&quot;https://github.com/floatdrop/gulp-watch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-watch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;常用命令-（自定义）&quot;&gt;&lt;a href=&quot;#常用命令-（自定义）&quot; class=&quot;headerlink&quot; title=&quot;常用命令 （自定义）&quot;&gt;&lt;/a&gt;常用命令 （自定义）&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# for development mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# run test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# for production mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;gulp-server-流程&quot;&gt;&lt;a href=&quot;#gulp-server-流程&quot; class=&quot;headerlink&quot; title=&quot;gulp server 流程&quot;&gt;&lt;/a&gt;&lt;code&gt;gulp server&lt;/code&gt; 流程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把 &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;sass&lt;/code&gt;, 之类的文件编译成 CSS，常用插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/plus3network/gulp-less&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-less&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dlmanning/gulp-sass&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-sass&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 Web Server (with Live Reload)，常用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/AveVlad/gulp-connect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-connect&lt;/a&gt;，用来创建 Web Server，其实还有其他选择的，但多数都是利用 &lt;a href=&quot;https://github.com/senchalabs/connect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;connect&lt;/a&gt; 来创建 Web Server 的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/andrewrk/node-proxy-middleware&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-proxy-middle&lt;/a&gt;，用来代理请求，可以把 &lt;code&gt;/api/xxx&lt;/code&gt; 发送到指定的地址。(常用于 SPA 开发)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tinganho/connect-modrewrite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;connect-modrewrite&lt;/a&gt;，匹配资源，如果不匹配就可以重定向到指定地址。(常用于 SPA 开发)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;connect-history-api-fallback&lt;/a&gt;，作用同上，也用于匹配资源，但用起来简单很多。(常用于 SPA 开发)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听文件变化，常用插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/floatdrop/gulp-watch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean:css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    del.sync(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/*.css&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean:css&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stream = gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .src(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/main.less&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(less())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;connect&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connect.server(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root: &lt;span class=&quot;string&quot;&gt;&#39;./app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        port: &lt;span class=&quot;number&quot;&gt;9000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        livereload: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middleware: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;connect, o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proxy = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;proxy-middleware&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = url.parse(&lt;span class=&quot;string&quot;&gt;&#39;http://localhost:3000/api&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    options.route = &lt;span class=&quot;string&quot;&gt;&#39;/api&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; proxy(options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                modRewrite([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&#39;!\\.html|\\.js|\\.css|\\.swf|\\.jp(e?)g|\\.png|\\.gif|\\.eot|\\.woff|\\.ttf|\\.svg$ /index.html&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;watch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .src(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/**/*.less&#39;&lt;/span&gt;, &amp;#123;read: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(watch(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/**/*.less&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .src(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/main.less&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .pipe(less())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .pipe(connect.reload());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .src([&lt;span class=&quot;string&quot;&gt;&#39;app/scripts/**/*.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;app/**/*.html&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(watch([&lt;span class=&quot;string&quot;&gt;&#39;app/scripts/**/*.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;app/**/*.html&#39;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(plumber())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(connect.reload());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;server&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;connect&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;watch&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;gulp-build-流程&quot;&gt;&lt;a href=&quot;#gulp-build-流程&quot; class=&quot;headerlink&quot; title=&quot;gulp build 流程&quot;&gt;&lt;/a&gt;&lt;code&gt;gulp build&lt;/code&gt; 流程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;清理 &lt;code&gt;dist/&lt;/code&gt; 文件夹&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/del&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;del&lt;/a&gt;，根据 &lt;code&gt;glob&lt;/code&gt; 来删除文件/目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jonschlinkert/gulp-htmlmin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-htmlmin&lt;/a&gt;，压缩 &lt;code&gt;html&lt;/code&gt; 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/murphydanger/gulp-minify-html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-minify-html&lt;/a&gt;，同上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/chilijung/gulp-cssmin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-cssmin&lt;/a&gt;，压缩 &lt;code&gt;css&lt;/code&gt; 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/murphydanger/gulp-minify-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-minify-css&lt;/a&gt;，同上，封装了 &lt;a href=&quot;https://github.com/jakubpawlowicz/clean-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clean-css&lt;/a&gt;，star 比上面的多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/terinjokes/gulp-uglify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-uglify&lt;/a&gt;，混淆 &lt;code&gt;JavaScript&lt;/code&gt; 代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zont/gulp-usemin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-usemin&lt;/a&gt;，合并指定 &lt;code&gt;block&lt;/code&gt; 中的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/gulp-rev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp-rev&lt;/a&gt;，给静态文件加上版本号，如 &lt;code&gt;app.js&lt;/code&gt; -&amp;gt; &lt;code&gt;app-d41d8cd98f.js&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复制其他文件到 &lt;code&gt;dist/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulp.src(...).pipe(gulp.dest(...))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实例代码&quot;&gt;&lt;a href=&quot;#实例代码&quot; class=&quot;headerlink&quot; title=&quot;实例代码&quot;&gt;&lt;/a&gt;实例代码&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;clean:build&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    del.sync(&lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;, &amp;#123;force: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean:build&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;less&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .src(&lt;span class=&quot;string&quot;&gt;&#39;app/views/**/*.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(htmlmin(&amp;#123;collapseWhitespace: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/views&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .src(&lt;span class=&quot;string&quot;&gt;&#39;app/index.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(usemin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            js: [uglify(), rev()],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            css: [minifyCss(), &lt;span class=&quot;string&quot;&gt;&#39;concat&#39;&lt;/span&gt;, rev()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;copyfonts&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .src(&lt;span class=&quot;string&quot;&gt;&#39;app/styles/fonts/*&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;dist/fonts/&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;clean:build&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;minify&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;copyfonts&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/API.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.gulpjs.com.cn/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="gulp" scheme="http://scarletsky.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Mongo Shell 使用过程中遇到的坑</title>
    <link href="http://scarletsky.github.io/2015/08/11/mongo-shell-trap/"/>
    <id>http://scarletsky.github.io/2015/08/11/mongo-shell-trap/</id>
    <published>2015-08-11T04:17:47.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;编写-js-脚本&quot;&gt;&lt;a href=&quot;#编写-js-脚本&quot; class=&quot;headerlink&quot; title=&quot;编写 js 脚本&quot;&gt;&lt;/a&gt;编写 js 脚本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;js 脚本中不能包含 &lt;code&gt;use&lt;/code&gt; 关键字，需要用 &lt;code&gt;$ mongo mydb xxx.js&lt;/code&gt; 这样的方式来指定数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能用 &lt;code&gt;console.log&lt;/code&gt;，需要用 &lt;code&gt;print&lt;/code&gt; 代替&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用 &lt;code&gt;ObjectId()&lt;/code&gt; 时需要确保传进去的值为字符串，否则会出现 &lt;code&gt;Error: invalid object id: length&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;$set&lt;/code&gt; 来设置数字时需要注意，mongo shell 默认会把所有数字类型的值转换成浮点型，如果你需要插入整形，你需要用 &lt;code&gt;NumberInt()&lt;/code&gt; 或 &lt;code&gt;NumberLong()&lt;/code&gt; 来代替。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mongo mydb test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// test.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; users = db.users.find(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;users.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;u&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// not console.log(u._id) !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// use print instead of console!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(u._id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.users.update(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _id: ObjectId(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; + u._id) &lt;span class=&quot;comment&quot;&gt;// make sure the params is string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $set: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            money: NumberInt(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// it will be int, not float.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8218484/mongodb-inserts-float-when-trying-to-insert-integer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/8218484/mongodb-inserts-float-when-trying-to-insert-integer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.mongodb.org/manual/core/shell-types/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.mongodb.org/manual/core/shell-types/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编写-js-脚本&quot;&gt;&lt;a href=&quot;#编写-js-脚本&quot; class=&quot;headerlink&quot; title=&quot;编写 js 脚本&quot;&gt;&lt;/a&gt;编写 js 脚本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;js 脚本中不能包含 &lt;code&gt;use&lt;/code&gt; 关键字，需要用 &lt;
    
    </summary>
    
      <category term="mongodb" scheme="http://scarletsky.github.io/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://scarletsky.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="http://scarletsky.github.io/2015/08/07/interview-summary/"/>
    <id>http://scarletsky.github.io/2015/08/07/interview-summary/</id>
    <published>2015-08-07T13:32:41.000Z</published>
    <updated>2016-01-17T15:44:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;面试前的准备&quot;&gt;&lt;a href=&quot;#面试前的准备&quot; class=&quot;headerlink&quot; title=&quot;面试前的准备&quot;&gt;&lt;/a&gt;面试前的准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;了解该公司的业务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不了解的话，面试的时候 HR 们那些一系列专业的术语会让你头晕&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚你为什么不去投其他公司（如BAT）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚该公司哪些方面吸引你，常见的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;办公环境优雅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;技术先进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作自由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;福利待遇好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;业务熟悉&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚你要问的问题，常见的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;期望工资（互联网行业跳槽一般涨幅 10% ~ 20% —— By 某 HR）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;试用期长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作情况（几点上下班，一周上几天，加班怎么办）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各种制度（打卡，加班，调休，激励，补助）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否社保（五险一金）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚你目前公司产品（你参与过的项目）的状况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当初选择这种架构/技术的原因&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否出现过问题？怎么解决？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚你问什么要离开现在的公司&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自身发展（技术，业务）达到瓶颈？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;待遇不佳&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作强度大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了更好的待遇&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚你想加入什么样的公司/团队（你理想中的公司/团队是怎样的）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所处的行业&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;技术水平&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;面试中&quot;&gt;&lt;a href=&quot;#面试中&quot; class=&quot;headerlink&quot; title=&quot;面试中&quot;&gt;&lt;/a&gt;面试中&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;介绍自己&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;谈谈自己的成长经历&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谈谈自己对未来的期待&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;聊面试前准备的问题，相互问答。注意几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要紧张&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;想清楚，组织清楚语言再回答&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你觉得刚才的 HR 怎么样？（多轮面试下会问到），注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要无中生有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回答尽量圆滑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;面试后&quot;&gt;&lt;a href=&quot;#面试后&quot; class=&quot;headerlink&quot; title=&quot;面试后&quot;&gt;&lt;/a&gt;面试后&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;冷静下来，再次思考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新公司和旧公司之间的差别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跳槽的目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跳槽是否有必要&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;衡量跳槽的成本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;搬家成本（如果需要搬家的话）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交通成本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适应新环境所需时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;是否会带来其他问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做出决定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面试前的准备&quot;&gt;&lt;a href=&quot;#面试前的准备&quot; class=&quot;headerlink&quot; title=&quot;面试前的准备&quot;&gt;&lt;/a&gt;面试前的准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;了解该公司的业务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不了解的话，面试的时候 HR 们那些一系列
    
    </summary>
    
      <category term="life" scheme="http://scarletsky.github.io/categories/life/"/>
    
    
      <category term="career" scheme="http://scarletsky.github.io/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>Android Support Design Library 注意事项</title>
    <link href="http://scarletsky.github.io/2015/07/05/android-support-design-library-experience/"/>
    <id>http://scarletsky.github.io/2015/07/05/android-support-design-library-experience/</id>
    <published>2015-07-05T15:45:02.000Z</published>
    <updated>2016-01-19T06:39:13.000Z</updated>
    
    <content type="html">&lt;p&gt;#CoordinatorLayout&lt;/p&gt;
&lt;p&gt;这个新 Layout 是 FrameLayout 的加强版，用来协调各个子 view 的行为。最主要是用来实现 Toolbar 的折叠效果，也可以用来实现 FAB 自动消失的效果。&lt;/p&gt;
&lt;p&gt;常见的用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.CoordinatorLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:app=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.v4&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.NestedScrollView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xmlns:android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xmlns:app=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&lt;span class=&quot;string&quot;&gt;&quot;fill_vertical&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_marginBottom=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@android:color/white&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app:layout_behavior=&lt;span class=&quot;string&quot;&gt;&quot;@string/appbar_scrolling_view_behavior&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;FrameLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/frame_image_toolbar_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.v4&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.NestedScrollView&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.AppBarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/appbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;256dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:theme=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.CollapsingToolbarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar_wrapper&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            app:contentScrim=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            app:expandedTitleMarginEnd=&lt;span class=&quot;string&quot;&gt;&quot;64dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            app:expandedTitleMarginStart=&lt;span class=&quot;string&quot;&gt;&quot;48dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            app:layout_scrollFlags=&lt;span class=&quot;string&quot;&gt;&quot;scroll|exitUntilCollapsed&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar_image&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:scaleType=&lt;span class=&quot;string&quot;&gt;&quot;centerCrop&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                app:layout_collapseMode=&lt;span class=&quot;string&quot;&gt;&quot;parallax&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.v7&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                app:layout_collapseMode=&lt;span class=&quot;string&quot;&gt;&quot;pin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                app:theme=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                app:popupTheme=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Light&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.CollapsingToolbarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.AppBarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.design&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.CoordinatorLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;CollapsingToolbarLayout.setTitle 代替 Toolbar.setTitle&lt;/li&gt;
&lt;li&gt;NestedScrollView 中必须添加 &lt;code&gt;app:layout_behavior=&amp;quot;@string/appbar_scrolling_view_behavior&amp;quot;&lt;/code&gt; 属性之后，里面的内容才会位于 AppBarLayout 之下&lt;/li&gt;
&lt;li&gt;NestedScrollView 中 &lt;code&gt;android:layout_gravity=&amp;quot;fill_vertical&amp;quot;&lt;/code&gt; 和 &lt;code&gt;android:layout_marginBottom=&amp;quot;?attr/actionBarSize&amp;quot;&lt;/code&gt; 属性不是必须的，但如果内容不够高，则内容会位于屏幕底部，而不是 AppBarLayout 下面。&lt;code&gt;layout_gravity=&amp;quot;fill_vertical&amp;quot;&lt;/code&gt; 可以修复这个问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#参考资料&lt;br&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000002888109&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Support Design 中 CoordinatorLayout 与 Behaviors 初探&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30612310/android-nestedscrollview-has-wrong-size-after-applayout-behavior&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/30612310/android-nestedscrollview-has-wrong-size-after-applayout-behavior&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#CoordinatorLayout&lt;/p&gt;
&lt;p&gt;这个新 Layout 是 FrameLayout 的加强版，用来协调各个子 view 的行为。最主要是用来实现 Toolbar 的折叠效果，也可以用来实现 FAB 自动消失的效果。&lt;/p&gt;
&lt;p&gt;常见的用法如下：&lt;/p&gt;

    
    </summary>
    
      <category term="android" scheme="http://scarletsky.github.io/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>RecyclerView 基本用法</title>
    <link href="http://scarletsky.github.io/2015/06/29/recyclerview-basic-usage/"/>
    <id>http://scarletsky.github.io/2015/06/29/recyclerview-basic-usage/</id>
    <published>2015-06-29T12:55:00.000Z</published>
    <updated>2016-01-19T06:39:04.000Z</updated>
    
    <content type="html">&lt;p&gt;#基本用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 XML 中添加 &lt;code&gt;&amp;lt;android.support.v7.widget.RecyclerView/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写继承 &lt;code&gt;RecyclerView.Adapter&amp;lt;RecyclerViewAdapter.ViewHolder&amp;gt;&lt;/code&gt; 的 &lt;code&gt;Adapter&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编写继承 &lt;code&gt;RecyclerView.ViewHolder&lt;/code&gt; 的 &lt;code&gt;ViewHolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onCreateViewHolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onBindViewHolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getItemCount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置 &lt;code&gt;RecyclerView&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setLayoutManager&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setAdapter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setItemAnimator&lt;/code&gt;(可选)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addItemDecoration&lt;/code&gt;(可选)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#XML&lt;br&gt;新建 xml，添加 &lt;code&gt;RecyclerView&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:fab=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:orientation=&lt;span class=&quot;string&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;android&lt;span class=&quot;class&quot;&gt;.support&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.v7&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.widget&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.RecyclerView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/my_recyclerview&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#ViewHolder&lt;/p&gt;
&lt;p&gt;我们以前使用 &lt;code&gt;ListView&lt;/code&gt; 的时候，会用以下的方式来提高 &lt;code&gt;ListView&lt;/code&gt; 的性能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;convertView&lt;/code&gt; 来减少 &lt;code&gt;LayoutInflater.inflate&lt;/code&gt; 的使用&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;ViewHolder&lt;/code&gt; 来减少 &lt;code&gt;findViewById&lt;/code&gt; 的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt; 标准化了 &lt;code&gt;ViewHolder&lt;/code&gt; 来缓存昂贵 &lt;code&gt;findViewById&lt;/code&gt; 的结果。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; MyViewHolder &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; RecyclerView.ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TextView mTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TextView mSubtitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyViewHolder&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(View v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTitle = (TextView) v.findViewById(R.id.title);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSubtitle = (TextView) v.findViewById(R.id.subtitle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS: 一般 &lt;code&gt;ViewHolder&lt;/code&gt; 会编写在 &lt;code&gt;Adapter&lt;/code&gt; 的内部。&lt;/p&gt;
&lt;p&gt;#Adapter&lt;/p&gt;
&lt;p&gt;我们需要继承 &lt;code&gt;RecyclerView.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt;&lt;/code&gt; 来编写我们自己的 &lt;code&gt;Adapter&lt;/code&gt; 。编写我们自己的 &lt;code&gt;Adapter&lt;/code&gt; 的时候，最重要的是要重写 &lt;code&gt;onCreateViewHolder&lt;/code&gt; 和 &lt;code&gt;onBindViewHolder&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Adapter&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;ViewHolder&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RecyclerView.&lt;span class=&quot;function&quot;&gt;ViewHolder &lt;span class=&quot;title&quot;&gt;onCreateViewHolder&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(ViewGroup parent, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; viewType)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View v = LayoutInflater.from(ctx).inflate(R.layout.my_adapter, parent, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ViewHolder(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBindViewHolder&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(RecyclerView.ViewHolder h, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyViewHolder holder = (MyViewHolder) h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.mTitle.setText(&lt;span class=&quot;string&quot;&gt;&quot;This is my title&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.mSubtitle.setText(&lt;span class=&quot;string&quot;&gt;&quot;This is my subtitle&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data.&lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，在这个例子中我们的 &lt;code&gt;MyAdapter&lt;/code&gt; 存放的是 &lt;code&gt;&amp;lt;RecyclerView.ViewHolder&amp;gt;&lt;/code&gt;，所以在 &lt;code&gt;onCreateViewHolder&lt;/code&gt; 中返回的也必须是 &lt;code&gt;&amp;lt;RecyclerView.ViewHolder&amp;gt;&lt;/code&gt;，而在 &lt;code&gt;onBindViewHolder&lt;/code&gt; 的回调中，我们拿到的也是 &lt;code&gt;RecyclerView.ViewHolder&lt;/code&gt;，要把它强转成我们之前编写的 &lt;code&gt;MyViewHolder&lt;/code&gt; 之后才能正常使用。&lt;/p&gt;
&lt;p&gt;#RecyclerView&lt;br&gt;最后只要设置一下 &lt;code&gt;RecyclerView&lt;/code&gt; 就能使用了。&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RecyclerView mRecyclerView = (RecyclerView) findViewById(R.id.my_recyclerview)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mRecyclerView.setLayoutManager(new LinearLayoutManager(this))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mRecyclerView.setAdapter(adapter)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;#参考资料&lt;br&gt;&lt;a href=&quot;http://wobushi.ren/recyclerview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerView全攻略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/45059587&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android RecyclerView 使用完全解析 体验艺术般的控件&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#基本用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 XML 中添加 &lt;code&gt;&amp;lt;android.support.v7.widget.RecyclerView/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编写继承 &lt;code&gt;RecyclerView.Ada
    
    </summary>
    
      <category term="android" scheme="http://scarletsky.github.io/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML5 Canvas 技巧</title>
    <link href="http://scarletsky.github.io/2015/03/15/html5-canvas-tricks/"/>
    <id>http://scarletsky.github.io/2015/03/15/html5-canvas-tricks/</id>
    <published>2015-03-15T12:55:00.000Z</published>
    <updated>2016-01-19T06:38:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h1&gt;&lt;p&gt;用 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标签进行绘图时必须要设置 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 属性，这里并不是指 CSS 属性中的 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt;，而是 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标签本身的属性！&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 正确 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;500&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 错误 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width: 500px; height: 500px;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 正确 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width: 500px; height: 500px;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;canvas&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;canvas.setAttribute(&lt;span class=&quot;string&quot;&gt;&#39;width&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;canvas.setAttribute(&lt;span class=&quot;string&quot;&gt;&#39;height&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;500&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我以前一直以为 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 的 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 属性和 CSS 中的 &lt;code&gt;width&lt;/code&gt; 和 &lt;code&gt;height&lt;/code&gt; 是同一个东西，直到我看到 Stackoverflow 上面的&lt;a href=&quot;http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个帖子&lt;/a&gt;…&lt;/p&gt;
&lt;h1 id=&quot;读取图像文件，并绘制到-canvas-的中央&quot;&gt;&lt;a href=&quot;#读取图像文件，并绘制到-canvas-的中央&quot; class=&quot;headerlink&quot; title=&quot;读取图像文件，并绘制到 canvas 的中央&quot;&gt;&lt;/a&gt;读取图像文件，并绘制到 canvas 的中央&lt;/h1&gt;&lt;p&gt;下面演示一下如何让用户选择一张图片，然后把图片绘制到 canvas 中央。&lt;/p&gt;
&lt;p&gt;HTML&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;500&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;border: 1px solid black;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;input&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;display: none;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Javascript&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为了方便起见，还是用 jQuery 吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $canvas = $(&lt;span class=&quot;string&quot;&gt;&#39;#canvas&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $input = $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = $canvas[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = $input[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ctx = canvas.getContext(&lt;span class=&quot;string&quot;&gt;&#39;2d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过点击 canvas 触发 input 的 click 事件，用来选择文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$canvas.on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    input.click();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 选择文件后，会触发 change 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$input.on(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过 FileReader 来读取文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileReader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = e.target.files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 绑定读取文件后的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reader.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Image();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dataURL = e.target.result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 通过计算可以得到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hRatio = canvas.width  / img.width    ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vRatio =  canvas.height / img.height  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ratio  = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min ( hRatio, vRatio );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; centerShiftX = ( canvas.width - img.width*ratio ) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; centerShiftY = ( canvas.height - img.height*ratio ) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.clearRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, canvas.width, canvas.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.drawImage(img,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, img.width, img.height, &lt;span class=&quot;comment&quot;&gt;// 原始图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                centerShiftX, centerShiftY, img.width*ratio, img.height*ratio); &lt;span class=&quot;comment&quot;&gt;// 目标图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      img.src = dataURL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果用户在选择文件时点了取消，file 就会为 undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 读取文件，并返回 DataURL，可以通过 e.target.result 来得到这个 DataURL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reader.readAsDataURL(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/2588181/canvas-is-stretched-when-using-css-but-normal-with-width-height-properties&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h1&gt;&lt;p&gt;用 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标签进行绘图时必须要设置 &lt;code&gt;width&lt;/code&gt; 
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="canvas html5" scheme="http://scarletsky.github.io/tags/canvas-html5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 利用 Blob 进行分片上传</title>
    <link href="http://scarletsky.github.io/2015/01/27/javascript-upload-slice-file-using-blob/"/>
    <id>http://scarletsky.github.io/2015/01/27/javascript-upload-slice-file-using-blob/</id>
    <published>2015-01-27T09:28:00.000Z</published>
    <updated>2016-01-19T06:38:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;基本流程&quot;&gt;&lt;a href=&quot;#基本流程&quot; class=&quot;headerlink&quot; title=&quot;基本流程&quot;&gt;&lt;/a&gt;基本流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用户选择文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断文件大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果文件小于限定文件大小，则直接上传&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则进行分片上传&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;分片流程&quot;&gt;&lt;a href=&quot;#分片流程&quot; class=&quot;headerlink&quot; title=&quot;分片流程&quot;&gt;&lt;/a&gt;分片流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定限定大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用 &lt;code&gt;Blob&lt;/code&gt; 对象的 &lt;code&gt;slice&lt;/code&gt; 方法把文件分成 N 份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历 N 次，利用 &lt;code&gt;FormData&lt;/code&gt; 创建需要提交的数据，上传数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;服务端处理流程&quot;&gt;&lt;a href=&quot;#服务端处理流程&quot; class=&quot;headerlink&quot; title=&quot;服务端处理流程&quot;&gt;&lt;/a&gt;服务端处理流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;接收数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断数据总份数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果总份数为 1，则直接保存成文件，文件名不需要改变。保存完成后，直接返回信息给客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则保存成文件时，文件名后缀名需要带上 .partX 来表示该文件为第几部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断已上传的数据是否等于总份数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果相等，则合并文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并完成后，删除带有 .partX 的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;代码实例&quot;&gt;&lt;a href=&quot;#代码实例&quot; class=&quot;headerlink&quot; title=&quot;代码实例&quot;&gt;&lt;/a&gt;代码实例&lt;/h1&gt;&lt;h2 id=&quot;客户端代码-html&quot;&gt;&lt;a href=&quot;#客户端代码-html&quot; class=&quot;headerlink&quot; title=&quot;客户端代码 - html&quot;&gt;&lt;/a&gt;客户端代码 - html&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;upload&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;客户端代码-JavaScript&quot;&gt;&lt;a href=&quot;#客户端代码-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;客户端代码 - JavaScript&quot;&gt;&lt;/a&gt;客户端代码 - JavaScript&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;uploadFile&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;url, blob, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; perFileSize = &lt;span class=&quot;number&quot;&gt;2097152&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 2 * 1024 * 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; blobParts = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil(blob.size / perFileSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; blobParts; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fd = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _blob = blob.slice(i * perFileSize, (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * perFileSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fd.append(&lt;span class=&quot;string&quot;&gt;&#39;_blob&#39;&lt;/span&gt;, _blob);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fd.append(&lt;span class=&quot;string&quot;&gt;&#39;filename&#39;&lt;/span&gt;, blob.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fd.append(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;, i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fd.append(&lt;span class=&quot;string&quot;&gt;&#39;total&#39;&lt;/span&gt;, blobParts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                type: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                url: url,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data: fd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                processData: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                contentType: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;upload status: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;this is &#39;&lt;/span&gt; + (i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&#39;part, total &#39;&lt;/span&gt; + blobParts + &lt;span class=&quot;string&quot;&gt;&#39; part(s).&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res.statusCode === &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).fail(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                callback(err, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#upload&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = e.target.files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uploadFile(&lt;span class=&quot;string&quot;&gt;&#39;/upload&#39;&lt;/span&gt;, file, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;upload successfully!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;服务端代码-NodeJS&quot;&gt;&lt;a href=&quot;#服务端代码-NodeJS&quot; class=&quot;headerlink&quot; title=&quot;服务端代码 - NodeJS&quot;&gt;&lt;/a&gt;服务端代码 - NodeJS&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Expressjs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; multipart = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;connect-multiparty&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; multipartMiddleware = multipart();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uploadDir = &lt;span class=&quot;string&quot;&gt;&#39;./upload/&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 合并文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mergeFiles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fileName, fileParts&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buffers = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取各个部分的路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filePartsPaths = fileParts.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; path.join(uploadDir, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取各个 part 的 buffer，并保存到 buffers 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filePartsPaths.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;path&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buffer = fs.readFileSync(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buffers.push(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 合并文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; concatBuffer = Buffer.concat(buffers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; concatFilePath = path.join(uploadDir, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs.writeFileSync(concatFilePath, concatBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除各个 part 的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    filePartsPaths.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;path&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fs.unlinkSync(path);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;upload&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.method === &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = req.body;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _blobPath = req.files._blob.path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileName = data.filename;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filePath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(data.total);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 处理文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (total === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filePath = path.join(uploadDir, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileNameWithPart = fileName + &lt;span class=&quot;string&quot;&gt;&#39;.part&#39;&lt;/span&gt; + data.index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filePath = path.join(uploadDir, fileNameWithPart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 读取上传的数据，保存到指定路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmpBuffer = fs.readFileSync(_blobPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fs.writeFileSync(filePath, tmpBuffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 判断是否上传完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (total === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.send(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 获取指定目录下的所有文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filesInDir = fs.readdirSync(uploadDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 找出指定文件名中带有 .part 的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileParts = filesInDir.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, fileName.length + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) === (fileName + &lt;span class=&quot;string&quot;&gt;&#39;.part&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 判断是否需要合并文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fileParts.length === total) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mergeFiles(fileName, fileParts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.send(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.send(&lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.send(&lt;span class=&quot;number&quot;&gt;405&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/upload&#39;&lt;/span&gt;, multipartMiddleware, upload);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本流程&quot;&gt;&lt;a href=&quot;#基本流程&quot; class=&quot;headerlink&quot; title=&quot;基本流程&quot;&gt;&lt;/a&gt;基本流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用户选择文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断文件大小&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果文件小于
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scarletsky</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scarletsky.github.io/"/>
  <updated>2016-06-19T03:11:45.000Z</updated>
  <id>http://scarletsky.github.io/</id>
  
  <author>
    <name>Scarletsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>升级 GitLab 过程中踩过的坑</title>
    <link href="http://scarletsky.github.io/2016/06/18/issues-when-upgrading-gitlab/"/>
    <id>http://scarletsky.github.io/2016/06/18/issues-when-upgrading-gitlab/</id>
    <published>2016-06-18T11:58:57.000Z</published>
    <updated>2016-06-19T03:11:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近帮公司的 Gitlab 从 7.14 升级到 8.7.6，升级的主要动机是整合 Gitlab CI，提升持续集成的效率。鉴于之前也是我把 Gitlab 从 7.x 升级到 7.14 的，我以为我已经有经验去处理了，但实际上，这次升级让我踩了不少以前没遇到过的坑…&lt;br&gt;本文主要记录升级 Gitlab 过程中踩过的一些坑~&lt;/p&gt;
&lt;h2 id=&quot;MySQL-突然启动失败&quot;&gt;&lt;a href=&quot;#MySQL-突然启动失败&quot; class=&quot;headerlink&quot; title=&quot;MySQL 突然启动失败&quot;&gt;&lt;/a&gt;MySQL 突然启动失败&lt;/h2&gt;&lt;p&gt;由于我们公司的 Gitlab 服务器内存不太够，只有 2G，所以偶尔会出现 500 的错误，但通常情况下，直接通过 &lt;code&gt;$ sudo service gitlab restart&lt;/code&gt; 重启一次服务就可以恢复正常了。&lt;br&gt;但是，最近我遇到过 gitlab 启动失败，原因是 MySQL 无法启动。&lt;br&gt;当我启动 MySQL 的时候，报了这样的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service mysql restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MySQL Job failed &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报错就报错吧，去看看 error.log 就好了吧。 然而，我太天真了:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;/mysql/&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;cat&lt;/span&gt; /&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;/mysql/mysql.&lt;span class=&quot;literal&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;MySQL 的 error.log 是空的，mysql.log 也是空的…太诡异了，没 log 怎么 debug ?&lt;br&gt;还好有万能的 google，我找到了类似情况的问题：&lt;a href=&quot;http://stackoverflow.com/questions/22909060/mysql-job-failed-to-start&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mysql-job-failed-to-start&lt;/a&gt;。最高票的答案是重装 mysql 的，但我不敢冒这个风险。我注意到有个回答说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The given solution requires enough free HDD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是我马上查了一下硬盘空间：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ df -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Filesystem      Size  Used Avail &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt;% Mounted &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/dev/xvda1       &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;G&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;G&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;G&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;% /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来是空间满了，于是我删掉了一些没用的东西，腾出了 3G 多的空间之后，MySQL 又可以正常启动了，Gitlab 也是！&lt;/p&gt;
&lt;h2 id=&quot;迁移-MySQL-到-PostgreSQL-时找不到依赖&quot;&gt;&lt;a href=&quot;#迁移-MySQL-到-PostgreSQL-时找不到依赖&quot; class=&quot;headerlink&quot; title=&quot;迁移 MySQL 到 PostgreSQL 时找不到依赖&quot;&gt;&lt;/a&gt;迁移 MySQL 到 PostgreSQL 时找不到依赖&lt;/h2&gt;&lt;p&gt;以前一直听说 PostgreSQL 很强大，而 Gitlab 也是官方推荐使用 PostgreSQL，再加上 Gitlab 有官方教程教我们如何把 MySQL 迁移到 PostgreSQL，于是我就萌生了迁移数据库的念头。&lt;/p&gt;
&lt;p&gt;按照着 &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/mysql_to_postgresql.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Migrating GitLab from MySQL to Postgres&lt;/a&gt; 这篇文章，我很轻易就把 MySQL 中的数据迁移到 PostgreSQL 中了。&lt;br&gt;而且每个步骤都没报错，我以为一切正常，谁知道当我执行 &lt;code&gt;service gitlab start&lt;/code&gt; 的时候，就报启动失败了。&lt;/p&gt;
&lt;p&gt;我一下子就懵了，为什么按照官方教程做还会报错？ 而且报的还是这种抱不到依赖的错误？&lt;br&gt;&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Specified &lt;span class=&quot;string&quot;&gt;&#39;postgresql&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; database adapter, but the gem &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; loaded. &lt;span class=&quot;keyword&quot;&gt;Add&lt;/span&gt; `gem &lt;span class=&quot;string&quot;&gt;&#39;pg&#39;&lt;/span&gt;` &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; your Gemfile.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我找了很多资料，但基本都是说把 &lt;code&gt;pg&lt;/code&gt; 加到 Gemfile ，然后再 &lt;code&gt;bundle install&lt;/code&gt; 就好了。&lt;br&gt;但我试过把 &lt;code&gt;vendor/bundle&lt;/code&gt; 删掉再重装，还是有这个错误。&lt;br&gt;最后，我找到 &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ci/issues/227&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gem::LoadError: Specified ‘mysql2’ after update to 7.13
&lt;/a&gt; 这个 issue，里面提到在 &lt;code&gt;.bundle/config&lt;/code&gt; 里面有一些 bundle 的配置！我发现我里面的配置和这个 issue 提到的配置是一样的：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;BUNDLE_WITHOUT:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;development:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;postgres:&lt;/span&gt;mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我把上面的 &lt;code&gt;postgres&lt;/code&gt; 部分删掉，然后再运行 &lt;code&gt;sudo -u git -H bundle install --without development test mysql --deployment&lt;/code&gt; 安装依赖，就能正常启动 gitlab 了。&lt;/p&gt;
&lt;p&gt;这时候，我才体会到，不熟悉 ruby 技术栈去搞 gitlab 真是累啊~&lt;/p&gt;
&lt;h2 id=&quot;Docker-化时自动修改用户组引起其他问题&quot;&gt;&lt;a href=&quot;#Docker-化时自动修改用户组引起其他问题&quot; class=&quot;headerlink&quot; title=&quot;Docker 化时自动修改用户组引起其他问题&quot;&gt;&lt;/a&gt;Docker 化时自动修改用户组引起其他问题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;严格来说这不是升级 Gitlab 升级过程中遇到的坑，这只是我在尝试把 gitlab docker 化时遇到的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了上面的经历，我暗下决心，要把 Gitlab Docker 化，这样我就不用操心 Gitlab 相关的问题了，我只要启动下载镜像，运行容器就好了，其他 Gitlab 相关的事情就交回给官方处理好了。&lt;/p&gt;
&lt;p&gt;于是，我找到了 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;docker-gitlab&lt;/a&gt;，我慢慢去尝试把 Gitlab 扔到 docker 里面运行。&lt;/p&gt;
&lt;p&gt;最开始的时候，我直接用 docker-compose 来运行 docker-gitlab，我试着先用 MySQL ，于是我把 &lt;code&gt;docker-compose.yaml&lt;/code&gt; 中的 PostgreSQL 部分的东西全部改成 MySQL，然后直接用 &lt;code&gt;docker-compose up&lt;/code&gt; 来运行 gitlab 。&lt;/p&gt;
&lt;p&gt;虽然运行过程中没看出什么问题，但我后来发现 MySQL 中的用户和用户组都被修改成 &lt;code&gt;messagebus:messagebus&lt;/code&gt; 了！这样直接导致了我本地的 MySQL 不能正常使用了。&lt;br&gt;最后把它改回 &lt;code&gt;mysql:adm&lt;/code&gt; 才恢复正常~&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22909060/mysql-job-failed-to-start&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/22909060/mysql-job-failed-to-start&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ci/issues/227&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gitlab.com/gitlab-org/gitlab-ci/issues/227&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sameersbn/docker-gitlab&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近帮公司的 Gitlab 从 7.14 升级到 8.7.6，升级的主要动机是整合 Gitlab CI，提升持续集成的效率。鉴于之前也是我把
    
    </summary>
    
    
      <category term="gitlab" scheme="http://scarletsky.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>「译」 MapReduce in MongoDB</title>
    <link href="http://scarletsky.github.io/2016/06/12/mapreduce-in-mongodb/"/>
    <id>http://scarletsky.github.io/2016/06/12/mapreduce-in-mongodb/</id>
    <published>2016-06-12T02:04:53.000Z</published>
    <updated>2016-06-12T06:57:16.000Z</updated>
    
    <content type="html">&lt;p&gt;在这篇文章里面，我们会演示如何在 MongoDB 中使用 MapReduce 操作。&lt;br&gt;我们会用 &lt;code&gt;dummy-json&lt;/code&gt; 这个包来生成一些虚假的数据，然后用 &lt;code&gt;Mongojs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想要快速看到结果，可以到 &lt;a href=&quot;http://code.runnable.com/U1fmE30iHWMIGY_r/mapreduce-in-mongodb-for-node-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 里看看。&lt;/p&gt;
&lt;h2 id=&quot;什么是-MongoDB&quot;&gt;&lt;a href=&quot;#什么是-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;什么是 MongoDB ?&quot;&gt;&lt;/a&gt;什么是 MongoDB ?&lt;/h2&gt;&lt;p&gt;MongoDB 是一个 NoSQL 数据库，不像 MySQL 、MSSQL 和 Oracle DB 那样，MongoDB 使用集合(collections) 来代替表(tables)。同时，它用集合中的文档(documents)来代替表中的行(rows)。还有最好的一点是，所有文档都保存成 JSON 格式！你可以到&lt;a href=&quot;http://try.mongodb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;学更多关于 MongoDB 的知识。&lt;/p&gt;
&lt;p&gt;你可以从 &lt;a href=&quot;http://www.mongodb.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 下载安装 MongoDB。&lt;/p&gt;
&lt;p&gt;如果以前没用过 MongoDB，那么你可以记住下面这些命令:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;启动 MongoDB 服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mongo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;进入 MongoDB Shell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show dbs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示所有数据库列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;use &amp;lt;db name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;进入指定的数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show collections&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;进入数据库之后，显示该数据库中所有的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.find()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示该集合中所有文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.findOne()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示该集合中第一个文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.find().pretty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示漂亮的 JSON 格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.insert({key: value})&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;插入一条新的记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.update({ condition: value}, {$set: {key: value}}, {upsert: true})&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;会更新指定的文档，设置指定的值。如果 &lt;code&gt;upsert&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;，当没有找到匹配的文档时，会创建一条新的记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.remove({})&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;移除集合中的所有文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;db.collectionName.remove({key: value})&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;移除集合中匹配到的文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;什么是-MapReduce&quot;&gt;&lt;a href=&quot;#什么是-MapReduce&quot; class=&quot;headerlink&quot; title=&quot;什么是 MapReduce ?&quot;&gt;&lt;/a&gt;什么是 MapReduce ?&lt;/h2&gt;&lt;p&gt;弄清楚 MapReduce 是如何运作的是非常重要的，如果对 MapReduce 过程不了解的话，你在运行 MapReduce 时很可能得不到你想要的结果。&lt;/p&gt;
&lt;p&gt;从 mongodb.org 上的解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Map-reduce 是一种数据处理范例，用于将大量的数据变成有用的聚合结果。 对于 map-reduce 操作，MongoDB 提供了 mapReduce 的数据库命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这非常简单的术语里面，mapReduce 命令接受两个基本的输入：mapper 函数和 reducer 函数。&lt;/p&gt;
&lt;p&gt;Mapper 是一个匹配数据的过程，它会在集合中查询我们想要处理的字段，然后根据我们指定的 key 去分组，再把这些 key-value 对交给 reducer 函数，由它来处理这些匹配到的数据。&lt;/p&gt;
&lt;p&gt;我们来看看下面这些数据：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; name: foo, price: 9 &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; name: foo, price: 12 &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; name: bar, price: 8 &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; name: baz, price: 3 &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; name: baz, price: 5 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们想要计算出相同名字下的所需要的价钱。我们将会用这个数据通过 Mapper 和 Reducer 去获得结果。&lt;/p&gt;
&lt;p&gt;当我们让 Mapper 去处理上面的数据时，会生成如下的结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;[9,12]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;[8]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;td&gt;[3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看到了吗？它用相同的 key 去分组数据。在我们的例子中，是用 name 分组。这些结果会发送到 Reducer 中。&lt;/p&gt;
&lt;p&gt;现在，在 reducer 中，我们会得到上面表格中的第一行数据，然后迭代这些数据然后把它们加起来，这就是第一行数据的总和。然后 reducer 会对第二行数据做同样的事情，直到所有行被处理完。&lt;/p&gt;
&lt;p&gt;最终的输出结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在你明白为什么 Mapper 会叫 Mapper 了吧 ! (因为它会创建一份数据的映射)&lt;br&gt;也明白了为什么 Reducer 会叫 Reducer 了吧 ! (因为它会把 Mapper 生成的数据归纳成一个简单的形式)&lt;/p&gt;
&lt;p&gt;如果你运行一些例子，你就会知道它是怎么工作的拉。你也可以从&lt;a href=&quot;https://docs.mongodb.com/manual/core/map-reduce/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt; 中了解更多细节。&lt;/p&gt;
&lt;h2 id=&quot;创建一个项目&quot;&gt;&lt;a href=&quot;#创建一个项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个项目&quot;&gt;&lt;/a&gt;创建一个项目&lt;/h2&gt;&lt;p&gt;正如上文所说，我们可以在 mongo shell 中直接查询和看到输出结果。但是，为了让教程更加丰富，我们会构建一个 Nodejs 项目，在里面运行我们之前的任务。&lt;/p&gt;
&lt;h3 id=&quot;Mongojs&quot;&gt;&lt;a href=&quot;#Mongojs&quot; class=&quot;headerlink&quot; title=&quot;Mongojs&quot;&gt;&lt;/a&gt;Mongojs&lt;/h3&gt;&lt;p&gt;我们会用 &lt;code&gt;mongojs&lt;/code&gt; 去实现我们的 MapReduce。你可以用同样的代码跑在 mongo shell 里面，会看到同样的结果。&lt;/p&gt;
&lt;h3 id=&quot;Dummy-json&quot;&gt;&lt;a href=&quot;#Dummy-json&quot; class=&quot;headerlink&quot; title=&quot;Dummy-json&quot;&gt;&lt;/a&gt;Dummy-json&lt;/h3&gt;&lt;p&gt;我们会用 &lt;code&gt;dummy-json&lt;/code&gt; 去创建一些虚假的数据。你可以在 &lt;a href=&quot;https://github.com/webroo/dummy-json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 找到更多的信息。然后我们会在这些虚假数据上面运行 MapReduce 命令，生成一些有意义的结果。&lt;/p&gt;
&lt;p&gt;我们开始吧！&lt;/p&gt;
&lt;p&gt;首先，你要安装 Nodejs，你可以看看 &lt;a href=&quot;http://thejackalofjavascript.com/hello-node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。然后你要创建一个叫 mongoDBMapReduce 的目录。我们将会创建 &lt;code&gt;package.json&lt;/code&gt; 文件来保存项目的详细信息。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;npm init&lt;/code&gt; 然后填入你喜欢的东西，创建完 &lt;code&gt;package.json&lt;/code&gt; 后，我们要添加项目的依赖。&lt;br&gt;运行 &lt;code&gt;npm i mongojs dummy-json --save-dev&lt;/code&gt; ，然后等几分钟之后，我们项目的依赖就安装好了。&lt;/p&gt;
&lt;h2 id=&quot;生成虚假数据&quot;&gt;&lt;a href=&quot;#生成虚假数据&quot; class=&quot;headerlink&quot; title=&quot;生成虚假数据&quot;&gt;&lt;/a&gt;生成虚假数据&lt;/h2&gt;&lt;p&gt;下一步，我们要用 &lt;code&gt;dummy-json&lt;/code&gt; 模块来生成虚假数据。&lt;br&gt;在项目的根目录创建一个名叫 &lt;code&gt;dataGen.js&lt;/code&gt; 的文件，我们会把数据生成的逻辑保存到一个独立的文件里面。如果以后需要添加更多的数据，你可以运行这个文件。&lt;/p&gt;
&lt;p&gt;把下面的内容复制到 &lt;code&gt;dataGen.js&lt;/code&gt; 里面：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongojs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongojs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; db = mongojs(&lt;span class=&quot;string&quot;&gt;&#39;mapReduceDB&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sourceData&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dummyjson = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;dummy-json&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; helpers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;+ &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() &amp;gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;male&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;female&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dob : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1900&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        end = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(start.getTime() + &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * (end.getTime() - start.getTime()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hobbies : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hobbysList = []; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = [&lt;span class=&quot;string&quot;&gt;&quot;Acrobatics&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Meditation&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Music&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = [&lt;span class=&quot;string&quot;&gt;&quot;Acrobatics&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Photography&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Papier-Mache&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = [ &lt;span class=&quot;string&quot;&gt;&quot;Papier-Mache&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * hobbysList[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Begin Parsing &amp;gt;&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; template = fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&#39;schema.hbs&#39;&lt;/span&gt;, &amp;#123;encoding: &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = dummyjson.parse(template, &amp;#123;helpers: helpers&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Begin Database Insert &amp;gt;&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.remove(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;argument&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;DB Cleanup Completd&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.insert(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(result), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, docs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;DB Insert Completed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第1-4行&lt;/strong&gt;，我们引入了所有依赖。&lt;br&gt;&lt;strong&gt;第2行&lt;/strong&gt;，我们创建了一个叫 &lt;code&gt;mapReduceDB&lt;/code&gt; 的数据库。在数据库里面，创建了一个叫 &lt;code&gt;sourceData&lt;/code&gt; 的集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第6-23行&lt;/strong&gt;，是 Handlebar 的 helper。你可以到 &lt;code&gt;dummy-json&lt;/code&gt; 中了解更多信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第27-28行&lt;/strong&gt;，我们读取了 &lt;code&gt;schema.hbs&lt;/code&gt; 文件 (我们接着会创建这个文件)，然后把它解析成 JSON。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第32行&lt;/strong&gt;，在插入新数据之前，我们要先把旧数据清除掉。如果你想保留旧数据，把这部分注释掉就好了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第36行&lt;/strong&gt;，把生成的数据插入数据库。&lt;/p&gt;
&lt;p&gt;接着，我们要在项目根目录创建一个叫 &lt;code&gt;schema.hbs&lt;/code&gt; 的文件。这里面会包括 JSON 文档的结构。把下面的内容复制到文件里面：&lt;/p&gt;
&lt;figure class=&quot;highlight hbs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;begin-block&quot;&gt;#repeat &lt;/span&gt;9999&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;id&quot;: &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;index&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;name&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;firstName&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;lastName&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;email&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;email&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;work&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;company&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;dob&quot; : &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;dob&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;age&quot;: &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;number&lt;/span&gt; 1 99&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;gender&quot; : &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;gender&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;salary&quot; : &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;number&lt;/span&gt; 999 99999&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;hobbies&quot; : &quot;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;variable&quot;&gt;hobbies&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;end-block&quot;&gt;/repeat&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 &lt;strong&gt;第2行&lt;/strong&gt;，我们会生成 9999 个文档。&lt;/p&gt;
&lt;p&gt;打开一个新的终端，运行 &lt;code&gt;mongod&lt;/code&gt;，启动 MongoDB 服务。然后回到原来的终端，运行 &lt;code&gt;node dataGen.js&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果一切正常，会显示如下结果：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node dataGen.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Begin&lt;/span&gt; Parsing &amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Begin&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Database&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Insert&lt;/span&gt; &amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DB &lt;span class=&quot;keyword&quot;&gt;Cleanup&lt;/span&gt; Completed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DB &lt;span class=&quot;keyword&quot;&gt;Insert&lt;/span&gt; Completed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后按 ctrl + c 杀掉 Node 程序。要验证是否插入成功，我们可以打开一个新的终端，运行 &lt;code&gt;mongo&lt;/code&gt; 命令进入 mongo shell。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; use mapReduceDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; db.sourceData.findOne()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Leanne Flinn&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;leanne.flinn@unilogic.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;work&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Unilogic&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;dob&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Sun Mar 14 1909 12:45:53 GTM+0530 (LST)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;salary&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16660&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;hobbies&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Acrobatics,Photography,Papier-Mache&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;_id&quot;&lt;/span&gt;: Object(&lt;span class=&quot;string&quot;&gt;&quot;57579f702fa6c7651e504fe2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; db.sourceData.count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;有意义的数据&quot;&gt;&lt;a href=&quot;#有意义的数据&quot; class=&quot;headerlink&quot; title=&quot;有意义的数据&quot;&gt;&lt;/a&gt;有意义的数据&lt;/h2&gt;&lt;p&gt;现在我们有 9999 个虚假用户的数据，让我们试着把数据变得有意义&lt;/p&gt;
&lt;h3 id=&quot;例子1：计算男女数量&quot;&gt;&lt;a href=&quot;#例子1：计算男女数量&quot; class=&quot;headerlink&quot; title=&quot;例子1：计算男女数量&quot;&gt;&lt;/a&gt;例子1：计算男女数量&lt;/h3&gt;&lt;p&gt;首先，在项目根目录创建一个 &lt;code&gt;example1.js&lt;/code&gt; 的文件，我们要进行 MapReduce 操作，去计算男女的数量。&lt;/p&gt;
&lt;h4 id=&quot;Mapper-的逻辑&quot;&gt;&lt;a href=&quot;#Mapper-的逻辑&quot; class=&quot;headerlink&quot; title=&quot;Mapper 的逻辑&quot;&gt;&lt;/a&gt;Mapper 的逻辑&lt;/h4&gt;&lt;p&gt;我们只需要让 Mapper 以性别作为 key，把值作为 1。因为一个用户不是男就是女。所以，Mapper 的输出会是下面这样：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;[1,1,1…]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1…]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Reducer-的逻辑&quot;&gt;&lt;a href=&quot;#Reducer-的逻辑&quot; class=&quot;headerlink&quot; title=&quot;Reducer 的逻辑&quot;&gt;&lt;/a&gt;Reducer 的逻辑&lt;/h4&gt;&lt;p&gt;在 Reducer 中，我们会获得上面两行数据，我们要做的是把每一行中的值求和，表示该性别的总数。最终的输出结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;5031&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;4968&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;好了，现在我们可以写代码去实现了。在 &lt;code&gt;example1.js&lt;/code&gt; 中，我们要先引入所需要的依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongojs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongojs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; db = mongojs(&lt;span class=&quot;string&quot;&gt;&#39;mapReduceDB&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sourceData&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;example1_results&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 &lt;strong&gt;第2行&lt;/strong&gt;，第一个参数是数据库的名字，第二个参数表示集合的数组。&lt;code&gt;example1_results&lt;/code&gt; 集合用来保存结果。&lt;/p&gt;
&lt;p&gt;接下来，我们加上 mapper 和 reducer 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapper = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gender, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducer = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;gender, count&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.sum(count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;strong&gt;第2行&lt;/strong&gt;中， &lt;code&gt;this&lt;/code&gt; 表示当前的文档，因此 &lt;code&gt;this.gender&lt;/code&gt; 会作为 mapper 的 key，它的值要么是 &lt;code&gt;male&lt;/code&gt;，要么是 &lt;code&gt;female&lt;/code&gt;。而 &lt;code&gt;emit()&lt;/code&gt; 将会把数据发送到一个临时保存数据的地方，作为 mapper 的结果。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;第5行&lt;/strong&gt;中，我们简单地把每个性别的所有值加起来。&lt;/p&gt;
&lt;p&gt;最后，加上执行逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.mapReduce(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapper,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out : &lt;span class=&quot;string&quot;&gt;&quot;example1_results&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; db.example1_results.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, docs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(docs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;strong&gt;第5行&lt;/strong&gt;中，我们设置了输出的集合名。&lt;br&gt;在&lt;strong&gt;第9行&lt;/strong&gt;中，我们会从 &lt;code&gt;example1_results&lt;/code&gt; 集合取得结果并显示它。&lt;/p&gt;
&lt;p&gt;我们可以在终端运行试试：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node example1.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;female&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4968&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;male&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5031&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我的数量可能和你的不一样，但男女总数应该是 9999 !&lt;/p&gt;
&lt;h4 id=&quot;Mongo-Shell-代码&quot;&gt;&lt;a href=&quot;#Mongo-Shell-代码&quot; class=&quot;headerlink&quot; title=&quot;Mongo Shell 代码&quot;&gt;&lt;/a&gt;Mongo Shell 代码&lt;/h4&gt;&lt;p&gt;如果你想在 mongo shell 中运行上面的例子，你可以粘贴下面这些代码到终端里面：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mapper = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gender, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reducer = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;gender, count&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.sum(count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.mapReduce(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapper,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out : &lt;span class=&quot;string&quot;&gt;&quot;example1_results&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; db.example1_results.find()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你就会看到一样的结果，很简单吧！&lt;/p&gt;
&lt;h3 id=&quot;例子2：获取每个性别中最老和最年轻的人&quot;&gt;&lt;a href=&quot;#例子2：获取每个性别中最老和最年轻的人&quot; class=&quot;headerlink&quot; title=&quot;例子2：获取每个性别中最老和最年轻的人&quot;&gt;&lt;/a&gt;例子2：获取每个性别中最老和最年轻的人&lt;/h3&gt;&lt;p&gt;在项目根目录创建一个 &lt;code&gt;example2.js&lt;/code&gt; 的文件。在这里，我们要把所有用户根据性别分组，然后分别找每个性别中最老和最年轻的用户。这个例子比前面的稍微复杂一点。&lt;/p&gt;
&lt;h4 id=&quot;Mapper-的逻辑-1&quot;&gt;&lt;a href=&quot;#Mapper-的逻辑-1&quot; class=&quot;headerlink&quot; title=&quot;Mapper 的逻辑&quot;&gt;&lt;/a&gt;Mapper 的逻辑&lt;/h4&gt;&lt;p&gt;在 mapper 中，我们要以性别作为 key，然后以 object 作为 value。这个 object 要包含用户的年龄和名字。年龄是用来做计算用的，而名字只是用来显示给人看的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;[{age: 9, name: ‘John’}, …]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;[{age: 19, name: ‘Rita’}, …]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Reducer-的逻辑-1&quot;&gt;&lt;a href=&quot;#Reducer-的逻辑-1&quot; class=&quot;headerlink&quot; title=&quot;Reducer 的逻辑&quot;&gt;&lt;/a&gt;Reducer 的逻辑&lt;/h4&gt;&lt;p&gt;我们的 reducer 会比前一个例子要复杂一点。我们要检查所有和性别相关的年龄，找到年龄最大和最小的用户。最终的输出结果是这样的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Male&lt;/td&gt;
&lt;td&gt;{min: {name: ‘harry’, age: 1}, max: {name: ‘Alex’, age: 99} }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Female&lt;/td&gt;
&lt;td&gt;{min: {name: ‘Loli’, age: 10}, max: {name: ‘Mary’, age: 98} }&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;现在打开 &lt;code&gt;example2.js&lt;/code&gt;，粘贴下面的内容进去：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongojs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongojs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; db = mongojs(&lt;span class=&quot;string&quot;&gt;&#39;mapReduceDB&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sourceData&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;example2_results&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapper = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &amp;#123;age : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age, name : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gender, &amp;#123;min : x , max : x&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducer = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, values&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = values[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; values.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(values[i].min.age &amp;lt; res.min.age)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.min = &amp;#123;name : values[i].min.name, age : values[i].min.age&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (values[i].max.age &amp;gt; res.max.age) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           res.max = &amp;#123;name : values[i].max.name, age : values[i].max.age&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.mapReduce(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapper,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out : &lt;span class=&quot;string&quot;&gt;&quot;example2_results&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; db.example2_results.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, docs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(docs));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;strong&gt;第6行&lt;/strong&gt;，我们构建了一个 object，把它作为 value 发送。&lt;br&gt;在&lt;strong&gt;第13-18行&lt;/strong&gt;，我们迭代了所有 object，检查当前的 object 的年龄是否大于或小于前一个 object 的年龄，如果是，就会更新 &lt;code&gt;res.max&lt;/code&gt; 或者 &lt;code&gt;res.min&lt;/code&gt;。&lt;br&gt;在第&lt;strong&gt;第27行&lt;/strong&gt;，我们把结果输出到 &lt;code&gt;example2_results&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;我们可以运行一下这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node example2.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;female&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &amp;#123; &lt;span class=&quot;string&quot;&gt;min:&lt;/span&gt; [Object], &lt;span class=&quot;string&quot;&gt;max:&lt;/span&gt; [Object] &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;male&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &amp;#123; &lt;span class=&quot;string&quot;&gt;min:&lt;/span&gt; [Object], &lt;span class=&quot;string&quot;&gt;max:&lt;/span&gt; [Object] &amp;#125; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;例子3：计算每种兴趣爱好的人数&quot;&gt;&lt;a href=&quot;#例子3：计算每种兴趣爱好的人数&quot; class=&quot;headerlink&quot; title=&quot;例子3：计算每种兴趣爱好的人数&quot;&gt;&lt;/a&gt;例子3：计算每种兴趣爱好的人数&lt;/h3&gt;&lt;p&gt;在我们最后的例子中，我们会看看有多少用户有相同的兴趣爱好。我们在项目根目录创建一个叫 &lt;code&gt;example3.js&lt;/code&gt; 的文件。用户数据长这样子：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Leanne Flinn&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;email&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;leanne.flinn@unilogic.com&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;work&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Unilogic&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;dob&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Sun Mar 14 1909 12:45:53 GTM+0530 (LST)&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;age&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;gender&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;salary&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;16660&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;hobbies&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Acrobatics,Photography,Papier-Mache&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;_id&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;Object(&lt;span class=&quot;string&quot;&gt;&quot;57579f702fa6c7651e504fe2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如你所见，每个用户的兴趣爱好列表都用逗号分隔。我们会找出有多少用户有表演杂技的爱好等等。&lt;/p&gt;
&lt;h4 id=&quot;Mapper-的逻辑-2&quot;&gt;&lt;a href=&quot;#Mapper-的逻辑-2&quot; class=&quot;headerlink&quot; title=&quot;Mapper 的逻辑&quot;&gt;&lt;/a&gt;Mapper 的逻辑&lt;/h4&gt;&lt;p&gt;在这个场景下，我们的 mapper 会复杂一点。我们要为每个用户的兴趣爱好发送一个新的 key-value 对。这样，每个用户的每个兴趣爱好都会触发一次计算。最终我们会得到如下的结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Acrobatics&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1,1,….]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Meditation&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1,1,….]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Music&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1,1,….]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Photography&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1,1,….]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Papier-Mache&lt;/td&gt;
&lt;td&gt;[1,1,1,1,1,1,….]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Reducer-的逻辑-2&quot;&gt;&lt;a href=&quot;#Reducer-的逻辑-2&quot; class=&quot;headerlink&quot; title=&quot;Reducer 的逻辑&quot;&gt;&lt;/a&gt;Reducer 的逻辑&lt;/h4&gt;&lt;p&gt;在这里，我们只要简单地为每种兴趣爱好求和就好了。最终我们会得到下面的结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Acrobatics&lt;/td&gt;
&lt;td&gt;6641&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Meditation&lt;/td&gt;
&lt;td&gt;3338&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Music&lt;/td&gt;
&lt;td&gt;3338&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Photography&lt;/td&gt;
&lt;td&gt;3303&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Papier-Mache&lt;/td&gt;
&lt;td&gt;6661&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;代码-2&quot;&gt;&lt;a href=&quot;#代码-2&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongojs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongojs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; db = mongojs(&lt;span class=&quot;string&quot;&gt;&#39;mapReduceDB&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;sourceData&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;example3_results&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapper = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hobbys = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.hobbies.split(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; hobbys) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        emit(hobbys[i], &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducer = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;key, values&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; values) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count += values[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.sourceData.mapReduce(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapper,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reducer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        out : &lt;span class=&quot;string&quot;&gt;&quot;example3_results&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; db.example3_results.find(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, docs&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(docs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意&lt;strong&gt;第7-9行&lt;/strong&gt;，我们迭代了每个兴趣爱好，然后发送了一次记数。&lt;br&gt;&lt;strong&gt;第13-18行&lt;/strong&gt;可以用 &lt;code&gt;Array.sum(values)&lt;/code&gt; 来代替，这样是另外一种做相同事情的方式。最终我们得到的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node example3.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Acrobatics&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6641&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Meditation&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3338&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Music&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3338&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Photography&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6661&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;_id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Papier-Mache&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3303&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就是 MongoDB 中运行 MapReduce 的方法了。但要记住，有时候一个简单的查询就能完成你想要的事情的。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://thejackalofjavascript.com/mapreduce-in-mongodb/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MapReduce in MongoDB&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章里面，我们会演示如何在 MongoDB 中使用 MapReduce 操作。&lt;br&gt;我们会用 &lt;code&gt;dummy-json&lt;/code&gt; 这个包来生成一些虚假的数据，然后用 &lt;code&gt;Mongojs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想要快速看到结果，可以到 &lt;
    
    </summary>
    
    
      <category term="mongodb" scheme="http://scarletsky.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>编写 Hubot Scripts</title>
    <link href="http://scarletsky.github.io/2016/05/02/write-your-own-hubot-scripts/"/>
    <id>http://scarletsky.github.io/2016/05/02/write-your-own-hubot-scripts/</id>
    <published>2016-05-02T08:05:37.000Z</published>
    <updated>2016-05-10T05:04:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们在上一篇中介绍了 Hubot 的简单用法，里面提到我们可以为机器人编写脚本来让它根据不同的「输入」来给出不同的「输出」。&lt;br&gt;本文将会介绍如何编写我们的 Hubot Scritps。&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;我们的脚本应该放在哪里才能让 hubot 找到并且正常加载呢？在上一篇文章中我们提到过，hubot 在启动时会加载 &lt;code&gt;scripts/&lt;/code&gt; 目录中的脚本文件。&lt;br&gt;但它到底是怎么加载的呢？我们可以打开 &lt;code&gt;bin/hubot&lt;/code&gt; 文件看一下：&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;loadScripts&lt;/span&gt; = -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 加载 scripts 中的脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scriptsPath = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.load scriptsPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 加载 src/scripts 中的脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scriptsPath = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.load scriptsPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 加载 hubot-scripts.json 中列出的脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hubotScripts = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hubot-scripts.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Fs.existsSync(hubotScripts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = Fs.readFileSync(hubotScripts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scripts = JSON.parse data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        scriptsPath = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hubot-scripts&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;src&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        robot.loadHubotScripts scriptsPath, scripts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error &lt;span class=&quot;string&quot;&gt;&quot;Error parsing JSON data from hubot-scripts.json: &lt;span class=&quot;subst&quot;&gt;#&amp;#123;err&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        process.exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 加载 external-scripts.json 中列出的脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  externalScripts = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;external-scripts.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Fs.existsSync(externalScripts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fs.readFile externalScripts, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(err, data)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          scripts = JSON.parse data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error &lt;span class=&quot;string&quot;&gt;&quot;Error parsing JSON data from external-scripts.json: &lt;span class=&quot;subst&quot;&gt;#&amp;#123;err&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          process.exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        robot.loadExternalScripts scripts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 加载由 process.env.HUBOT_SCRIPTS 和 -r 参数指定的脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; path &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Options.scripts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; path[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scriptsPath = path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      scriptsPath = Path.resolve &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;, path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    robot.load scriptsPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实只是先指定脚本路径，然后调用 &lt;code&gt;robot.load&lt;/code&gt; 和 &lt;code&gt;robot.loadHubotScripts&lt;/code&gt; 而已拉！&lt;br&gt;而这两个方法简单来说是长这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; script &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  script @&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;property&quot;&gt;@logger&lt;/span&gt;.warning &lt;span class=&quot;string&quot;&gt;&quot;Expected &lt;span class=&quot;subst&quot;&gt;#&amp;#123;full&amp;#125;&lt;/span&gt; to assign a function to module.exports, got &lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; script&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ......&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它们只是获取脚本路径，然后去 &lt;code&gt;require&lt;/code&gt; 脚本，最后把 &lt;code&gt;this&lt;/code&gt;(即 robot 对象) 作为参数传给 script 拉！&lt;br&gt;所以明白为什么我们之前说脚本要写成下面这样子了吧！&lt;/p&gt;
&lt;figure class=&quot;highlight openscad&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// coffee&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;exports&lt;/span&gt; =&lt;/span&gt; (robot) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;exports&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; &amp;#123;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;知道了最基本的脚本写法之后，我们就可以愉快的编写属于我们的 hubot script 拉！&lt;/p&gt;
&lt;h2 id=&quot;接受消息&quot;&gt;&lt;a href=&quot;#接受消息&quot; class=&quot;headerlink&quot; title=&quot;接受消息&quot;&gt;&lt;/a&gt;接受消息&lt;/h2&gt;&lt;p&gt;作为一个聊天机器人，hubot 最基本的功能是要监听特定的「输入」。&lt;br&gt;Hubot 给我们提供了三个不同层次的方法来监听输入：&lt;code&gt;robot.hear&lt;/code&gt;、&lt;code&gt;robot.respond&lt;/code&gt; 和 &lt;code&gt;robot.listen&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;robot-hear&quot;&gt;&lt;a href=&quot;#robot-hear&quot; class=&quot;headerlink&quot; title=&quot;robot.hear&quot;&gt;&lt;/a&gt;robot.hear&lt;/h3&gt;&lt;p&gt;监听任何匹配的「输入」。&lt;br&gt;即在聊天过程中，只要匹配到特定的消息，就会触发回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 匹配任何带有 hello 的消息，如&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# hellooooo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# haha helloooooo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/hello/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do what you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;robot-respond&quot;&gt;&lt;a href=&quot;#robot-respond&quot; class=&quot;headerlink&quot; title=&quot;robot.respond&quot;&gt;&lt;/a&gt;robot.respond&lt;/h3&gt;&lt;p&gt;监听对 hubot 说的「输入」。&lt;br&gt;即在聊天过程中，前面带有 hubot/hubot:/@hubot 的消息才会被匹配，然后触发回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 匹配对 hubot 说的 hi，如&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# hubot hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# @hubot hihihi~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# hubot: hihihi!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.respond &lt;span class=&quot;regexp&quot;&gt;/hi/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do what you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;robot-listen&quot;&gt;&lt;a href=&quot;#robot-listen&quot; class=&quot;headerlink&quot; title=&quot;robot.listen&quot;&gt;&lt;/a&gt;robot.listen&lt;/h3&gt;&lt;p&gt;自由度最高的监听器，传入一个函数（Match Function）对消息进行匹配。&lt;br&gt;该函数返回 &lt;code&gt;true&lt;/code&gt; 时回调函数会被执行。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 根据「消息」对象做处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.listen(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(message)&lt;/span&gt; -&amp;gt;&lt;/span&gt; message.user.name &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Scarlex&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# do what you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发送消息&quot;&gt;&lt;a href=&quot;#发送消息&quot; class=&quot;headerlink&quot; title=&quot;发送消息&quot;&gt;&lt;/a&gt;发送消息&lt;/h2&gt;&lt;p&gt;聊天机器人除了接收「输入」之外，还需要对消息做出「响应」。&lt;br&gt;有没有留意到上面接收消息中的回调函数都有一个 &lt;code&gt;res&lt;/code&gt; 呢？&lt;br&gt;你猜对拉！和 Node.js 中的 &lt;code&gt;res&lt;/code&gt; 用来响应 &lt;code&gt;req&lt;/code&gt; 一样，这里的 &lt;code&gt;res&lt;/code&gt; 也是是用来响应「输入」的。&lt;br&gt;其中比较常用的两个方法是 &lt;code&gt;res.send&lt;/code&gt; 和 &lt;code&gt;res.reply&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;res-send&quot;&gt;&lt;a href=&quot;#res-send&quot; class=&quot;headerlink&quot; title=&quot;res.send&quot;&gt;&lt;/a&gt;res.send&lt;/h3&gt;&lt;p&gt;这个方法和 &lt;code&gt;robot.hear&lt;/code&gt; 相反，会直接把消息发送到聊天室。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 匹配所有 hi 相关的输入，然后发送 hello 到聊天室&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/hi/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;res-reply&quot;&gt;&lt;a href=&quot;#res-reply&quot; class=&quot;headerlink&quot; title=&quot;res.reply&quot;&gt;&lt;/a&gt;res.reply&lt;/h3&gt;&lt;p&gt;这个方法和 &lt;code&gt;robot.respond&lt;/code&gt; 相反，谁对 hubot 聊天就会回复谁。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 匹配所有对 hubot 说的 hi，然后回复对 hubot 说话的用户，如&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 输入 @hubot hi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 输出 @scarlex hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.respond &lt;span class=&quot;regexp&quot;&gt;/hi/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.reply &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;res-match&quot;&gt;&lt;a href=&quot;#res-match&quot; class=&quot;headerlink&quot; title=&quot;res.match&quot;&gt;&lt;/a&gt;res.match&lt;/h3&gt;&lt;p&gt;只有上面两个方法是远远不够的，因为上面两个方法并不能对「输入」做任何处理。&lt;br&gt;不知道童鞋们有没有发现，我们其实是用正则表达式来匹配输入的，而正则表达式刚好可以用来做匹配某些关键字！&lt;br&gt;当匹配到关键字之后，我们从哪里可以提取到这些关键字呢？&lt;br&gt;答案就是 &lt;code&gt;res.match&lt;/code&gt; 拉！&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 用 res.match 来获取正则表达式匹配的结果，如&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 输入 open the first door&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 输出 opening the first door&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/open the (.*) door/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send &lt;span class=&quot;string&quot;&gt;&quot;opening the &lt;span class=&quot;subst&quot;&gt;#&amp;#123;res.match[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;#125;&lt;/span&gt; door&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发出-http-请求&quot;&gt;&lt;a href=&quot;#发出-http-请求&quot; class=&quot;headerlink&quot; title=&quot;发出 http 请求&quot;&gt;&lt;/a&gt;发出 http 请求&lt;/h2&gt;&lt;p&gt;只是匹配消息再回复太简单拉！其实我们可以通过 hubot 发出 http 请求来做出更多的事情！&lt;br&gt;Hubot 自带一个 &lt;a href=&quot;https://github.com/technoweenie/node-scoped-http-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-scoped-http-client&lt;/a&gt; 来发 http 请求。&lt;br&gt;用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .http(&lt;span class=&quot;string&quot;&gt;&#39;https://github.com&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .get() (err, response, body) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do what you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初看会觉得很奇怪，其实这只是一个高阶函数而已，对应的 javascript 是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;robot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .http(&lt;span class=&quot;string&quot;&gt;&#39;https://github.com&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .get()(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, response, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do what you want&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;事实上，由于我们是在 Node.js 环境下运行 hubot 的， 我们可以用任何 http client 库来实现这个需求，如著名的 &lt;a href=&quot;https://github.com/request/request&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;request&lt;/a&gt; 库。&lt;br&gt;我们要做的只是运行 &lt;code&gt;npm install request --save&lt;/code&gt; 再 &lt;code&gt;require&lt;/code&gt; 进来就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/get github page/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    request.get &lt;span class=&quot;string&quot;&gt;&#39;https://github.com&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(err, response, body)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.send response.statusCode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我在这里只演示了 GET 请求，其他类型的请求相信也难不倒大家拉！遇到什么问题去翻翻类库的文档就好拉！&lt;/p&gt;
&lt;p&gt;需要提醒一点，在发出 http 请求的时候，不要搞错了 hubot 的 &lt;code&gt;res&lt;/code&gt; 对象和 request 的 &lt;code&gt;res&lt;/code&gt; 对象哦！&lt;/p&gt;
&lt;h2 id=&quot;响应-http-请求&quot;&gt;&lt;a href=&quot;#响应-http-请求&quot; class=&quot;headerlink&quot; title=&quot;响应 http 请求&quot;&gt;&lt;/a&gt;响应 http 请求&lt;/h2&gt;&lt;p&gt;Hubot 内置了一个 &lt;a href=&quot;https://github.com/expressjs/express&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;express&lt;/a&gt; 来响应 http 请求。&lt;br&gt;它会随 hubot 一并启动，默认端口是 8080，我们可以设置环境变量 &lt;code&gt;EXPRESS_PORT&lt;/code&gt; 或 &lt;code&gt;PORT&lt;/code&gt; 来改变默认的端口。&lt;br&gt;那么我们怎么才能使用它呢？很简单，只要调用 &lt;code&gt;robot.router&lt;/code&gt; 就可以拉！&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 打开浏览器，然后输入 http://localhost:8080/hubot/haha&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 会看见浏览器显示 ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.router.get &lt;span class=&quot;string&quot;&gt;&#39;/hubot/haha&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(req, res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send &lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽情发挥你的想象力去写一些有趣的东西吧！&lt;/p&gt;
&lt;p&gt;哦，对了，如果想要禁用这个 express，只要在启动的时候加个 &lt;code&gt;-d&lt;/code&gt; 或者 &lt;code&gt;--disable-httpd&lt;/code&gt; 就好了。&lt;br&gt;或者设置环境变量 &lt;code&gt;HUBOT_HTTPD&lt;/code&gt; 为 &lt;code&gt;false&lt;/code&gt; 也可以！&lt;br&gt;即下面的方式都可以：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;./bin/hubot -d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;./bin/hubot --disable-httpd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;HUBOT_HTTPD&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; ./bin/hubot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当看到控制台输出下面这种警告的时候，就表示 express 被禁止启动拉！&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WARNING A &lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt; has tried registering a HTTP route &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; HTTP server &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; disabled &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--disabled-httpd.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;事件处理&quot;&gt;&lt;a href=&quot;#事件处理&quot; class=&quot;headerlink&quot; title=&quot;事件处理&quot;&gt;&lt;/a&gt;事件处理&lt;/h2&gt;&lt;p&gt;还有一点需要提的是，hubot 自带了一个 EventEmitter，这意味着我们可以通过 &lt;code&gt;robot.emit&lt;/code&gt; 和 &lt;code&gt;robot.on&lt;/code&gt; 来编写基于事件通讯的代码~&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 监听输入 event test，然后用 robot.emit 触发 wow 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/event test/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args = &amp;#123; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;12345&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    robot.emit &lt;span class=&quot;string&quot;&gt;&#39;wow&#39;&lt;/span&gt;, args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.send &lt;span class=&quot;string&quot;&gt;&#39;emit wow event with args: &#39;&lt;/span&gt; + JSON.stringify args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 用 robot.on 来监听 wow 事件，回调函数中可以获取事件发送过来的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 控制台会输出 &amp;#123; id: &#39;12345&#39; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.&lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;wow&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(args)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    robot.logger.info args&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种基于事件通讯的代码非常适合和 webhook 一起使用哦！&lt;br&gt;想象一下，当我们 push 代码到 master 分支的时候，触发一个 webhook，然后 hubot 就帮我们自动部署新版网站，很棒吧！&lt;/p&gt;
&lt;h2 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;任何代码都不是完美的，它们都有可能报错，当出现错误的时候，我们就需要对错误进行处理拉！&lt;br&gt;在 hubot 里，我们可以用 &lt;code&gt;robot.error&lt;/code&gt; 来捕获错误！&lt;/p&gt;
&lt;figure class=&quot;highlight coffee&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(robot)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 输入 error test，会触发一个错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.hear &lt;span class=&quot;regexp&quot;&gt;/error test/i&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(res)&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    JSON.parse([])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 触发错误之后会捕获到错误，然后打印 Unexpected Error!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  robot.error (err, res) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    robot.logger.error &lt;span class=&quot;string&quot;&gt;&quot;Unexpected Error!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; res?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.reply &lt;span class=&quot;string&quot;&gt;&quot;Unexpected Error!!!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;其他有趣而无用的方法&quot;&gt;&lt;a href=&quot;#其他有趣而无用的方法&quot; class=&quot;headerlink&quot; title=&quot;其他有趣而无用的方法&quot;&gt;&lt;/a&gt;其他有趣而无用的方法&lt;/h2&gt;&lt;p&gt;最后提一下，hubot 自带一些有趣而无用的方法，这些方法很少用，有些需要 adapter 支持才能正常使用。&lt;/p&gt;
&lt;h3 id=&quot;robot-topic&quot;&gt;&lt;a href=&quot;#robot-topic&quot; class=&quot;headerlink&quot; title=&quot;robot.topic&quot;&gt;&lt;/a&gt;robot.topic&lt;/h3&gt;&lt;h3 id=&quot;robot-enter&quot;&gt;&lt;a href=&quot;#robot-enter&quot; class=&quot;headerlink&quot; title=&quot;robot.enter&quot;&gt;&lt;/a&gt;robot.enter&lt;/h3&gt;&lt;h3 id=&quot;robot-leave&quot;&gt;&lt;a href=&quot;#robot-leave&quot; class=&quot;headerlink&quot; title=&quot;robot.leave&quot;&gt;&lt;/a&gt;robot.leave&lt;/h3&gt;&lt;h3 id=&quot;res-random&quot;&gt;&lt;a href=&quot;#res-random&quot; class=&quot;headerlink&quot; title=&quot;res.random&quot;&gt;&lt;/a&gt;res.random&lt;/h3&gt;&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hubot.github.com/docs/scripting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hubot.github.com/docs/scripting/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们在上一篇中介绍了 Hubot 的简单用法，里面提到我们可以为机器人编写脚本来让它根据不同的「输入」来给出不同的「输出」。&lt;br&gt;本文将会
    
    </summary>
    
      <category term="hubot" scheme="http://scarletsky.github.io/categories/hubot/"/>
    
    
      <category term="hubot" scheme="http://scarletsky.github.io/tags/hubot/"/>
    
  </entry>
  
  <entry>
    <title>如何实现无限滚动</title>
    <link href="http://scarletsky.github.io/2016/04/20/how-to-implement-infinite-scroll/"/>
    <id>http://scarletsky.github.io/2016/04/20/how-to-implement-infinite-scroll/</id>
    <published>2016-04-20T09:14:21.000Z</published>
    <updated>2016-04-20T09:18:35.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;无限滚动对我们来说已经是很常见的功能了，具体表现为当页面滚动到某个位置时就自动加载数据，本文将探讨无限滚动的实现原理以及优化。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;我们先看看最简单的无限滚动的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fetch(path).then(res =&amp;gt; doSomeThing(res.data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;, fetchData);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面就是无限滚动最简单的例子啦~&lt;br&gt;其实就是监听 &lt;code&gt;window&lt;/code&gt; 对象的 &lt;code&gt;scroll&lt;/code&gt; 事件，然后再触发获取数据的函数~&lt;/p&gt;
&lt;p&gt;然而，上面的例子中还有很多问题，其中最大的问题就是 &lt;strong&gt;获取数据的函数(以后叫 fetch 函数)没有触发条件&lt;/strong&gt;， 我们还需要不断优化，才能在生产环境下使用。&lt;/p&gt;
&lt;h2 id=&quot;添加触发条件&quot;&gt;&lt;a href=&quot;#添加触发条件&quot; class=&quot;headerlink&quot; title=&quot;添加触发条件&quot;&gt;&lt;/a&gt;添加触发条件&lt;/h2&gt;&lt;p&gt;我们先想想，一般情况下，fetch 函数的触发条件有哪些呢 ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 fetch 过程中不能重复触发&lt;/li&gt;
&lt;li&gt;没有更多数据的时候不能再触发&lt;/li&gt;
&lt;li&gt;屏幕距离容器边缘 xxx 的时候触发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两点很好处理，只要加个 &lt;code&gt;isLoading&lt;/code&gt; 和 &lt;code&gt;isEnd&lt;/code&gt; 的变量就可以了。&lt;br&gt;添加这两个变量之后，我们的代码就变成下面的样子啦：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isLoading = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isEnd = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !isLoading &amp;amp;&amp;amp; !isEnd ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isLoading = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(path).then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      isLoading = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.data.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; isEnd = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      doSomething(res.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;, fetchData);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第三点对不熟悉 DOM 的童鞋来说就有点难度了~&lt;/p&gt;
&lt;h2 id=&quot;计算屏幕与容器边缘的距离&quot;&gt;&lt;a href=&quot;#计算屏幕与容器边缘的距离&quot; class=&quot;headerlink&quot; title=&quot;计算屏幕与容器边缘的距离&quot;&gt;&lt;/a&gt;计算屏幕与容器边缘的距离&lt;/h2&gt;&lt;p&gt;我们以计算屏幕底部与容器底部边缘为例:&lt;/p&gt;
&lt;p&gt;如果有 api 可以直接得到元素底部与屏幕底部的距离就最好啦，可以省去麻烦，但实际上并没有这样的 api。&lt;br&gt;然而，我们可以通过浏览器提供的两个 api，计算出元素底部与屏幕底部之间的距离。&lt;/p&gt;
&lt;p&gt;第一个 api 是 &lt;code&gt;window.innerHeight&lt;/code&gt;，它返回的是屏幕（viewport）高度。&lt;br&gt;第二个 api 就是 &lt;code&gt;Element.getBoundingClientRect&lt;/code&gt; ，这个方法用来计算元素边缘与屏幕（viewport）之间的距离。&lt;br&gt;需要提醒一下，&lt;code&gt;Element.getBoundingClientRect&lt;/code&gt; 会得到这么一个类 Object 对象：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClientRect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: &lt;span class=&quot;number&quot;&gt;760&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;// 元素宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: &lt;span class=&quot;number&quot;&gt;2500&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 元素高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  top: -&lt;span class=&quot;number&quot;&gt;1352&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;// 元素上边缘与屏幕上边缘的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bottom: &lt;span class=&quot;number&quot;&gt;1239&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 元素下边缘与屏幕上边缘的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  left: &lt;span class=&quot;number&quot;&gt;760&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;// 元素左边缘与屏幕左边缘的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  right: &lt;span class=&quot;number&quot;&gt;860&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// 元素右边缘与屏幕左边缘的距离&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看看下面这图：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;     +------&amp;gt; +--------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                     document.body                      &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body.getBoundingClientRect().top                                       |&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |&lt;span class=&quot;string&quot;&gt;        +--------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt; browser                                              x &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     +------&amp;gt; +--------------------------------------------------------+ &lt;span class=&quot;variable&quot;&gt;&amp;lt;--+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        | window                                                 |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.innerHeight                                                     |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                               body.getBoundingClientRect().bottom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     |        |                                                        |    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     +------&amp;gt;&lt;/span&gt; +--------------------------------------------------------+    |&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              |&lt;span class=&quot;string&quot;&gt;                                                        &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;    &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              +--------------------------------------------------------+ &lt;span class=&quot;variable&quot;&gt;&amp;lt;--+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了这两个 api，我们很容易就可以计算出元素底部边缘与屏幕底部边缘的位置啦~&lt;/p&gt;
&lt;p&gt;我们再修改下我们的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isLoading = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isEnd = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; triggerDistance = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; distance = container.getBoundingClientRect().bottom - &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !isLoading &amp;amp;&amp;amp; !isEnd &amp;amp;&amp;amp; distance &amp;lt; triggerDistance ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isLoading = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(path).then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      isLoading = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      res.data.length === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; isEnd = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      doSomething(res.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;, fetchData);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改之后，当容器底部与屏幕底部距离小于 200 的时候，才会触发 fetch 函数，这样我们的无限滚动就更加实用啦！&lt;/p&gt;
&lt;h2 id=&quot;支持-window-以外的元素&quot;&gt;&lt;a href=&quot;#支持-window-以外的元素&quot; class=&quot;headerlink&quot; title=&quot;支持 window 以外的元素&quot;&gt;&lt;/a&gt;支持 window 以外的元素&lt;/h2&gt;&lt;p&gt;然而，并不是只有 window 才可以滚动，拥有高度的级块元素只要设置了 &lt;code&gt;overflow: scroll&lt;/code&gt; 都是可以滚动的。&lt;br&gt;我们需要再修改一下代码来让级块元素也支持无限滚动！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* do something */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;, fetchData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;container&#39;&lt;/span&gt;).addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;scroll&#39;&lt;/span&gt;, fetchData);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很简单吧！只需要为该容器元素添加一个 scroll 的事件监听器就好啦！&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;无限滚动对我们来说已经是很常见的功能了，具体表现为当页面滚动到某个位置时就自动加载数据，本文将探讨无限滚动的实现原理以及优化。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="infinite scroll" scheme="http://scarletsky.github.io/tags/infinite-scroll/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hubot 的简单用法</title>
    <link href="http://scarletsky.github.io/2016/04/03/hubot-simple-usage/"/>
    <id>http://scarletsky.github.io/2016/04/03/hubot-simple-usage/</id>
    <published>2016-04-02T16:12:49.000Z</published>
    <updated>2016-04-02T16:16:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Hubot 是 Github 的开源聊天机器人，可以用来做一些自动化任务，如部署网站，翻译语言等等。&lt;/p&gt;
&lt;p&gt;你可能会说，这些只要写个脚本就可以做到了吧？&lt;/p&gt;
&lt;p&gt;确实，但你写完脚本之后还是需要手动运行那些脚本。&lt;/p&gt;
&lt;p&gt;你有没想过其实你可以在常用的聊天软件上说 &lt;code&gt;@xxx, 部署新版本的网站&lt;/code&gt;，然后机器人就自动登录服务器，然后执行部署脚本，部署成功后告诉你 &lt;code&gt;新版本的网站已经部署成功&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;是的，如果你的聊天软件上集成了 Hubot，你就可以轻松地用它来管理一些繁琐的事情啦！&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;官方推荐我们用 yeoman + hubot 生成器来生成我们的聊天机器人，方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g yo generator-hubot&amp;#10;$ mkdir myhubot &amp;#38;&amp;#38; cd myhubot&amp;#10;$ yo hubot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回答一些基本的问题后，我们的聊天机器人就生成好啦~&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;我们的聊天机器人的执行文件是 &lt;code&gt;bin/hubot&lt;/code&gt;，我们先看看里面写什么：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat ./bin/hubot&amp;#10;&amp;#10;#!/bin/sh&amp;#10;&amp;#10;set -e&amp;#10;&amp;#10;npm install&amp;#10;export PATH=&amp;#34;node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH&amp;#34;&amp;#10;&amp;#10;exec node_modules/.bin/hubot --name &amp;#34;myhubot&amp;#34; &amp;#34;$@&amp;#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这份执行文件只是先执行 &lt;code&gt;npm install&lt;/code&gt;，然后设置环境变量，再执行 &lt;code&gt;node_modules/.bin/hubot&lt;/code&gt; 而已，没什么神秘的。&lt;/p&gt;
&lt;p&gt;我们试试运行一下这份可执行文件：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./bin/hubot&amp;#10;myhubot&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到了一个类似 shell 的东东！试试随便输入一些东西：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myhubot&amp;#62; hello&amp;#10;myhubot&amp;#62; world&amp;#10;myhubot&amp;#62; how are you?&amp;#10;myhubot&amp;#62; can you hear me?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们发现无论我们输入什么，我们的机器人都没有反应，是不是坏掉了？&lt;br&gt;其实并不是这样的，它没反应是因为我们没有对「输入」的处理，如果我们输入一些特定的「输入」，它就会有反应啦！&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myhubot&amp;#62; myhubot ping&amp;#10;myhubot&amp;#62; PONG&amp;#10;&amp;#10;myhubot&amp;#62; myhubot pug me&amp;#10;myhubot&amp;#62; http://28.media.tumblr.com/tumblr_locinzasB91qzj3syo1_500.jpg&amp;#10;&amp;#10;myhubot&amp;#62; myhubot help&amp;#10;myhubot&amp;#62; myhubot adapter - Reply with the adapter&amp;#10;myhubot animate me &amp;#60;query&amp;#62; - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.&amp;#10;myhubot echo &amp;#60;text&amp;#62; - Reply back with &amp;#60;text&amp;#62;&amp;#10;myhubot help - Displays all of the help commands that Hubot knows about.&amp;#10;myhubot help &amp;#60;query&amp;#62; - Displays all help commands that match &amp;#60;query&amp;#62;.&amp;#10;myhubot image me &amp;#60;query&amp;#62; - The Original. Queries Google Images for &amp;#60;query&amp;#62; and returns a random top result.&amp;#10;myhubot map me &amp;#60;query&amp;#62; - Returns a map view of the area returned by `query`.&amp;#10;myhubot mustache me &amp;#60;url|query&amp;#62; - Adds a mustache to the specified URL or query result.&amp;#10;myhubot ping - Reply with pong&amp;#10;myhubot pug bomb N - get N pugs&amp;#10;myhubot pug me - Receive a pug&amp;#10;myhubot the rules - Make sure hubot still knows the rules.&amp;#10;myhubot time - Reply with current time&amp;#10;myhubot translate me &amp;#60;phrase&amp;#62; - Searches for a translation for the &amp;#60;phrase&amp;#62; and then prints that bad boy out.&amp;#10;myhubot translate me from &amp;#60;source&amp;#62; into &amp;#60;target&amp;#62; &amp;#60;phrase&amp;#62; - Translates &amp;#60;phrase&amp;#62; from &amp;#60;source&amp;#62; into &amp;#60;target&amp;#62;. Both &amp;#60;source&amp;#62; and &amp;#60;target&amp;#62; are optional&amp;#10;ship it - Display a motivation squirrel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到了吧！如果我们输入了特定的「输入」，机器人就会有反应啦！&lt;/p&gt;
&lt;p&gt;当我们输入 &lt;code&gt;myhubot help&lt;/code&gt; 的时候，返回的东东其实就是预定义的「输入」，这些预定义的「输入」只在 shell adapter 下有效哦！&lt;/p&gt;
&lt;h2 id=&quot;Adapter&quot;&gt;&lt;a href=&quot;#Adapter&quot; class=&quot;headerlink&quot; title=&quot;Adapter&quot;&gt;&lt;/a&gt;Adapter&lt;/h2&gt;&lt;p&gt;什么是 shell adapter ？ 我们运行 &lt;code&gt;./bin/hubot&lt;/code&gt; 时默认的 adapter 就是 shell adapter。&lt;/p&gt;
&lt;p&gt;什么是 adapter ？ 所谓的 adapter 其实是一些让机器人接收输入的接口。 &lt;/p&gt;
&lt;p&gt;刚才提到，shell adapter 是默认情况下的 adapter，主要是用来测试 adapter 是否生效。说白了，其实就是没什么用！&lt;/p&gt;
&lt;p&gt;觉得很坑爹是吧？说好的让我们的聊天软件整合我们的机器人呢？&lt;/p&gt;
&lt;p&gt;实际上社区已经为我们提供了各种各样的 adapter，我们只要下载就可以用啦！具体请看看 &lt;a href=&quot;https://hubot.github.com/docs/adapters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hubot.github.com/docs/adapters/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么我们如何指定用某个 adapter 呢？很简单啦，只要启动机器人的时候带上 &lt;code&gt;-a&lt;/code&gt; 参数就好了。&lt;br&gt;譬如如果我们想让机器人整合到 telegram，我们只要执行下面的命令就可以了：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save hubot-telegram&amp;#10;$ ./bin/hubot -a telegram&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然我们还需要设置一下，这些设置会根据不同的 adapter 而有所不同，具体请看对应的文档！&lt;/p&gt;
&lt;p&gt;如果你所用的聊天软件并不在社区的支持列表中，又想把整合 Hubot 的话，可以自己写 adapter，文档在这里：&lt;a href=&quot;https://hubot.github.com/docs/adapters/development/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hubot.github.com/docs/adapters/development/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Scripts&quot;&gt;&lt;a href=&quot;#Scripts&quot; class=&quot;headerlink&quot; title=&quot;Scripts&quot;&gt;&lt;/a&gt;Scripts&lt;/h2&gt;&lt;p&gt;我们一直说 Hubot 是聊天机器人，机器人最基本的是根据不同的「输入」给出不同的「输出」。&lt;br&gt;在 Hubot 应该怎么处理不同「输入」，给出不同的「输出」呢？&lt;br&gt;答案就是用 Scripts 啦！&lt;/p&gt;
&lt;p&gt;有没有发现我们机器人的目录下有个 &lt;code&gt;scripts/&lt;/code&gt; 文件夹？我们可以在这个文件夹下添加各种脚本文件，根据不同的「输入」给出不同的「输出」。&lt;br&gt;在我们启动 Hubot 的时候，它会加载 &lt;code&gt;scripts/&lt;/code&gt; 文件夹下的脚本，赋予 Hubot 强大的交互能力！&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;scripts/&lt;/code&gt; 下的脚本必须是 &lt;code&gt;.coffee&lt;/code&gt; 或者 &lt;code&gt;.js&lt;/code&gt; 格式的，而且必须暴露一个接受 robot 参数的函数！&lt;br&gt;我们还是先打开 &lt;code&gt;scripts/example.coffee&lt;/code&gt; 看看吧！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// coffee&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = (robot) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;robot&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个函数里面，我们可以利用 &lt;code&gt;robot.hear&lt;/code&gt;、&lt;code&gt;robot.response&lt;/code&gt;、&lt;code&gt;robot.send&lt;/code&gt;、&lt;code&gt;robot.reply&lt;/code&gt; 等 api 为不同的「输入」给出不同的「输出」！&lt;br&gt;我们还可以用 &lt;code&gt;robot.http(url).get()&lt;/code&gt; 等方法来发出 http 请求！这样我们的机器人就可以有更强大的交互能力了！&lt;/p&gt;
&lt;p&gt;想知道更多 api 的用法的话，可以参考文档：&lt;a href=&quot;https://hubot.github.com/docs/scripting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hubot.github.com/docs/scripting/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;&gt;&lt;/a&gt;写在最后&lt;/h2&gt;&lt;p&gt;Hubot 真的是一个简单易用的聊天机器人，我们可以把它整合到我们的聊天软件中，让那些简单但繁琐的任务自动化起来，提高我们的工作效率！&lt;br&gt;最后强烈推荐各位同学去读一下 Hubot 的源码，简单易懂，之后会对 Hubot 有更深刻的认识！&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hubot.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hubot.github.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Hubot 是 Github 的开源聊天机器人，可以用来做一些自动化任务，如部署网站，翻译语言等等。&lt;/p&gt;
&lt;p&gt;你可能会说，这些只要写个
    
    </summary>
    
      <category term="hubot" scheme="http://scarletsky.github.io/categories/hubot/"/>
    
    
      <category term="hubot" scheme="http://scarletsky.github.io/tags/hubot/"/>
    
  </entry>
  
  <entry>
    <title>Lodash 中 assign，extend 和 merge 的区别</title>
    <link href="http://scarletsky.github.io/2016/04/02/assign-vs-extend-vs-merge-in-lodash/"/>
    <id>http://scarletsky.github.io/2016/04/02/assign-vs-extend-vs-merge-in-lodash/</id>
    <published>2016-04-02T02:51:19.000Z</published>
    <updated>2016-04-02T05:17:35.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们经常在别人的代码中看见 &lt;code&gt;assign&lt;/code&gt;，&lt;code&gt;extend&lt;/code&gt;，&lt;code&gt;merge&lt;/code&gt; 函数，这三个函数用起来很相似，都是合并源对象的属性到目标对象中。&lt;/p&gt;
&lt;p&gt;既然都是合并对象，为什么还分三个不同的函数呢？它们之间到底有什么区别呢？&lt;/p&gt;
&lt;h2 id=&quot;assign-object-sources&quot;&gt;&lt;a href=&quot;#assign-object-sources&quot; class=&quot;headerlink&quot; title=&quot;assign(object, [sources])&quot;&gt;&lt;/a&gt;assign(object, [sources])&lt;/h2&gt;&lt;p&gt;我们先看看官方网站上面的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assigns own enumerable string keyed properties of source objects to the destination object. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把源对象(sources)的属性分配到目标对象(object)，源对象会从左往右地调用，后面对象的属性会覆盖前面的。&lt;/p&gt;
&lt;p&gt;看看下面的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assign(&amp;#123;&amp;#125;, &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, &amp;#123; b: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: 2 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 后面的 &amp;#123; a: 2 &amp;#125; 把前面的 &amp;#123; a: 1 &amp;#125; 覆盖了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assign(&amp;#123;&amp;#125;, &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, &amp;#123; b: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;, &amp;#123; a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 2, b: 2 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 观察下面两个例子，如果属性值为 object，后面的值会覆盖前面的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assign(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, d: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: &amp;#123; c: 2, d: 3 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assign(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, d: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; e: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: &amp;#123; e: 4 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `assign` 函数会忽略原型链上的属性。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.d = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assign(&amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, c: 3 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `assign` 会修改原来的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assign(test, &amp;#123; b: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: 2 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test);      &lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: 2 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;extend-object-sources&quot;&gt;&lt;a href=&quot;#extend-object-sources&quot; class=&quot;headerlink&quot; title=&quot;extend(object, [sources])&quot;&gt;&lt;/a&gt;extend(object, [sources])&lt;/h2&gt;&lt;p&gt;在 3.x 版本中，&lt;code&gt;extend&lt;/code&gt; 是 &lt;code&gt;assign&lt;/code&gt; 的别名，它们的作用是一模一样的。&lt;br&gt;在 4.x 版本中，&lt;code&gt;extend&lt;/code&gt; 是 &lt;code&gt;assignIn&lt;/code&gt; 的别名，和 &lt;code&gt;assign&lt;/code&gt; 有点区别。&lt;/p&gt;
&lt;p&gt;官方定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This method is like _.assign except that it iterates over own and inherited source properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的例子中，我们知道 &lt;code&gt;assign&lt;/code&gt; 函数不会把原型链上的属性合并到目标对象，而 &lt;code&gt;extend&lt;/code&gt; 或 &lt;code&gt;assignIn&lt;/code&gt; 函数则会！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Important !! this is Lodash 4.x !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 把源对象原型链上的属性也合并到目标对象上！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.c = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Foo.prototype.d = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extend(&amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Foo());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, c: 3, d: 4 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;merge-object-sources&quot;&gt;&lt;a href=&quot;#merge-object-sources&quot; class=&quot;headerlink&quot; title=&quot;merge(object, [sources])&quot;&gt;&lt;/a&gt;merge(object, [sources])&lt;/h2&gt;&lt;p&gt;我们看看 &lt;code&gt;merge&lt;/code&gt; 函数的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This method is like _.assign except that it recursively merges own and inherited enumerable string keyed properties of source objects into the destination object. Source properties that resolve to undefined are skipped if a destination value exists. Array and plain object properties are merged recursively.Other objects and value types are overridden by assignment. Source objects are applied from left to right. Subsequent sources overwrite property assignments of previous sources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;merge&lt;/code&gt; 也和 &lt;code&gt;assign&lt;/code&gt; 类似，不同的地方在于 &lt;code&gt;merge&lt;/code&gt; 遇到相同属性的时候，如果属性值为纯对象(plain object)或者集合(collection)时，不是用后面的属性值去覆盖前面的属性值，而是会把前后两个属性值合并。&lt;br&gt;如果源对象的属性值为 &lt;code&gt;undefined&lt;/code&gt;，则会忽略该属性。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assign(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, d: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; e: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: &amp;#123; e: 4 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;merge(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, d: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; b: &amp;#123; e: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: 1, b: &amp;#123; c: 2, d: 3, e: 4 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 合并集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; users = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;: [&amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;barney&#39;&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;fred&#39;&lt;/span&gt; &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ages = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;: [&amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; &amp;#125;, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;merge(&amp;#123;&amp;#125;, users, ages)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; data: [ &amp;#123; user: &#39;barney&#39;, age: 36 &amp;#125;, &amp;#123; user: &#39;fred&#39;, age: 40 &amp;#125; ] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// merge 函数会修改原来的对象！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;merge(users, ages)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(users) &lt;span class=&quot;comment&quot;&gt;// &amp;#123; data: [ &amp;#123; user: &#39;barney&#39;, age: 36 &amp;#125;, &amp;#123; user: &#39;fred&#39;, age: 40 &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;h3 id=&quot;相同之处&quot;&gt;&lt;a href=&quot;#相同之处&quot; class=&quot;headerlink&quot; title=&quot;相同之处&quot;&gt;&lt;/a&gt;相同之处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;都可以用来合并对象&lt;/li&gt;
&lt;li&gt;都会修改原来的对象 (如果原来的对象是作为函数的第一个参数的话)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不同之处&quot;&gt;&lt;a href=&quot;#不同之处&quot; class=&quot;headerlink&quot; title=&quot;不同之处&quot;&gt;&lt;/a&gt;不同之处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;assign&lt;/code&gt; 函数不会处理原型链上的属性，也不会合并相同的属性，而是用后面的属性值覆盖前面的属性值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.x 版本中和 &lt;code&gt;assign&lt;/code&gt; 一样&lt;/li&gt;
&lt;li&gt;4.x 版本中会合并原型链上的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;merge&lt;/code&gt; 遇到相同属性名的时候，如果属性值是纯对象或集合的时候，会合并属性值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lodash.com/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://lodash.com/docs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19965844/lodash-difference-between-extend-assign-and-merge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/19965844/lodash-difference-between-extend-assign-and-merge&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们经常在别人的代码中看见 &lt;code&gt;assign&lt;/code&gt;，&lt;code&gt;extend&lt;/code&gt;，&lt;code&gt;merge&lt;/cod
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>type vs data vs newtype in haskell</title>
    <link href="http://scarletsky.github.io/2016/03/15/type-vs-data-vs-newtype-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/03/15/type-vs-data-vs-newtype-in-haskell/</id>
    <published>2016-03-15T10:09:56.000Z</published>
    <updated>2016-03-20T05:46:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;type&quot;&gt;&lt;a href=&quot;#type&quot; class=&quot;headerlink&quot; title=&quot;type&quot;&gt;&lt;/a&gt;type&lt;/h2&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 关键字用来设置类型别名，提高代码可读性。&lt;/p&gt;
&lt;p&gt;我们可以类比 shell 里面的 &lt;code&gt;alias&lt;/code&gt; 命令，它是用来设置命令别名的。譬如下面的 shell 命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; aria2-server=&lt;span class=&quot;string&quot;&gt;&quot;aria2c --conf-path ~/aria2.conf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们用 &lt;code&gt;aria2-server&lt;/code&gt; 来代替 &lt;code&gt;aria2c --conf-path ~/aria2.conf&lt;/code&gt;，它们本质上是一样的，只是一个不同的名字，方便我们输入而已。&lt;/p&gt;
&lt;p&gt;Haskell 中的 &lt;code&gt;type&lt;/code&gt; 命令也是一样，它用来设置一个 &lt;strong&gt;「已有类型」&lt;/strong&gt; 的别名。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;BookId&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;BookSummary&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;BookRecord&lt;/span&gt; = &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;BookId&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;BookSummary&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码只是为一些 &lt;strong&gt;「已有类型」&lt;/strong&gt; 设置一个别名，并没有创建新的数据类型，因此它不能使用 &lt;code&gt;deriving&lt;/code&gt; 关键字。&lt;/p&gt;
&lt;h2 id=&quot;data&quot;&gt;&lt;a href=&quot;#data&quot; class=&quot;headerlink&quot; title=&quot;data&quot;&gt;&lt;/a&gt;data&lt;/h2&gt;&lt;p&gt;&lt;code&gt;data&lt;/code&gt; 关键字用来创建新的数据类型，有「类型构造器」 和 「值构造器」，它们的名字可以是相同的，也可以是不同的。&lt;br&gt;其中，有一个以上「值构造器」的数据类型称为 「代数数据类型（algebraic data type）」。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- BookInfo 是类型构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Book 是值构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; Book 1 &quot;Hello&quot; :: BookInfo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;BookInfo&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 左边的 Book 是类型构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 右边的 Book 是值构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; Book 1 &quot;World&quot; :: Book&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Book&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Tree a 是代数数据类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- a 是类型参数，表示任意类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Empty 和 Node 都是值构造器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; Empty :: Tree a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; Node 1 (Empty) (Empty) :: Num a =&amp;gt; Tree a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; Node &quot;Hello&quot; Empty (Node &quot;World&quot; (Empty) (Empty)) :: Tree [Char]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;Empty&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt; a &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Tree&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt; 支持用 Record Syntax 来创建数据类型，用 Record Syntax 生成数据类型的同时会生成一些 &lt;code&gt;getter&lt;/code&gt; 函数。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;age&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;height&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 自动生成下面这些 getter 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- name :: Person -&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- age :: Person -&amp;gt; Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- height :: Person -&amp;gt; Float&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 通过如下方式来创建数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- let p = Person &amp;#123; name=&quot;John&quot;, age=30, height=1.8 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 使用 getter 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- name p -&amp;gt; &quot;John&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- age p -&amp;gt; 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- height p -&amp;gt; 1.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;newtype&quot;&gt;&lt;a href=&quot;#newtype&quot; class=&quot;headerlink&quot; title=&quot;newtype&quot;&gt;&lt;/a&gt;newtype&lt;/h2&gt;&lt;p&gt;&lt;code&gt;newtype&lt;/code&gt; 关键字和 &lt;code&gt;data&lt;/code&gt; 类似，都是用来创建新的数据类型，但 &lt;code&gt;newtype&lt;/code&gt; 的值构造器限制在一个，而 &lt;code&gt;data&lt;/code&gt; 没有限制值构造器的数量。&lt;br&gt;另外，&lt;code&gt;newtype&lt;/code&gt; 速度比 &lt;code&gt;data&lt;/code&gt; 要快。&lt;/p&gt;
&lt;p&gt;为什么既然有了 &lt;code&gt;data&lt;/code&gt; 还要有 &lt;code&gt;newtype&lt;/code&gt; ？ 先看下面这个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), (*&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)] &amp;lt;*&amp;gt; [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 结果是 [4, 5, 6, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 但我希望的结果是 [4, 9]，该怎样做 ？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中，因为 &lt;code&gt;[]&lt;/code&gt; 已经是 &lt;code&gt;Applicative&lt;/code&gt; 的实例了，也就是说它已经实现了自己的 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 方法了。&lt;br&gt;如果不重新实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 方法，我们是没有办法得到 &lt;code&gt;[4, 9]&lt;/code&gt; 这个结果的。&lt;/p&gt;
&lt;p&gt;但怎样才能既不改动原有的 &lt;code&gt;[]&lt;/code&gt;，又可以重新实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 方法呢 ？&lt;br&gt;答案就是用 &lt;code&gt;newtype&lt;/code&gt; 把 &lt;code&gt;[]&lt;/code&gt; 封装成一个新的类型，然后让这个新的类型成为 &lt;code&gt;Applicative&lt;/code&gt; 的实例啦~&lt;br&gt;我们来试试：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;&amp;#123; &lt;span class=&quot;title&quot;&gt;getZipList&lt;/span&gt; :: [&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;] &amp;#125;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 要让 ZipList 成为 Applicative 的实例，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 必须先让 ZipList 成为 Functor 的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmap f xs = undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure x = undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; fs &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; xs = &lt;span class=&quot;type&quot;&gt;ZipList&lt;/span&gt; (zipWith id fs xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; getZipList $ ZipList [(+2), (*3)] &amp;lt;*&amp;gt; ZipList [2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&amp;gt; [4, 9]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 用来为一个已有类型声明别名。&lt;br&gt;&lt;code&gt;data&lt;/code&gt; 用来定义新的数据类型，可以有任意个值构造器。&lt;br&gt;&lt;code&gt;newtype&lt;/code&gt; 用来封装已有的数据类型，只能有一个值构造器，速度比 &lt;code&gt;data&lt;/code&gt; 快。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://learnyoua.haskell.sg/content/zh-cn/ch08/build-our-own-type-and-typeclass.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build Our Own Type and Typeclss&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicative Functors and Monoids&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cnhaskell.com/chp/3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Defining types, streamlining functions&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cnhaskell.com/chp/6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using typeclasses&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;type&quot;&gt;&lt;a href=&quot;#type&quot; class=&quot;headerlink&quot; title=&quot;type&quot;&gt;&lt;/a&gt;type&lt;/h2&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 关键字用来设置类型别名，提高代码可读性。&lt;/p&gt;
&lt;p&gt;我们可以类比 shell 里面的
    
    </summary>
    
      <category term="haskell" scheme="http://scarletsky.github.io/categories/haskell/"/>
    
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>What is applicative in haskell ?</title>
    <link href="http://scarletsky.github.io/2016/03/07/what-is-applicative-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/03/07/what-is-applicative-in-haskell/</id>
    <published>2016-03-07T03:52:28.000Z</published>
    <updated>2016-03-15T10:13:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h2&gt;&lt;p&gt;什么是 &lt;code&gt;Applicative&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Applicative 是加强版的 Functor，是一个类型类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加强版的 &lt;code&gt;Functor&lt;/code&gt; 是什么意思 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还记得 Functor 的限制吗？&lt;br&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 只接受一个参数。&lt;br&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 不能带有上下文 (换句话说只能是 &lt;code&gt;(+42)&lt;/code&gt; 不能是 &lt;code&gt;Just (+42)&lt;/code&gt;)。&lt;br&gt;所谓的加强版的 Functor 就没有这些限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们先看看 Applicative 的声明吧:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure :: a -&amp;gt; f a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;*&amp;gt; :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你能从 Applicative 的声明中看出什么吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Applicative&lt;/code&gt; 是 &lt;code&gt;Functor&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，所谓加强版的 Functor，它首先就是一个 Functor，外加一些额外的功能嘛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;pure&lt;/code&gt; 有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把一个值变成一个 Applicative Functor 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 呢 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;和 fmap (也就是 &amp;lt;$&amp;gt;) 一起看吧。&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;$&amp;gt; ::   (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;*&amp;gt; :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 传进的是普通的函数，而 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 传进的是一个包装过的函数 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，这就是 Applicative 和 Functor 的区别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有没有简单易懂的例子 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先看看下面几个例子吧。&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; (+&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;) &amp;lt;$&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; (+&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;) &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; pure (+&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;) &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;能看出什么吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包装过的函数和普通函数一样，都可以接受包装过的值作为参数，并返回正确的结果？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正确！&lt;br&gt;我们再看看下面两个例子:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; (+) &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; pure (+) &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;能看出什么吗 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;包装过的函数可以接受多个参数了 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的！&lt;br&gt;Applicative 就是通过接受一个带有上下文的函数来突破 Functor 的限制的。&lt;br&gt;我们先凭直觉来用一下 Applicative 吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;小试&quot;&gt;&lt;a href=&quot;#小试&quot; class=&quot;headerlink&quot; title=&quot;小试&quot;&gt;&lt;/a&gt;小试&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Just (++) &amp;lt;*&amp;gt; Just &amp;quot;Hello&amp;quot; &amp;lt;*&amp;gt; Just &amp;quot; World&amp;quot;&lt;/code&gt; 的结果是 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just “Hello World”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;(++) &amp;lt;$&amp;gt; Just &amp;quot;Hello &amp;quot; &amp;lt;*&amp;gt; Just &amp;quot;Haskell~&amp;quot;&lt;/code&gt; 的结果是 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just “Hello Haskell~”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;(++) &amp;lt;$&amp;gt; Just 42 &amp;lt;*&amp;gt; Nothing&lt;/code&gt; 的结果是 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nothing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;[(*0), (+100), (^2)] &amp;lt;*&amp;gt; [1, 2, 3]&lt;/code&gt; 的结果是 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[0,0,0,101,102,103,1,4,9]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么不是 &lt;code&gt;[0, 102, 9]&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为列表是 Applicative 的实例，它实现了自己的 &amp;lt;*&amp;gt; 方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以其实 &lt;code&gt;Maybe&lt;/code&gt; 也是 &lt;code&gt;Applicative&lt;/code&gt; 的实例 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; 是怎么实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 的 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下所示:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure          = &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; f  &amp;lt;*&amp;gt; m = fmap f m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt; &amp;lt;*&amp;gt; _ = &lt;span class=&quot;type&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在可以试试理解 &amp;lt;*&amp;gt; 是如何应用在 Maybe 中的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Just (+) &amp;lt;*&amp;gt; Just 3&lt;/code&gt; 的结果是 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just (+3)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以 &lt;code&gt;Just (+) &amp;lt;*&amp;gt; Just 3 &amp;lt;*&amp;gt; Just 8&lt;/code&gt; 是 &lt;code&gt;Just 11&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那列表是怎么实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 的 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下所示:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; [] &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure x = [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs &amp;lt;*&amp;gt; xs = [f x | f &amp;lt;- fs, x &amp;lt;- xs]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表是通过「列表解析(List Comprehension)」来实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 的。&lt;br&gt;其中的 fs 可以看成是一个由函数组成的列表，如 [(+1), (*2), (^3)]&lt;br&gt;整个过程可以看作 &lt;code&gt;concatMap (\f -&amp;gt; map f xs) fs&lt;/code&gt; 的另一个写法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有哪些是 &lt;code&gt;Applicative&lt;/code&gt; 的实例 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt;, &lt;code&gt;(-&amp;gt;) r&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt; 怎么实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看下面的代码:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure = return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a &amp;lt;*&amp;gt; b = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f &amp;lt;- a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x &amp;lt;- b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (f x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不太懂，有没有具体的例子 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面有个简单易懂的例子:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;myAction&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;myAction&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a &amp;lt;- getLine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b &amp;lt;- getLine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return $ a ++ b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实我们可以可以写成下面这样:&lt;br&gt;&lt;code&gt;myAction = (++) &amp;lt;$&amp;gt; getLine &amp;lt;*&amp;gt; getLine&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那 &lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 又是什么 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 其实是函数，如果语法允许的话，我们写成 &lt;code&gt;r -&amp;gt;&lt;/code&gt; 也可以，但是语法只允许 &lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 这种写法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 是怎么实现 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 的 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看下面的代码:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;((-&amp;gt;)&lt;/span&gt; r) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure x = (\_ -&amp;gt; x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f &amp;lt;*&amp;gt; g = \x -&amp;gt; f x (g x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;(-&amp;gt;) r&lt;/code&gt; 的 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 实现不是太好理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确实不太好理解，它的意思是给 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 两个函数，然后生成一个新的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有具体例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里要先留意一下 pure 的实现:&lt;br&gt;&lt;code&gt;pure x = (\_ -&amp;gt; x)&lt;/code&gt;&lt;br&gt;它会包装传进的函数，返回一个新的函数。这个新函数会无视第一个传进的参数，然后返回原来的函数。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起来很绕，可以给一些例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，直接看例子会好理解一点:&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :t pure (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;pure&lt;/span&gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) :: f (a -&amp;gt; a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :t pure (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;pure&lt;/span&gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; :: a -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; pure (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到了吗 ?&lt;br&gt;&lt;code&gt;pure (+3)&lt;/code&gt; 返回的是 &lt;code&gt;(\_ -&amp;gt; (+3))&lt;/code&gt;。&lt;br&gt;&lt;code&gt;pure (+3) 2&lt;/code&gt; 返回的是 &lt;code&gt;(+3)&lt;/code&gt;。&lt;br&gt;&lt;code&gt;pure (+3) 2 4&lt;/code&gt; 其实是 &lt;code&gt;(+3) 4&lt;/code&gt; 的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK，我已经了解 &lt;code&gt;pure&lt;/code&gt; 是如何处理函数的了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好，接下来我们看 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 的实现。&lt;br&gt;看看下面的例子，我们按照定义一步一步来~&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 例子1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pure (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开 pure (+3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\_ -&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开 &amp;lt;*&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \x -&amp;gt; (\_ -&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) x (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 当 x = 5 时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; -&amp;gt; (\_ -&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 传进 5 之后的返回值如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\_ -&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 无论第一个参数是什么，它都是返回 (+3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;503&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 例子2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (+) &amp;lt;$&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开 &amp;lt;$&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (+) . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开 &amp;lt;*&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \x -&amp;gt; (+) . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) x (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 当 x = 5 时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; -&amp;gt; (+) . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; (*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (+) . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;+) &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;508&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 例子3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (\x y z -&amp;gt; [x,y,z]) &amp;lt;$&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;*&amp;gt; (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 先假设 (\x y z -&amp;gt; [x,y,z]) 为 f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f &amp;lt;$&amp;gt; (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;*&amp;gt; (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开 &amp;lt;$&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;*&amp;gt; (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;lt;*&amp;gt; (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开第一个 &amp;lt;*&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \x -&amp;gt; (f . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) x (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; x) &amp;lt;*&amp;gt; (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 展开第二个 &amp;lt;*&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \y -&amp;gt; (\x -&amp;gt; (f . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) x (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; x)) y (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 观察 (\x -&amp;gt; (f . (+3)) x (*2 x)) y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 把 y 传入函数中可以得到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \y -&amp;gt; (f . (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) y (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y) (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \y -&amp;gt; f (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; y) (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y) (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 当传入 5 作为参数时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f (+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) (*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) (/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 把 f 换回 (\x y z -&amp;gt; [x,y,z])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= [&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很有趣吧 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每次都要展开 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 很麻烦啊 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从刚才的例子中，你应该可以发现，我们从直觉上就可以知道计算过程。&lt;br&gt;试试化简一下 &lt;code&gt;f &amp;lt;$&amp;gt; g &amp;lt;*&amp;gt; h&lt;/code&gt; ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;f &amp;lt;$&amp;gt; g &amp;lt;*&amp;gt; h&lt;/code&gt; = &lt;code&gt;(\x -&amp;gt; f (g x) (h x))&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正确，再把 5 传入看看 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;f &amp;lt;$&amp;gt; g &amp;lt;*&amp;gt; h $ 5&lt;/code&gt; = &lt;code&gt;f (g 5) (h 5)&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设 f 是一个需要两个参数的函数的话，就能返回计算结果了 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以其实我们可以把 &lt;code&gt;f &amp;lt;$&amp;gt; g &amp;lt;*&amp;gt; h&lt;/code&gt; 看成是把 &lt;code&gt;g&lt;/code&gt; 和 &lt;code&gt;h&lt;/code&gt; 的结果传给 &lt;code&gt;f&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，我们从直觉上就可以知道计算过程，很有趣吧 !&lt;br&gt;顺便说下, 像 &lt;code&gt;f &amp;lt;$&amp;gt; g &amp;lt;*&amp;gt; h&lt;/code&gt; 这样的用法叫做 Applicative Style 哦 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Applicative&lt;/code&gt; 有没有和 &lt;code&gt;Functor&lt;/code&gt; 一样需要遵守的规则 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有的！其中最重要的规则是:&lt;br&gt;必须保证 &lt;code&gt;pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我应该怎么理解这个规则 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们说 &lt;code&gt;Applicative&lt;/code&gt; 是加强版的 &lt;code&gt;Functor&lt;/code&gt;，它可以应用一个带有上下文的函数到 &lt;code&gt;Functor&lt;/code&gt; 上。&lt;br&gt;我们看看之前提到的 &lt;code&gt;Applicative&lt;/code&gt; 实例 :&lt;br&gt;对于 &lt;code&gt;Maybe&lt;/code&gt; :&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  pure f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;type&quot;&gt;Just&lt;/span&gt; f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= fmap f x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;List&lt;/code&gt; :&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  pure f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= [f] &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= [f x&#39; | x&#39; &amp;lt;- x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= map f x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= fmap f x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;IO&lt;/code&gt; :&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  pure f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= return f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= return (f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= fmap f x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;(-&amp;gt;) r&lt;/code&gt; :&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  pure f &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\_ -&amp;gt; f) &amp;lt;*&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\y -&amp;gt; (\_ -&amp;gt; f) y (x y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\y -&amp;gt; f (x y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\y -&amp;gt; (f . x) y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f . x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= fmap f x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到了吧 ! 我们上面提到的 &lt;code&gt;Applicative&lt;/code&gt; 的实例全部都满足 &lt;code&gt;pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt; 哦 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有其他需要遵守的规则吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有的，分别如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pure id &amp;lt;*&amp;gt; v = v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u&lt;/code&gt;&lt;br&gt;这些规则都是可以被证明的，你可以试一试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有什么我需要知道的吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;忘了说，&lt;code&gt;Applicative&lt;/code&gt; 需要导入才可以用，它位于 &lt;code&gt;Control.Applicative&lt;/code&gt; 下。&lt;br&gt;想用的时候记得先写 &lt;code&gt;import Control.Applicative&lt;/code&gt; 哦 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt; 是加强版的 &lt;code&gt;Functor&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt; 的实例可以使用 &lt;code&gt;pure&lt;/code&gt; 和 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;我们可以用 &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 将一个普通函数应用到任意数量的 &lt;code&gt;Applicative Functor&lt;/code&gt; 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicative Functors and Monoids&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初探&quot;&gt;&lt;a href=&quot;#初探&quot; class=&quot;headerlink&quot; title=&quot;初探&quot;&gt;&lt;/a&gt;初探&lt;/h2&gt;&lt;p&gt;什么是 &lt;code&gt;Applicative&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Applicative 是加强版的 F
    
    </summary>
    
      <category term="haskell" scheme="http://scarletsky.github.io/categories/haskell/"/>
    
    
      <category term="applicative" scheme="http://scarletsky.github.io/tags/applicative/"/>
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>FlexibleInstances 和 TypeSynonymInstances 编译指令的区别</title>
    <link href="http://scarletsky.github.io/2016/02/28/flexible-instances-vs-type-synonym-instances-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/28/flexible-instances-vs-type-synonym-instances-in-haskell/</id>
    <published>2016-02-28T14:31:21.000Z</published>
    <updated>2016-02-29T04:22:08.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;FlexibleInstances&quot;&gt;&lt;a href=&quot;#FlexibleInstances&quot; class=&quot;headerlink&quot; title=&quot;FlexibleInstances&quot;&gt;&lt;/a&gt;FlexibleInstances&lt;/h2&gt;&lt;p&gt;先看看下面这个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Learning.hs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; a a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun :: a -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的定义看起来是没有问题的，因为不需要任何编译指令就能通过编译了。&lt;br&gt;我们可以运行看看：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :l &lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;type&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;             ( &lt;span class=&quot;type&quot;&gt;Test&lt;/span&gt;.hs, interpreted )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Ok&lt;/span&gt;, modules loaded: &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) :: &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; myFun (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) :: &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但如果我们需要为 &lt;code&gt;Vector a&lt;/code&gt; 不同的类型参数实现不同的 &lt;code&gt;myFun&lt;/code&gt; 的话呢？&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们再看看编译时会发生什么？&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; :r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;type&quot;&gt;Compiling&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Main&lt;/span&gt;             ( &lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs, interpreted )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Learning&lt;/span&gt;.hs:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Illegal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; declaration for ‘&lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (&lt;span class=&quot;type&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; types must be &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the form (&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; a1 ... an)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a1 ... an are *distinct &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; variables*,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           and each &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; variable appears at most once in the instance head.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;FlexibleInstances&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; you want to disable this.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;In&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; declaration for ‘&lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Failed&lt;/span&gt;, modules loaded: none.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译失败！为什么会编译失败呢？&lt;/p&gt;
&lt;p&gt;因为通常情况下，我们不能给多态类型（polymorphic type）的特化版本（specialized version）写类型类实例。&lt;br&gt;在这个例子中，&lt;code&gt;Vector Int&lt;/code&gt; 和 &lt;code&gt;Vector Double&lt;/code&gt; 就是 &lt;code&gt;Vector a&lt;/code&gt; 的特化版本。&lt;br&gt;如果我们需要为这些特化版本写类型类实例的话，我们就需要开启 &lt;code&gt;FlexibleInstances&lt;/code&gt; 编译指令来取消这个限制。&lt;/p&gt;
&lt;h2 id=&quot;TypeSynonymInstances&quot;&gt;&lt;a href=&quot;#TypeSynonymInstances&quot; class=&quot;headerlink&quot; title=&quot;TypeSynonymInstances&quot;&gt;&lt;/a&gt;TypeSynonymInstances&lt;/h2&gt;&lt;p&gt;理解了上面的 &lt;code&gt;FlexibleInstances&lt;/code&gt; 后，&lt;code&gt;TypeSynonymInstances&lt;/code&gt; 就容易理解了。&lt;/p&gt;
&lt;p&gt;如果我需要为 &lt;code&gt;Vector Int&lt;/code&gt; 添加一个别名，然后让这个别名成为 MyClass 类型类的实例，我们就会需要用到 &lt;code&gt;TypeSynonymInstances&lt;/code&gt; 编译指令了。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VectorInt&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VectorInt&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFun = undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认情况下，ghc 编译上面的代码时会报错，原因是 Haskell 98 并不支持这种语法。&lt;br&gt;要让 ghc 成功编译上面的代码，我们就需要开启 &lt;code&gt;TypeSynonymInstances&lt;/code&gt; 这个编译指令了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://rwh.readthedocs.org/en/latest/chp/6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rwh.readthedocs.org/en/latest/chp/6.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://book.realworldhaskell.org/read/using-typeclasses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://book.realworldhaskell.org/read/using-typeclasses.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FlexibleInstances&quot;&gt;&lt;a href=&quot;#FlexibleInstances&quot; class=&quot;headerlink&quot; title=&quot;FlexibleInstances&quot;&gt;&lt;/a&gt;FlexibleInstances&lt;/h2&gt;&lt;p&gt;先看看下面这个简单的
    
    </summary>
    
      <category term="haskell" scheme="http://scarletsky.github.io/categories/haskell/"/>
    
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>What is functor in Haskell ?</title>
    <link href="http://scarletsky.github.io/2016/02/09/what-is-functor-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/09/what-is-functor-in-haskell/</id>
    <published>2016-02-09T14:50:13.000Z</published>
    <updated>2016-03-01T06:52:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Functor-简介&quot;&gt;&lt;a href=&quot;#Functor-简介&quot; class=&quot;headerlink&quot; title=&quot;Functor 简介&quot;&gt;&lt;/a&gt;Functor 简介&lt;/h2&gt;&lt;p&gt;什么是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你可以认为 Functor 是一种数据类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以对 Functor 使用 &lt;code&gt;fmap&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是什么东西 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是一个函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 是函数的话，那它的类型签名是什么 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我应该怎么看这个类型签名 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它接受一个函数和一个 Functor 类型作为参数，然后返回另一个 Functor 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 有什么用 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似于 &lt;code&gt;map&lt;/code&gt;&lt;br&gt;&lt;code&gt;map (+1) [1,2,3,4,5]  -- 返回 [2,3,4,5,6]&lt;/code&gt;&lt;br&gt;&lt;code&gt;fmap (+1) [1,2,3,4,5] -- 返回 [2,3,4,5,6]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以列表是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，List 是 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么列表是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为列表实现了 &lt;code&gt;fmap&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; [] &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap = map&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现了 &lt;code&gt;fmap&lt;/code&gt; 的数据类型都是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不一定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除了要实现 &lt;code&gt;fmap&lt;/code&gt; 之外，还需要满足一些条件才能成为 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;满足什么条件 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;必须保证 &lt;code&gt;fmap id = id&lt;/code&gt;，也就是说 &lt;code&gt;fmap id xs&lt;/code&gt; 和 &lt;code&gt;id xs&lt;/code&gt; 必须返回相同的值。&lt;/li&gt;
&lt;li&gt;必须是可组合的，两个 &lt;code&gt;fmap&lt;/code&gt; 组合使用的结果应该和两个函数组合起来再用 &lt;code&gt;fmap&lt;/code&gt; 的结果相同。&lt;br&gt;也就是说 &lt;code&gt;fmap f . fmap g&lt;/code&gt; 必须等于 &lt;code&gt;fmap (f . g)&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 &lt;code&gt;fmap id = id&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为&lt;br&gt;&lt;code&gt;id :: a -&amp;gt; a&lt;/code&gt;&lt;br&gt;&lt;code&gt;fmap id :: T(a) -&amp;gt; T(a)&lt;/code&gt;&lt;br&gt;令 &lt;code&gt;T(a) = a&lt;/code&gt;&lt;br&gt;即 &lt;code&gt;fmap id :: a -&amp;gt; a&lt;/code&gt;&lt;br&gt;所以 &lt;code&gt;fmap id = id&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以条件一是什么意思 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意思是 &lt;code&gt;fmap&lt;/code&gt; 只能对值调用 &lt;code&gt;f&lt;/code&gt;，不能做额外的事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有具体例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看看这个经典的自定义数据类型，C表示计数器：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CMaybe&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CMaybe&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;          = &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; counter x) = &lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; (counter + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) (f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ghci&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;ha&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ho&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hoha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;he&quot;&lt;/span&gt;) (fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;ha&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ho&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hohahe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap (++ &lt;span class=&quot;string&quot;&gt;&quot;blah&quot;&lt;/span&gt;) &lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CNothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;fmap&lt;/code&gt; 除了对值调用 &lt;code&gt;f&lt;/code&gt; 之外，还对 &lt;code&gt;counter&lt;/code&gt; 加一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这有什么问题吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再看看 &lt;code&gt;fmap id&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; fmap id (&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ghci&lt;/span&gt;&amp;gt; id (&lt;span class=&quot;type&quot;&gt;Cjust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;CJust&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看出问题了吗 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap id&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 返回的结果不相等 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，所以即便 &lt;code&gt;CMaybe a&lt;/code&gt; 实现了 &lt;code&gt;fmap&lt;/code&gt;，但它也不是 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt; ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设&lt;br&gt;&lt;code&gt;f :: a -&amp;gt; b&lt;/code&gt;, &lt;code&gt;g :: b -&amp;gt; c&lt;/code&gt;&lt;br&gt;那么&lt;br&gt;&lt;code&gt;f . g :: a -&amp;gt; c&lt;/code&gt;&lt;br&gt;即&lt;br&gt;&lt;code&gt;fmap (f . g) = T(a) -&amp;gt; T(c)&lt;/code&gt;&lt;br&gt;又因为&lt;br&gt;&lt;code&gt;fmap f = T(a) -&amp;gt; T(b)&lt;/code&gt;, &lt;code&gt;fmap g = T(b) -&amp;gt; T(c)&lt;/code&gt;&lt;br&gt;所以&lt;br&gt;&lt;code&gt;fmap f . fmap g = T(a) -&amp;gt; T(c)&lt;/code&gt;&lt;br&gt;即 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;条件二有点像乘法分配律。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。&lt;br&gt;乘法分配律是 &lt;code&gt;(a + b) x c = a x c + b x c&lt;/code&gt;。&lt;br&gt;而条件二是 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;条件二有具体例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以类比函数，因为函数本身也是 Functor，所以函数会满足&lt;strong&gt;可组合&lt;/strong&gt;这个条件。&lt;br&gt;而实际应用中，我们也经常使用到函数组合这个特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现了 &lt;code&gt;fmap&lt;/code&gt; ，同时满足两个条件的数据类型就是 Functor 吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不，还有一个规则，就是该数据类型要有一个类型参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能举个例子吗 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经知道 List 是一个 Functor，先看看 List 的定义：&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; [] a = [] | a : [a]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表有一个类型参数 a，表示一个列表中可以包含相同类型的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 只能有一个类型参数吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，我们可以通过其他方法让多于一个类型参数的数据类型都能成为 Functor 的实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么手段 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要先知道怎么定义一个 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;自定义-Functor&quot;&gt;&lt;a href=&quot;#自定义-Functor&quot; class=&quot;headerlink&quot; title=&quot;自定义 Functor&quot;&gt;&lt;/a&gt;自定义 Functor&lt;/h2&gt;&lt;p&gt;我应该怎么自定义 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先定义一个数据类型，再让该类型成为 Functor 的实例。&lt;br&gt;&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor&lt;/span&gt; a = &lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; x) = &lt;span class=&quot;type&quot;&gt;Data&lt;/span&gt; (f x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，我们定义的 MyFunctor 就是一个 Functor 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚才提到的让多于一个类型参数的数据类型成为 Functor 实例的方法是？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用 Haskell 中不全调用的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以给个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyFunctor2&lt;/span&gt; a b = &lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; a b &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;MyFunctor2&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap f (&lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; x y) = &lt;span class=&quot;type&quot;&gt;Data2&lt;/span&gt; x (f y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Haskell 中，我们可以利用 Haskell 不全调用的特性，把 MyFunctor2 a 当成一个整体，这样就相当于只有 b 一个类型参数了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;真-·-Functor&quot;&gt;&lt;a href=&quot;#真-·-Functor&quot; class=&quot;headerlink&quot; title=&quot;真 · Functor&quot;&gt;&lt;/a&gt;真 · Functor&lt;/h2&gt;&lt;p&gt;我从上面看到，Functor 是一个类型类？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。事实上，&lt;strong&gt;Functor 是一个类型类，表示满足一些条件的数据类型。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;满足上面提到的条件？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有哪些常见的 Functor ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;等等。&lt;br&gt;你可以在 ghci 中输入 &lt;code&gt;:i Functor&lt;/code&gt; 来查看更多预定义的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些 Functor 有什么特点？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它们都带有上下文：即可以表示有值，也可以表示空值。&lt;br&gt;[] 表示空值，[a] 表示有值；&lt;br&gt;Nothing 表示空值，Just a表示有值；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样有什么好处吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好处是显然易见的。考虑下下面的伪代码：&lt;br&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;post = Posts.find_by_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; post.title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为什么这段伪代码需要判断 post 是否为空？因为 post 没有上下文环境，不能表示空值。&lt;br&gt;如果 post 有上下文环境 (也就是 post 可以表示空值)，那么我们的代码就可以直接写成：&lt;br&gt;&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;post = Posts.find_by_id(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; post.title&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，如果一个值可以带有上下文环境的话，我们的代码就可以写的非常简洁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把刚才的伪代码写成 Haskell 代码 ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap (getPostTitle) (findPosts 1)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;if else&lt;/code&gt; 不见了？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，这里假设 post 是一个 Functor，它可以表示带有空值的情况。所以 &lt;code&gt;if else&lt;/code&gt; 就不需要了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那 &lt;code&gt;fmap&lt;/code&gt; 呢？ 它事实上是什么东西？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 确确实实是一个函数，它知道怎么把传进的函数应用到 Functor 中，并返回一个新的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 对 Functor 调用函数的过程发生了什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看下面两张图 (图出自 &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;)：&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/2386165/12949440/c8753e16-d042-11e5-84ff-b47753d65c52.png&quot; alt=&quot;fmap_just&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/2386165/12949441/c87a69b8-d042-11e5-80d6-2ee458e13e37.png&quot; alt=&quot;fmap_nothing&quot;&gt;&lt;br&gt;实际上，&lt;code&gt;fmap&lt;/code&gt; 先取出 Functor 中的值，然后把值传进函数中，再把函数的返回值放回到 Functor 中，最后返回新的 Functor。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functor 有什么限制？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 只接受一个参数。&lt;br&gt;&lt;code&gt;fmap f x&lt;/code&gt; 中的 &lt;code&gt;f&lt;/code&gt; 不能带有上下文 (换句话说只能是 (+42) 不能是 &lt;code&gt;Just (+42)&lt;/code&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于 Functor 的知识，还有什么我是需要知道的 ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fmap&lt;/code&gt; 可以中缀调用，即 &lt;code&gt;f `fmap` xs&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 是 &lt;code&gt;fmap&lt;/code&gt; 的别名，一般用于中缀调用，即 &lt;code&gt;f &amp;lt;$&amp;gt; xs&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Functor 是类型类，只要满足以下条件的数据类型都可以成为 Functor 的实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;fmap&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;保证 &lt;code&gt;fmap id = id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;保证 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;该数据类型必须有一个以上的类型参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，强烈建议看看 &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，相当形象生动。&lt;/p&gt;
&lt;h2 id=&quot;特别感谢&quot;&gt;&lt;a href=&quot;#特别感谢&quot; class=&quot;headerlink&quot; title=&quot;特别感谢&quot;&gt;&lt;/a&gt;特别感谢&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bramblex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@bramblex&lt;/a&gt; 给出 &lt;code&gt;fmap id = id&lt;/code&gt; 和 &lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt; 的证明过程。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicative Functors and Monoids&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cnhaskell.com/chp/10.html#functor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functor 简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/2030863/in-functional-programming-what-is-a-functor&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Functor-简介&quot;&gt;&lt;a href=&quot;#Functor-简介&quot; class=&quot;headerlink&quot; title=&quot;Functor 简介&quot;&gt;&lt;/a&gt;Functor 简介&lt;/h2&gt;&lt;p&gt;什么是 Functor ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你可
    
    </summary>
    
      <category term="haskell" scheme="http://scarletsky.github.io/categories/haskell/"/>
    
    
      <category term="functor" scheme="http://scarletsky.github.io/tags/functor/"/>
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
  </entry>
  
  <entry>
    <title>(译) Haskell 中随机数的使用</title>
    <link href="http://scarletsky.github.io/2016/02/06/random-numbers-in-haskell/"/>
    <id>http://scarletsky.github.io/2016/02/06/random-numbers-in-haskell/</id>
    <published>2016-02-06T09:35:18.000Z</published>
    <updated>2016-02-29T04:27:40.000Z</updated>
    
    <content type="html">&lt;p&gt;随机数（我指的是伪随机数）是通过显式或隐式的状态来生成的。这意味着在 Haskell 中，随机数的使用（通过 &lt;code&gt;System.Random&lt;/code&gt; 库）是伴随着状态的传递的。 &lt;/p&gt;
&lt;p&gt;大部分需要获得帮助的人都有命令式编程的背景，因此，我会先用命令式的方式，然后再用函数式的方式来教大家在 Haskell 中使用随机数。&lt;/p&gt;
&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;我会生成满足以下条件的随机列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表长度是 1 到 7 &lt;/li&gt;
&lt;li&gt;列表中的每一项都是 0.0 到 1.0 之间的浮点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令式&quot;&gt;&lt;a href=&quot;#命令式&quot; class=&quot;headerlink&quot; title=&quot;命令式&quot;&gt;&lt;/a&gt;命令式&lt;/h2&gt;&lt;p&gt;在 IO monad 中有一个全局的生成器，你可以初始化它，然后获取随机数。下面有一些常用的函数：&lt;/p&gt;
&lt;h3 id=&quot;setStdGen-StdGen-gt-IO&quot;&gt;&lt;a href=&quot;#setStdGen-StdGen-gt-IO&quot; class=&quot;headerlink&quot; title=&quot;setStdGen :: StdGen -&amp;gt; IO ()&quot;&gt;&lt;/a&gt;&lt;code&gt;setStdGen :: StdGen -&amp;gt; IO ()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;初始化或者设置全局生成器，我们可以用 &lt;code&gt;mkStdGen&lt;/code&gt; 来生成随机种子。因此，有一个很傻瓜式的用法：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;setStdGen&lt;/span&gt; (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你可以用任意的 &lt;code&gt;Int&lt;/code&gt; 来替换 &lt;code&gt;42&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其实，你可以选择是否调用 &lt;code&gt;setStdGen&lt;/code&gt;，如果你不调用的话，全局的生成器还是可用的。因为在 runtime 会在启动的时候用一个任意的种子去初始化它，所以每次启动的时候，都会有一个不同的种子。&lt;/p&gt;
&lt;h3 id=&quot;randomRIO-Random-a-gt-a-a-gt-IO-a&quot;&gt;&lt;a href=&quot;#randomRIO-Random-a-gt-a-a-gt-IO-a&quot; class=&quot;headerlink&quot; title=&quot;randomRIO :: (Random a) =&amp;gt; (a,a) -&amp;gt; IO a&quot;&gt;&lt;/a&gt;&lt;code&gt;randomRIO :: (Random a) =&amp;gt; (a,a) -&amp;gt; IO a&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在给定范围随机返回一个类型为 &lt;code&gt;a&lt;/code&gt; 的值，同时全局生成器也会更新。你可以通过一个元组来指定范围。下面这个例子会返回 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;z&lt;/code&gt; 之间的随机值（包含 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;z&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt; &amp;lt;- randomRIO (&#39;a&#39;, &#39;z&#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 可以是任意类型吗？并非如此。在 Haskell 98 标准中， &lt;code&gt;Random&lt;/code&gt; 库只支持 &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Char&lt;/code&gt;,  &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;（你可以自己去扩展这个支持的范围，但这是另外一个话题了）。&lt;/p&gt;
&lt;h3 id=&quot;randomIO-Random-a-gt-IO-a&quot;&gt;&lt;a href=&quot;#randomIO-Random-a-gt-IO-a&quot; class=&quot;headerlink&quot; title=&quot;randomIO :: (Random a) =&amp;gt; IO a&quot;&gt;&lt;/a&gt;&lt;code&gt;randomIO :: (Random a) =&amp;gt; IO a&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;返回一个类型为 &lt;code&gt;a&lt;/code&gt; 的随机数（&lt;code&gt;a&lt;/code&gt; 可以是任意类型吗？看上文），全局的生成器也会更新。下面这个例子会返回一个 &lt;code&gt;Double&lt;/code&gt; 类型的随机数：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;x&lt;/span&gt; &amp;lt;- randomIO :: &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随机数返回的范围由类型决定。&lt;/p&gt;
&lt;p&gt;需要注意的是，这些都是 IO 函数，因此你只可以在 IO 函数中使用它们。换句话说，如果你写了一个要使用它们的函数，它的返回类型也会变成是 IO 函数。&lt;/p&gt;
&lt;p&gt;举个例子，上面提到的代码片段都要写在 &lt;code&gt;do block&lt;/code&gt; 中。这只是一个提醒，因为我们想要用命令式的方式来生成随机数。&lt;/p&gt;
&lt;p&gt;下面这个例子展示如何在 IO monad 中完成之前的任务：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;import&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; System.Random&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setStdGen (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;-- 这步是可选的，如果有这一步，你每一次运行的结果都是一样的，因为随机种子固定是 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s &amp;lt;- randomStuff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt; [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n &amp;lt;- randomRIO (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sequence (replicate n (randomRIO (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;纯函数式&quot;&gt;&lt;a href=&quot;#纯函数式&quot; class=&quot;headerlink&quot; title=&quot;纯函数式&quot;&gt;&lt;/a&gt;纯函数式&lt;/h2&gt;&lt;p&gt;你可能有以下原因想知道如何用函数式的方式生成随机数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你有好奇心&lt;/li&gt;
&lt;li&gt;你不想用 IO monad&lt;/li&gt;
&lt;li&gt;因为一些并发或者其他原因，你想几个生成器同时存在，共享全局生成器不能解决你的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，有两种方法来用函数式的方式去生成随机数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 stream（无限列表） 中提取随机数&lt;/li&gt;
&lt;li&gt;把生成器当成函数参数的一部分，然后返回随机数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有一些常用的函数用来创建生成器和包含随机数的无限列表。&lt;/p&gt;
&lt;h3 id=&quot;mkStdGen-Int-gt-StdGen&quot;&gt;&lt;a href=&quot;#mkStdGen-Int-gt-StdGen&quot; class=&quot;headerlink&quot; title=&quot;mkStdGen :: Int -&amp;gt; StdGen&quot;&gt;&lt;/a&gt;&lt;code&gt;mkStdGen :: Int -&amp;gt; StdGen&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用随机种子创建生成器。&lt;/p&gt;
&lt;h3 id=&quot;randomRs-Random-a-RandomGen-g-gt-a-a-gt-g-gt-a&quot;&gt;&lt;a href=&quot;#randomRs-Random-a-RandomGen-g-gt-a-a-gt-g-gt-a&quot; class=&quot;headerlink&quot; title=&quot;randomRs :: (Random a, RandomGen g) =&amp;gt; (a, a) -&amp;gt; g -&amp;gt; [a]&quot;&gt;&lt;/a&gt;&lt;code&gt;randomRs :: (Random a, RandomGen g) =&amp;gt; (a, a) -&amp;gt; g -&amp;gt; [a]&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用生成器生成给定范围的无限列表。例子：用 &lt;code&gt;42&lt;/code&gt; 作为随机种子，返回 &lt;code&gt;a&lt;/code&gt; 到 &lt;code&gt;z&lt;/code&gt; 之间包含 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;z&lt;/code&gt; 的无限列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomRs&lt;/span&gt; (&#39;a&#39;, &#39;z&#39;) (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类型 &lt;code&gt;a&lt;/code&gt; 是随机数的类型。类型 &lt;code&gt;g&lt;/code&gt; 看起来是通用的，但实际上它总是 &lt;code&gt;StdGen&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;randoms-Random-a-RandomGen-g-gt-g-gt-a&quot;&gt;&lt;a href=&quot;#randoms-Random-a-RandomGen-g-gt-g-gt-a&quot; class=&quot;headerlink&quot; title=&quot;randoms :: (Random a, RandomGen g) =&amp;gt; g -&amp;gt; [a]&quot;&gt;&lt;/a&gt;&lt;code&gt;randoms :: (Random a, RandomGen g) =&amp;gt; g -&amp;gt; [a]&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用给定的生成器生成随机数的无限列表。例如：用 &lt;code&gt;42&lt;/code&gt; 作为随机种子生成 &lt;code&gt;Double&lt;/code&gt; 类型的列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randoms&lt;/span&gt; (mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;) :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随机数的范围由类型决定，你需要查文档来确定具体范围，或者直接用 &lt;code&gt;randomRs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注意，这些都是函数式的 —— 意味着这里面没有副作用，特别是生成器并不会更新。如果你用一个生成器去生成第一个列表，然后用相同的生成器去生成第二个列表…&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; = randoms g :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;b&lt;/span&gt; = randoms g :: [&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;猜猜结果，由于透明引用，这两个列表的结果是一样的！（如果你想用一个随机种子来生成两个不同的列表，我等下告诉你一个方法）。&lt;/p&gt;
&lt;p&gt;下面一种方法来完成创建 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt; 的随机列表：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;import&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; System.Random&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; g   = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [s] = take &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (randomStuff g)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;RandomGen&lt;/span&gt; g =&amp;gt; g -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; g = work (randomRs (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) g)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; :: [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;] -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; (r:rs)      =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n        = truncate (r * &lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (xs, ys) = splitAt n rs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs : work ys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了必要的打印操作外，这是纯函数式的。它用生成器生成了无限列表，然后再用这个无限列表来生成另一个无限列表作为答案，最后取第一个作为返回值。&lt;/p&gt;
&lt;p&gt;我这样做是因为尽管我们今天的人物是生成一个随机数，但你通常会需要很多个，我希望这个例子可以对你有点帮助。&lt;/p&gt;
&lt;p&gt;上面的代码的工作原理是：用一个生成器，创建一个包含 &lt;code&gt;Float&lt;/code&gt; 的无限列表。截取第一个值，并扩大这个值到 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt;，然后用剩下的列表来生成答案。换句话说，把输入的列表分成 &lt;code&gt;(r:rs)&lt;/code&gt;，&lt;code&gt;r&lt;/code&gt; 决定生成列表的长度（&lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;7&lt;/code&gt;），&lt;code&gt;rs&lt;/code&gt; 之后会被计算答案。&lt;/p&gt;
&lt;h3 id=&quot;split-RandomGen-g-gt-g-gt-g-g&quot;&gt;&lt;a href=&quot;#split-RandomGen-g-gt-g-gt-g-g&quot; class=&quot;headerlink&quot; title=&quot;split :: (RandomGen g) =&amp;gt; g -&amp;gt; (g, g)&quot;&gt;&lt;/a&gt;&lt;code&gt;split :: (RandomGen g) =&amp;gt; g -&amp;gt; (g, g)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用一个随机种子创建两个不同的生成器，其他情况下重用相同的种子是不明智的。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(ga, gb) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- do not use g elsewhere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想创建多余两个的生成器，你可以对新的生成器中的其中一个使用 &lt;code&gt;split&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;g&lt;/span&gt; = mkStdGen &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(ga, g&#39;) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gb, gc) = split g&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- do not use g, g&#39; elsewhere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以用 &lt;code&gt;split&lt;/code&gt; 来获得两个生成器，这样我们就可以产生两个随机列表了。&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;RandomGen&lt;/span&gt; g =&amp;gt; g -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;randomStuff&lt;/span&gt; g = work (randomRs (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;) ga) (randomRs (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) gb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; (ga,gb) = split g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; :: [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;] -&amp;gt; [[&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;work&lt;/span&gt; (n:ns) rs =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (xs,ys) = splitAt n rs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs : work ns ys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它把生成器分成两个，然后产生两个列表。&lt;/p&gt;
&lt;p&gt;我在主程序中硬编码了随机种子。正常情况下你可以在其他地方获取随机种子 —— 从输入中获取，从文件中获取，从时间上获取，或者从某些设备中获取。&lt;/p&gt;
&lt;p&gt;这些在主程序中都是 do-able 的，因为它们都可以在 IO monad 中访问。&lt;/p&gt;
&lt;p&gt;你也可以通过 &lt;code&gt;getStdGen&lt;/code&gt; 获取全局生成器：&lt;/p&gt;
&lt;figure class=&quot;highlight hs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g &amp;lt;- getStdGen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [s] = take randomStuff g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.vex.net/~trebla/haskell/random.xhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随机数（我指的是伪随机数）是通过显式或隐式的状态来生成的。这意味着在 Haskell 中，随机数的使用（通过 &lt;code&gt;System.Random&lt;/code&gt; 库）是伴随着状态的传递的。 &lt;/p&gt;
&lt;p&gt;大部分需要获得帮助的人都有命令式编程的背景，因此，我会先用命令式的
    
    </summary>
    
      <category term="haskell" scheme="http://scarletsky.github.io/categories/haskell/"/>
    
    
      <category term="haskell" scheme="http://scarletsky.github.io/tags/haskell/"/>
    
      <category term="random" scheme="http://scarletsky.github.io/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>在 Node.js 中利用 js-xlsx 处理 Excel 文件</title>
    <link href="http://scarletsky.github.io/2016/01/30/nodejs-process-excel/"/>
    <id>http://scarletsky.github.io/2016/01/30/nodejs-process-excel/</id>
    <published>2016-01-30T03:31:46.000Z</published>
    <updated>2016-02-29T04:28:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的 &lt;code&gt;js-xlsx&lt;/code&gt; 库来处理 Excel 文件。&lt;br&gt;&lt;code&gt;js-xlsx&lt;/code&gt; 库是目前 Github 上 star 数量最多的处理 Excel 的库，功能强大，但上手难度稍大。文档有些乱，不适合快速上手。&lt;br&gt;本文对 &lt;code&gt;js-xlsx&lt;/code&gt; 库进行一定的总结，并提供几个实用的例子供读者测试，学习，交流。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install xlsx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;在使用这个库之前，先介绍库中的一些概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;workbook&lt;/code&gt; 对象，指的是整份 Excel 文档。我们在使用 &lt;code&gt;js-xlsx&lt;/code&gt; 读取 Excel 文档之后就会获得 &lt;code&gt;workbook&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;worksheet&lt;/code&gt; 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 &lt;code&gt;worksheet&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cell&lt;/code&gt; 对象，指的就是 &lt;code&gt;worksheet&lt;/code&gt; 中的单元格，一个单元格就是一个 &lt;code&gt;cell&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的关系如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;XLSX.readFile&lt;/code&gt; 打开 Excel 文件，返回 &lt;code&gt;workbook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;workbook.SheetNames&lt;/code&gt; 获取表名&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;workbook.Sheets[xxx]&lt;/code&gt; 通过表名获取表格&lt;/li&gt;
&lt;li&gt;按自己的需求去处理表格&lt;/li&gt;
&lt;li&gt;生成新的 Excel 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;具体用法&quot;&gt;&lt;a href=&quot;#具体用法&quot; class=&quot;headerlink&quot; title=&quot;具体用法&quot;&gt;&lt;/a&gt;具体用法&lt;/h3&gt;&lt;p&gt;读取 Excel 文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; XLSX &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;xlsx&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; workbook = XLSX.readFile(&lt;span class=&quot;string&quot;&gt;&#39;someExcel.xlsx&#39;&lt;/span&gt;, opts);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取 Excel 文件中的表&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 Excel 中所有表名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sheetNames = workbook.SheetNames; &lt;span class=&quot;comment&quot;&gt;// 返回 [&#39;sheet1&#39;, &#39;sheet2&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据表名获取对应某张表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; worksheet = workbook.Sheets[sheetNames[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;worksheet[address]&lt;/code&gt; 来操作表格，以 &lt;code&gt;!&lt;/code&gt; 开头的 key 是特殊的字段。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 A1 单元格对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a1 = worksheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 返回 &amp;#123; v: &#39;hello&#39;, t: &#39;s&#39;, ... &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 A1 中的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1.v &lt;span class=&quot;comment&quot;&gt;// 返回 &#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取表的有效范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回 &#39;A1:B20&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!range&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回 range 对象，&amp;#123; s: &amp;#123; r: 0, c: 0&amp;#125;, e: &amp;#123; r: 100, c: 2 &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取合并过的单元格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!merges&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 返回一个包含 range 对象的列表，[ &amp;#123;s: &amp;#123; r: 0, c: 0 &amp;#125;, c: &amp;#123; r: 2, c: 1 &amp;#125; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h3&gt;&lt;h4 id=&quot;解析-Excel-生成-JSON&quot;&gt;&lt;a href=&quot;#解析-Excel-生成-JSON&quot; class=&quot;headerlink&quot; title=&quot;解析 Excel 生成 JSON&quot;&gt;&lt;/a&gt;解析 Excel 生成 JSON&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt; 事实上，你可以直接通过 &lt;code&gt;XLSX.utils.sheet_to_json(worksheet)&lt;/code&gt; 获得同样的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 本例子中假设表的第一行为字段名&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; headers = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; keys = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(worksheet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过滤以 ! 开头的 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter(k =&amp;gt; k[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] !== &lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历所有单元格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .forEach(k =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如 A11 中的 A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; col = k.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如 A11 中的 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; row = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(k.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 当前单元格的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = worksheet[k].v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 保存字段名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (row === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            headers[col] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 解析成 JSON&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!data[row]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data[row] = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data[row][headers[col]] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data); &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; &#39;姓名&#39;: &#39;test1&#39;, &#39;年龄&#39;: 20 &amp;#125;, &amp;#123; &#39;姓名&#39;: &#39;test2&#39;, &#39;年龄&#39;: 10 &amp;#125; ... ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;合并表格&quot;&gt;&lt;a href=&quot;#合并表格&quot; class=&quot;headerlink&quot; title=&quot;合并表格&quot;&gt;&lt;/a&gt;合并表格&lt;/h4&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取多份表格&lt;/li&gt;
&lt;li&gt;合并数组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; 其实合并表格跟 &lt;code&gt;XLSX&lt;/code&gt; 没什么关系，只是处理几个数组而已。&lt;/p&gt;
&lt;p&gt;sheet1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;test1&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;test2&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;test3&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;sheet2&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;country&lt;/th&gt;
&lt;th&gt;remark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;China&lt;/td&gt;
&lt;td&gt;hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;America&lt;/td&gt;
&lt;td&gt;world&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Unkonw&lt;/td&gt;
&lt;td&gt;???&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sheet1 = XLSX.utils.sheet_to_json(sheet1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sheet2 = XLSX.utils.sheet_to_json(sheet2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先合并 sheet1 和 sheet2，再对统一处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = sheet1.concat(sheet2).reduce((prev, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = prev.findIndex((elem, i) =&amp;gt; elem.id === next.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index === -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev.concat(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prev[index] = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev[index], next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; id: &#39;1&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test1&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;30&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;China&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;hello&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &amp;#123; id: &#39;2&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test2&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;20&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;America&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;world&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  &amp;#123; id: &#39;3&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    name: &#39;test3&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    age: &#39;18&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    country: &#39;Unkonw&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    remark: &#39;???&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;导出表格&quot;&gt;&lt;a href=&quot;#导出表格&quot; class=&quot;headerlink&quot; title=&quot;导出表格&quot;&gt;&lt;/a&gt;导出表格&lt;/h4&gt;&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建特定的数据结构，如下。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;XLSX.writeFile(workbook, filename)&lt;/code&gt; 即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A1:E4&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 必须要有这个范围才能输出，否则导出的 excel 会是一个空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            A1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _headers = [&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;country&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;remark&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _data = [ &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt; &amp;#125; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; headers = _headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 为 _headers 添加对应的单元格位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; v: &#39;id&#39;, position: &#39;A1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;name&#39;, position: &#39;B1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;age&#39;, position: &#39;C1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;country&#39;, position: &#39;D1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;remark&#39;, position: &#39;E1&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .map((v, i) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &amp;#123;v: v, position: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+i) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 转换成 worksheet 需要的结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// &amp;#123; A1: &amp;#123; v: &#39;id&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   B1: &amp;#123; v: &#39;name&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   C1: &amp;#123; v: &#39;age&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   D1: &amp;#123; v: &#39;country&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//   E1: &amp;#123; v: &#39;remark&#39; &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .reduce((prev, next) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = _data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 匹配 headers 的位置，生成对应的单元格数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// [ [ &amp;#123; v: &#39;1&#39;, position: &#39;A2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test1&#39;, position: &#39;B2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;30&#39;, position: &#39;C2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;China&#39;, position: &#39;D2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;hello&#39;, position: &#39;E2&#39; &amp;#125; ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   [ &amp;#123; v: &#39;2&#39;, position: &#39;A3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test2&#39;, position: &#39;B3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;20&#39;, position: &#39;C3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;America&#39;, position: &#39;D3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;world&#39;, position: &#39;E3&#39; &amp;#125; ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   [ &amp;#123; v: &#39;3&#39;, position: &#39;A4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;test3&#39;, position: &#39;B4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;18&#39;, position: &#39;C4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;Unkonw&#39;, position: &#39;D4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     &amp;#123; v: &#39;???&#39;, position: &#39;E4&#39; &amp;#125; ] ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .map((v, i) =&amp;gt; _headers.map((k, j) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, &amp;#123; v: v[k], position: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+j) + (i+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#125;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 对刚才的结果进行降维处理（二维数组变成一维数组）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// [ &amp;#123; v: &#39;1&#39;, position: &#39;A2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test1&#39;, position: &#39;B2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;30&#39;, position: &#39;C2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;China&#39;, position: &#39;D2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;hello&#39;, position: &#39;E2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;2&#39;, position: &#39;A3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test2&#39;, position: &#39;B3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;20&#39;, position: &#39;C3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;America&#39;, position: &#39;D3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;world&#39;, position: &#39;E3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;3&#39;, position: &#39;A4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;test3&#39;, position: &#39;B4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;18&#39;, position: &#39;C4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;Unkonw&#39;, position: &#39;D4&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; v: &#39;???&#39;, position: &#39;E4&#39; &amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, next) =&amp;gt; prev.concat(next))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// 转换成 worksheet 需要的结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//   &amp;#123; A2: &amp;#123; v: &#39;1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B2: &amp;#123; v: &#39;test1&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C2: &amp;#123; v: &#39;30&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D2: &amp;#123; v: &#39;China&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E2: &amp;#123; v: &#39;hello&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     A3: &amp;#123; v: &#39;2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B3: &amp;#123; v: &#39;test2&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C3: &amp;#123; v: &#39;20&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D3: &amp;#123; v: &#39;America&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E3: &amp;#123; v: &#39;world&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     A4: &amp;#123; v: &#39;3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     B4: &amp;#123; v: &#39;test3&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     C4: &amp;#123; v: &#39;18&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     D4: &amp;#123; v: &#39;Unkonw&#39; &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//     E4: &amp;#123; v: &#39;???&#39; &amp;#125; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, next) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 合并 headers 和 data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; output = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, headers, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取所有单元格的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; outputPos = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算出范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ref = outputPos[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + outputPos[outputPos.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 构建 workbook 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wb = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, output, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: ref &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 导出 Excel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XLSX.writeFile(wb, &lt;span class=&quot;string&quot;&gt;&#39;output.xlsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SheetJS/js-xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SheetJS/js-xlsx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的 &lt;code&gt;js-xlsx&lt;/code&gt; 库来处理 Excel 文件。&lt;br&gt;&lt;code&gt;js-xlsx&lt;
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="excel" scheme="http://scarletsky.github.io/tags/excel/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="js-xlsx" scheme="http://scarletsky.github.io/tags/js-xlsx/"/>
    
      <category term="node" scheme="http://scarletsky.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>简单易懂的 Flexbox</title>
    <link href="http://scarletsky.github.io/2016/01/23/simple-flexbox/"/>
    <id>http://scarletsky.github.io/2016/01/23/simple-flexbox/</id>
    <published>2016-01-23T01:58:37.000Z</published>
    <updated>2016-02-29T04:28:27.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;设置父容器的 &lt;code&gt;display&lt;/code&gt; 为 &lt;code&gt;flex&lt;/code&gt;，然后调节容器相关的属性。&lt;/li&gt;
&lt;li&gt;调节子元素相关的属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.container &amp;#123; display: flex; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.item &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;具体用法&quot;&gt;&lt;a href=&quot;#具体用法&quot; class=&quot;headerlink&quot; title=&quot;具体用法&quot;&gt;&lt;/a&gt;具体用法&lt;/h2&gt;&lt;p&gt;要使用 Flexbox 布局，你需要设置父容器和子元素的属性。&lt;/p&gt;
&lt;h3 id=&quot;父容器设置&quot;&gt;&lt;a href=&quot;#父容器设置&quot; class=&quot;headerlink&quot; title=&quot;父容器设置&quot;&gt;&lt;/a&gt;父容器设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启用 flex 布局 &lt;code&gt;display: flex | inline-flex&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置主轴方向 &lt;code&gt;flex-direction: row | row-reverse | column | column-reverse&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt; 默认值，从左到右&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row-reverse&lt;/code&gt; 从右到左&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt; 从上到下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-reverse&lt;/code&gt; 从下到上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素的换行方式 &lt;code&gt;flex-wrap: nowrap | wrap | wrap-reverse&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nowrap&lt;/code&gt; 默认值，让所有子元素排在一行中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap&lt;/code&gt; 自动换行，方向为从右到左。(这里的方向是指换行方向，不是指排列方向)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap-reverse&lt;/code&gt; 自动换行，方向为从左到右&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flex-direction&lt;/code&gt; 和 &lt;code&gt;flex-wrap&lt;/code&gt; 的简写：&lt;code&gt;flex-flow: &amp;lt;&amp;#39;flex-direction&amp;#39;&amp;gt; || &amp;lt;&amp;#39;flex-wrap&amp;#39;&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素的在主轴中对齐方式 &lt;code&gt;justify-content: flex-start | flex-end | center | space-between | space-around&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 默认值，在起始位置对齐。和 &lt;code&gt;flex-direction: row&lt;/code&gt; 一起用的话相当于左对齐，和 &lt;code&gt;flex-direction: column&lt;/code&gt; 一起用的话相当于上对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 在终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 居中对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-bewteen&lt;/code&gt; 第一个子元素会在起始位置，最后一个子元素会在终点位置，它们之间的元素会在剩余位置中平均分布&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt; 所有元素都会平均分布在容器中。注意，视觉上元素不是平均分布的。那是因为所有元素所占的空间都被平均分了，元素两边都有空间，第一个元素和最后一个元素靠近容器的边缘只有一份空间，其他空白的地方都是有两份空间组成的，所以看起来两边的空间少，而中间的空间多。好好体会一下 &lt;code&gt;space-around&lt;/code&gt; 字面上的意思就能理解了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置子元素在侧轴中的对齐方式 &lt;code&gt;align-items: flex-start | flex-end | center | baseline | stretch&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt; 默认值，拉伸元素来填充父容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 在侧轴的起始位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 在侧轴的终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 居中于侧轴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseline&lt;/code&gt; 在基线对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置侧轴中行(不是元素)的对齐方式 &lt;code&gt;align-content: flex-start | flex-end | center | space-between | space-around | stretch&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stretch&lt;/code&gt; 默认值，拉伸行来填充剩余的空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt; 所有行在容器的起始位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt; 所有行在容器的终点位置对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; 所有行居中于容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-between&lt;/code&gt; 类似 &lt;code&gt;justify-content: space-between&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;space-around&lt;/code&gt; 类似 &lt;code&gt;justify-content: space-around&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;子元素设置&quot;&gt;&lt;a href=&quot;#子元素设置&quot; class=&quot;headerlink&quot; title=&quot;子元素设置&quot;&gt;&lt;/a&gt;子元素设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置元素的排序方式 &lt;code&gt;order: &amp;lt;integer&amp;gt;&lt;/code&gt;，数字越小，排越前面。默认情况下是以文档流的先后顺序排序，负值合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的扩展能力 &lt;code&gt;flex-grow: &amp;lt;number&amp;gt;&lt;/code&gt;，默认为1，增大该值表示该元素所占空间是其他元素的 n 倍，负值不合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的收缩能力 &lt;code&gt;flex-shrink: &amp;lt;number&amp;gt;&lt;/code&gt;，默认为 1，减少该值表示该元素所站空间是其他元素的 1/n，负值不合法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调节元素的基本大小：&lt;code&gt;flex-basis: &amp;lt;length&amp;gt; | auto&lt;/code&gt;，默认为 auto。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面属性的缩写：&lt;code&gt;flex: none | [ &amp;lt;&amp;#39;flex-grow&amp;#39;&amp;gt; &amp;lt;&amp;#39;flex-shrink&amp;#39;&amp;gt;? || &amp;lt;&amp;#39;flex-basis&amp;#39;&amp;gt; ]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定元素的排列方式，作用和容器中的 &lt;code&gt;align-items&lt;/code&gt; 类似，优先级比 &lt;code&gt;align-items&lt;/code&gt; 高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;vertical-align&lt;/code&gt; 在子元素中不起作用。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/a-guide-to-flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/a-guide-to-flexbox.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://zh.learnlayout.com/flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.learnlayout.com/flexbox.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Flexbox 是 CSS 3 的布局方式，可以轻松实现传统布局中难以实现的布局。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="css" scheme="http://scarletsky.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://scarletsky.github.io/tags/css/"/>
    
      <category term="flexbox" scheme="http://scarletsky.github.io/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>Spacemacs 使用总结</title>
    <link href="http://scarletsky.github.io/2016/01/22/spacemacs-usage/"/>
    <id>http://scarletsky.github.io/2016/01/22/spacemacs-usage/</id>
    <published>2016-01-22T07:20:38.000Z</published>
    <updated>2016-06-15T02:00:30.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。&lt;/p&gt;
&lt;h2 id=&quot;安装-amp-使用&quot;&gt;&lt;a href=&quot;#安装-amp-使用&quot; class=&quot;headerlink&quot; title=&quot;安装 &amp;amp; 使用&quot;&gt;&lt;/a&gt;安装 &amp;amp; 使用&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/syl20bnr/spacemacs ~/.emacs.d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ emacs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;p&gt;Spacemacs 的配置文件位于 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中，我们只需要修改这个文件就可以制定自己的配置了。&lt;/p&gt;
&lt;p&gt;一般情况下，我们只需要在 &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; 中添加自己需要的 layer 就可以了。&lt;/p&gt;
&lt;h2 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h2&gt;&lt;h4 id=&quot;配置文件管理&quot;&gt;&lt;a href=&quot;#配置文件管理&quot; class=&quot;headerlink&quot; title=&quot;配置文件管理&quot;&gt;&lt;/a&gt;配置文件管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f e d&lt;/code&gt; 快速打开配置文件 &lt;code&gt;.spacemacs&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC f e R&lt;/code&gt; 同步配置文件&lt;/p&gt;
&lt;h4 id=&quot;文件管理&quot;&gt;&lt;a href=&quot;#文件管理&quot; class=&quot;headerlink&quot; title=&quot;文件管理&quot;&gt;&lt;/a&gt;文件管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f f&lt;/code&gt; 打开文件（夹），相当于 &lt;code&gt;$ open xxx&lt;/code&gt; 或 &lt;code&gt;$ cd /path/to/project&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC /&lt;/code&gt; 用合适的搜索工具搜索内容，相当于 &lt;code&gt;$ grep/ack/ag/pt xxx&lt;/code&gt; 或 ST / Atom 中的 &lt;code&gt;Ctrl + Shift + f&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC s c&lt;/code&gt; 清除搜索高亮&lt;br&gt;&lt;code&gt;SPC f R&lt;/code&gt; 重命名当前文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC b k&lt;/code&gt; 关闭当前 buffer&lt;br&gt;&lt;code&gt;SPC SPC&lt;/code&gt; 搜索当前文件 &lt;/p&gt;
&lt;h4 id=&quot;窗口管理&quot;&gt;&lt;a href=&quot;#窗口管理&quot; class=&quot;headerlink&quot; title=&quot;窗口管理&quot;&gt;&lt;/a&gt;窗口管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC f t 或 SPC p t&lt;/code&gt; 用 NeoTree 打开/关闭侧边栏，相当于 ST / Atom 中的 &lt;code&gt;Ctrl(cmd) + k + b&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC f t&lt;/code&gt; 打开当前文件所在的目录&lt;br&gt;&lt;code&gt;SPC p t&lt;/code&gt; 打开当前文件所在的&lt;strong&gt;根&lt;/strong&gt;目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC 0&lt;/code&gt; 光标跳转到侧边栏（NeoTree）中&lt;br&gt;&lt;code&gt;SPC n(数字)&lt;/code&gt; 光标跳转到第 n 个 buffer 中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPC w s 或 SPC w -&lt;/code&gt; 水平分割窗口&lt;br&gt;&lt;code&gt;SPC w v 或 SPC w /&lt;/code&gt; 垂直分割窗口&lt;br&gt;&lt;code&gt;SPC w c&lt;/code&gt; 关闭当前窗口&lt;/p&gt;
&lt;h4 id=&quot;项目管理&quot;&gt;&lt;a href=&quot;#项目管理&quot; class=&quot;headerlink&quot; title=&quot;项目管理&quot;&gt;&lt;/a&gt;项目管理&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC p p&lt;/code&gt; 切换项目&lt;br&gt;&lt;code&gt;SPC p D&lt;/code&gt; 在 dired 中打开项目根目录&lt;br&gt;&lt;code&gt;SPC p f&lt;/code&gt; 在项目中搜索文件名，相当于 ST / Atom 中的 &lt;code&gt;Ctrl + p&lt;/code&gt;&lt;br&gt;&lt;code&gt;SPC p R&lt;/code&gt; 在项目中替换字符串，根据提示输入「匹配」和「替换」的字符串，然后输入替换的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; 修改刚才输入的「替换」字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RET&lt;/code&gt; 表示不做处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 表示只替换一处&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt; 表示替换全部&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 或 &lt;code&gt;delete&lt;/code&gt; 表示跳过当前匹配项，匹配下一项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; 表示跳过当前匹配项，匹配上一项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; 表示替换当前项，但不移动光标，可和 &lt;code&gt;n&lt;/code&gt; 或 &lt;code&gt;^&lt;/code&gt; 配合使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;对齐&quot;&gt;&lt;a href=&quot;#对齐&quot; class=&quot;headerlink&quot; title=&quot;对齐&quot;&gt;&lt;/a&gt;对齐&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC j =&lt;/code&gt; 自动对齐，相当于 beautify&lt;/p&gt;
&lt;h4 id=&quot;Shell-集成-必须先配置-Shell-layer&quot;&gt;&lt;a href=&quot;#Shell-集成-必须先配置-Shell-layer&quot; class=&quot;headerlink&quot; title=&quot;Shell 集成 (必须先配置 Shell layer)&quot;&gt;&lt;/a&gt;Shell 集成 (必须先配置 Shell layer)&lt;/h4&gt;&lt;p&gt;&lt;code&gt;SPC &amp;#39;(单引号)&lt;/code&gt; 打开/关闭 Shell&lt;br&gt;&lt;code&gt;C-k&lt;/code&gt; 前一条 shell 命令，相当于在 shell 中按上箭头&lt;br&gt;&lt;code&gt;C-j&lt;/code&gt; 后一条 shell 命令，相当于在 shell 中按下箭头&lt;/p&gt;
&lt;h2 id=&quot;让-Spacemacs-支持-EditorConfig&quot;&gt;&lt;a href=&quot;#让-Spacemacs-支持-EditorConfig&quot; class=&quot;headerlink&quot; title=&quot;让 Spacemacs 支持 EditorConfig&quot;&gt;&lt;/a&gt;让 Spacemacs 支持 EditorConfig&lt;/h2&gt;&lt;p&gt;EditorConfig 是一个配置文件，一般位于项目的根目录，它可以让不同的编辑器和IDE 都按照相同的格式来格式化代码，对于项目的维护者来说是一个很好的工具。&lt;/p&gt;
&lt;p&gt;Spacemacs 也支持 EditorConfig，只需要在配置文件中添加配置即可。下面以 OS X 为例，通过以下步骤即可让 Spacemacs 支持 EditorConfig：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$ brew install editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中的 &lt;code&gt;dotspacemacs-additional-packages&lt;/code&gt; 中添加 &lt;code&gt;editorconfig&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;dotspacemacs&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;additional-packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   editorconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 &lt;code&gt;.editorconfig&lt;/code&gt; 文件，写上自己喜欢的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中的 &lt;code&gt;docspacemacs/user-config&lt;/code&gt; 中加入 &lt;code&gt;(editorconfig-mode 1)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;完。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Git-集成-必须先配置Magit-的使用&quot;&gt;&lt;a href=&quot;#Git-集成-必须先配置Magit-的使用&quot; class=&quot;headerlink&quot; title=&quot;Git 集成 (必须先配置Magit 的使用)&quot;&gt;&lt;/a&gt;Git 集成 (必须先配置Magit 的使用)&lt;/h2&gt;&lt;p&gt;Git 是一个优秀的版本控制工具，我们可以在 &lt;code&gt;.spacemacs&lt;/code&gt; 的 &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; 列表中添加 &lt;code&gt;git&lt;/code&gt; 就可以集成 git 了。&lt;/p&gt;
&lt;p&gt;下面是一些常用的 git 命令，前缀为 &lt;code&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Git&lt;/th&gt;
&lt;th&gt;Magit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g i&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g s&lt;/code&gt; 弹出层选中文件然后按 &lt;code&gt;s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git add currentFile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g c c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g P&lt;/code&gt; 按提示操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout -- xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g s&lt;/code&gt; 弹出层选中文件然后按 &lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SPC g l l&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 commit 时，我们输入完 commit message 之后，需要按 &lt;code&gt;C-c C-c&lt;/code&gt; 来完成 commit 操作，也可以按 &lt;code&gt;C-c C-k&lt;/code&gt; 来取消 commit 。&lt;/p&gt;
&lt;h2 id=&quot;设置文件默认的主模式&quot;&gt;&lt;a href=&quot;#设置文件默认的主模式&quot; class=&quot;headerlink&quot; title=&quot;设置文件默认的主模式&quot;&gt;&lt;/a&gt;设置文件默认的主模式&lt;/h2&gt;&lt;p&gt;虽然我们可以通过 &lt;code&gt;M-x&lt;/code&gt; 来设置文件的主模式，但这种方式只是在单独修改某个文件的主模式时好用，如果要把所有同类型的文件都改成其他模式，这种方式的效率就太低了。&lt;/p&gt;
&lt;p&gt;在 Spacemacs 中，我们可以用 &lt;code&gt;auto-mode-alist&lt;/code&gt; 来设置某一类文件默认的主模式。&lt;/p&gt;
&lt;p&gt;我们只需要在 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中的 &lt;code&gt;user-config&lt;/code&gt; 中加入下面代码即可：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(add-to-list &amp;#39;auto-mode-alist &amp;#39;(&amp;#34;\\.js\\&amp;#39;&amp;#34; . react-mode))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码会用 &lt;code&gt;react-mode&lt;/code&gt; 打开所有 &lt;code&gt;.js&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&quot;Emacs-服务器&quot;&gt;&lt;a href=&quot;#Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;Emacs 服务器&quot;&gt;&lt;/a&gt;Emacs 服务器&lt;/h2&gt;&lt;p&gt;Spacemacs 会在启动时启动服务器，这个服务器会在 Spacemacs 关闭的时候被杀掉。&lt;/p&gt;
&lt;h3 id=&quot;使用-Emacs-服务器&quot;&gt;&lt;a href=&quot;#使用-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;使用 Emacs 服务器&quot;&gt;&lt;/a&gt;使用 Emacs 服务器&lt;/h3&gt;&lt;p&gt;当 Emacs 服务器启动的时候，我们可以在命令行中使用 &lt;code&gt;emacsclient&lt;/code&gt; 命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -c&lt;/code&gt; 用 Emacs GUI 来打开文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -t&lt;/code&gt; 用命令行中 Emacs 来打开文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;杀掉-Emacs-服务器&quot;&gt;&lt;a href=&quot;#杀掉-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;杀掉 Emacs 服务器&quot;&gt;&lt;/a&gt;杀掉 Emacs 服务器&lt;/h3&gt;&lt;p&gt;除了关闭 Spacemacs 之外，我们还可以用下面的命令来杀掉 Emacs 服务器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ emacsclient -e &amp;#39;(kill-emacs)&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;持久化-Emacs-服务器&quot;&gt;&lt;a href=&quot;#持久化-Emacs-服务器&quot; class=&quot;headerlink&quot; title=&quot;持久化 Emacs 服务器&quot;&gt;&lt;/a&gt;持久化 Emacs 服务器&lt;/h3&gt;&lt;p&gt;我们可以持久化 Emacs 服务器，在 Emacs 关闭的时候，服务器不被杀掉。只要设置 &lt;code&gt;~/.spacemacs&lt;/code&gt; 中 &lt;code&gt;dotspacemacs-persistent-server&lt;/code&gt; 为 &lt;code&gt;t&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;但这种情况下，我们只可以通过以下方式来杀掉服务器了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SPC q q&lt;/code&gt; 退出 Emacs 并杀掉服务器，会对已修改的 Buffer 给出保存的提示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC q Q&lt;/code&gt; 同上，但会丢失所有未保存的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brannonlucas.com/using-editorconfig-and-spacemacs-on-os-x/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Spacemacs 是一份 emacs 的配置文件，想要使用它，你先要有 emacs。&lt;/p&gt;
&lt;h2 id=&quot;安装-amp-使用&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="emacs" scheme="http://scarletsky.github.io/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://scarletsky.github.io/tags/emacs/"/>
    
      <category term="spacemacs" scheme="http://scarletsky.github.io/tags/spacemacs/"/>
    
  </entry>
  
  <entry>
    <title>Localtunnel（Node.js 版） 使用教程</title>
    <link href="http://scarletsky.github.io/2016/01/17/localtunnel-usage/"/>
    <id>http://scarletsky.github.io/2016/01/17/localtunnel-usage/</id>
    <published>2016-01-17T09:07:06.000Z</published>
    <updated>2016-02-29T04:29:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g localtunnel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;假设本地服务器在 8000 端口，我们可以通过下面的命令把本地服务器暴露到公网中&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lt --port 8000&amp;#10;your url is: https://uhhzexcifv.localtunnel.me&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的命令，我们不需要做其他设置就可以通过 &lt;code&gt;https://uhhzexcifv.localtunnel.me&lt;/code&gt; 来访问我们本地服务器了。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;localtunnel.me&lt;/code&gt; 是国外的服务器，访问速度有时候不太理想，这时候我们可以自己搭建 localtunnel 的服务端。&lt;/p&gt;
&lt;h2 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h2&gt;&lt;h3 id=&quot;安装-1&quot;&gt;&lt;a href=&quot;#安装-1&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone git://github.com/defunctzombie/localtunnel-server.git&amp;#10;$ cd localtunnel-server&amp;#10;$ npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;以监听 2000 端口为例：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#10;$ bin/server --port 2000&amp;#10;&amp;#10;# &amp;#37197;&amp;#21512; pm2 &amp;#20351;&amp;#29992;&amp;#10;$ pm2 start bin/server --name lt -- --port 2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动服务端程序后，我们只要在使用客户端 &lt;code&gt;lt&lt;/code&gt; 时加上 &lt;code&gt;--host&lt;/code&gt; 参数，就可以指定服务端了。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# host &amp;#21518;&amp;#38754;&amp;#19981;&amp;#35201;&amp;#21152; /&amp;#10;$ lt --host http://helloworld.com:2000 --port 8000&amp;#10;your url is: http://jhuyudvlum.helloworld.com:2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，我们就可以通过自己的代理服务器来访问本地服务器了，不用经过第三方代理服务器，不必担心代理服务器的安全问题。&lt;/p&gt;
&lt;h2 id=&quot;高级用法&quot;&gt;&lt;a href=&quot;#高级用法&quot; class=&quot;headerlink&quot; title=&quot;高级用法&quot;&gt;&lt;/a&gt;高级用法&lt;/h2&gt;&lt;h3 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;&gt;&lt;/a&gt;反向代理&lt;/h3&gt;&lt;p&gt;在 Github 上面有一份 Nginx 的&lt;a href=&quot;https://github.com/localtunnel/server/blob/master/devops/nginx/sites/localtunnel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置&lt;/a&gt;，我们可以直接使用，或者按照自己的需要做些修改。&lt;/p&gt;
&lt;h3 id=&quot;指定子域名&quot;&gt;&lt;a href=&quot;#指定子域名&quot; class=&quot;headerlink&quot; title=&quot;指定子域名&quot;&gt;&lt;/a&gt;指定子域名&lt;/h3&gt;&lt;p&gt;有时候，用随机字符串作为子域名并不是一件好事，我们可能需要固定的域名来访问本地服务器。这时，&lt;code&gt;lt --subdomain&lt;/code&gt; 就可以派上用场了。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# subdomain &amp;#38480;&amp;#21046;&amp;#38271;&amp;#24230;&amp;#20026; 4 ~ 63&amp;#10;$ lt --host http://helloworld.com:2000 --port 8000 --subdomain mysubdomain&amp;#10;your url is: http://mysubdomain.helloworld.com:2000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到了吗？通过 &lt;code&gt;--subdomain&lt;/code&gt;，我们就可以指定自己喜欢的子域名了。&lt;/p&gt;
&lt;h2 id=&quot;坑&quot;&gt;&lt;a href=&quot;#坑&quot; class=&quot;headerlink&quot; title=&quot;坑&quot;&gt;&lt;/a&gt;坑&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;然而&lt;/strong&gt;，如果我们通过 &lt;code&gt;--host&lt;/code&gt; 来指定子域名，会发生什么？&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lt --host http://mysubdomain.hello.com --port 8000&amp;#10;Error: localtunnel server returned an error, please try again&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就算配置了 Nginx 的反向代理，你依然会得到这个错误。可以查看 &lt;a href=&quot;https://github.com/localtunnel/server/issues/21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#21&lt;/a&gt; 和  &lt;a href=&quot;https://github.com/localtunnel/server/issues/31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#31&lt;/a&gt; 来看更多的细节。&lt;/p&gt;
&lt;p&gt;要解决这个问题，最简单的就是 &lt;strong&gt;不用&lt;/strong&gt; &lt;code&gt;--host&lt;/code&gt; 来指定子域名，而用 &lt;code&gt;--subdomain&lt;/code&gt; 来指定。&lt;/p&gt;
&lt;p&gt;其实有好几个 pull request 都尝试去解决这个问题的，但不知道什么原因，作者一直没去合并。或者再过一段时间，这个问题就会解决，到时候， localtunnel 就会变得更加好用了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/localtunnel/localtunnel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/localtunnel/localtunnel&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/localtunnel/server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/localtunnel/server&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Localtunnel 是一个可以让内网服务器暴露到公网上的开源项目。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; cl
    
    </summary>
    
      <category term="localtunnel" scheme="http://scarletsky.github.io/categories/localtunnel/"/>
    
    
      <category term="localtunnel" scheme="http://scarletsky.github.io/tags/localtunnel/"/>
    
      <category term="nodejs" scheme="http://scarletsky.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>The Little JavaScript Closures</title>
    <link href="http://scarletsky.github.io/2015/12/02/the-little-javascript-closures/"/>
    <id>http://scarletsky.github.io/2015/12/02/the-little-javascript-closures/</id>
    <published>2015-12-02T12:55:54.000Z</published>
    <updated>2016-04-06T02:15:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文尝试模仿 &lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Little Schema&lt;/a&gt; 的风格，介绍 JavaScript 的闭包。本文同时也是我学习 JavaScript 闭包的一次总结。欢迎一起讨论。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;什么是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是一个函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包都是函数吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数都是闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我怎么判断一个函数是不是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你现在还不能回答，因为你还不知道以下概念：&lt;br&gt;全局变量（Global Variable）&lt;br&gt;局部变量（Local Variable）&lt;br&gt;自由变量（Free Variable）&lt;br&gt;词法作用域（Lexical Scope）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;变量与作用域&quot;&gt;&lt;a href=&quot;#变量与作用域&quot; class=&quot;headerlink&quot; title=&quot;变量与作用域&quot;&gt;&lt;/a&gt;变量与作用域&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var a = 1;&lt;/code&gt; a 是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全局变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;a = 1;&lt;/code&gt; a 是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全局变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 a，b 分别是什么变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a 是全局变量，b 是局部变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 a 在函数中定义还是全局变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 a 不是用 var 声明的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不用 &lt;code&gt;var&lt;/code&gt; 声明的变量都是全局变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 &lt;code&gt;var&lt;/code&gt; 声明的变量都是局部变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在全局作用域中声明的变量都是全局变量，即使这个变量是用 var 声明的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全局作用域是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数作用域以外的地方都是就是全局作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数作用域又是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数内部&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo 变量和 bar 函数都处于全局作用域中，baz 变量处于函数作用域中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码中有多少个作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2 个，foo 函数所处的全局作用域和 bar 变量所处的函数作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baz&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码中有多少个作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3 个，foo 函数所处的全局作用域，bar 所处的函数作用域，和 test 所处的函数作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的 bar 变量和 baz 函数处于同一个作用域吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，因为它们都在 foo 函数中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面 test 变量和 bar，baz处于同一个作用域中吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为 test 变量在 baz 函数中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript 用函数来划分作用域吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught ReferenceError: bar is not defined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么会报错呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为外部作用域&lt;strong&gt;不能&lt;/strong&gt;访问内部作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么不会报错？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为内部作用域&lt;strong&gt;可以&lt;/strong&gt;访问外部作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么不是输出 1 ？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为局部变量的优先级比外部变量高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会输出什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;undefined&lt;br&gt;2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么会这么奇怪？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为变量声明有变量提升（Variable Hoisting）的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;变量提升是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明语句会在执行前被处理，在任何地方声明一个变量，相当于在顶部位置声明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bla = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bla;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相当于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bla;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bla = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;这和之前的例子有什么关系？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数内部声明的变量，都会先在函数的顶部声明。所以之前的例子就相当于&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是词法作用域？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量的作用域是由它在源代码中所处位置决定的（词法），并且嵌套的函数可以访问到其外层作用域中声明的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这和上面说到的内部作用域可以访问外部作用域有什么区别吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是自由变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在函数内部使用到，但既不是该函数的参数，也不是该函数的局部变量的变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baz = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo + baz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 bar 函数有三个变量：baz, console, foo&lt;br&gt;其中 baz 是局部变量， console 和 foo 都属于自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么 console 和 foo 都是自由变量？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 console 和 foo 都在全局作用域中，在 bar 函数中是通过引用的方式来使用 console 和 foo 的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还需要了解其他概念吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不需要，现在已经可以深入了解闭包了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;什么是闭包？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是一个内部函数 [注1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内部函数都是闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，引用了自由变量的内部函数才是闭包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为 foo 函数不是一个内部函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bar 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是，因为它只是一个内部函数，并没有引用自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bar 函数是一个闭包吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，因为它是一个内部函数，同时引用了自由变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包有什么特点？&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;闭包可以访问外部变量&lt;/li&gt;
&lt;li&gt;闭包可以在外部函数返回之后依然保留外部变量的引用&lt;/li&gt;
&lt;li&gt;闭包会保留外部变量的引用，不是该变量的值&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一点在前面的例子中已经懂了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二点还没懂，可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add5 = add(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(add5(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即便 add 函数已经返回，add5 中依然可以访问 x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第三点还没懂，可以举个例子吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;user&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getId: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; id; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setId: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newId&lt;/span&gt;) &lt;/span&gt;&amp;#123; id = newId &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = user();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getId(); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.setId(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.getId(); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里闭包中的 id 是一个引用，不是实际值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有点像私有方法？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是的，我们可以用闭包来实现私有方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包还可以用来做什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是函数式编程的骨架，掌握闭包之后你可以写出函数式 JavaScript 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数式编程是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是本文的讨论范围，自己去学习吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;One-More-Thing&quot;&gt;&lt;a href=&quot;#One-More-Thing&quot; class=&quot;headerlink&quot; title=&quot;One More Thing&quot;&gt;&lt;/a&gt;One More Thing&lt;/h2&gt;&lt;p&gt;[注1] 根据 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding JavaScript Closures&lt;/a&gt; 这篇文章，事实上所有函数在创建的时候都会形成闭包。但这种闭包并没什么趣味，也没什么特别的用途，所以我们更关注的是由内部函数形成的闭包。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://uternet.github.io/TLS/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptissexy.com/understand-javascript-closures-with-ease/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/12930272/javascript-closures-vs-anonymous-functions&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.moye.me/2014/12/29/closure_higher-order-function/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.moye.me/2014/12/29/closure_higher-order-function/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文尝试模仿 &lt;a href=&quot;http://uternet.github.io/TLS/&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="closure" scheme="http://scarletsky.github.io/tags/closure/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="闭包" scheme="http://scarletsky.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>React-DnD 的使用</title>
    <link href="http://scarletsky.github.io/2015/11/17/react-dnd-usage/"/>
    <id>http://scarletsky.github.io/2015/11/17/react-dnd-usage/</id>
    <published>2015-11-17T02:59:31.000Z</published>
    <updated>2016-02-29T04:29:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trello 和 Storify 这样的应用，在不同地方通过拖拽转移数据，而组件会改变它们的外观和应用的状态来响应拖拽事件。&lt;/p&gt;
&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把应用的根组件包装在 &lt;code&gt;DragDropContext&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;把可以拖拽的组件包装在 &lt;code&gt;DragSource&lt;/code&gt; 中&lt;ol&gt;
&lt;li&gt;设置 type&lt;/li&gt;
&lt;li&gt;设置 spec，让组件可以响应拖拽事件&lt;/li&gt;
&lt;li&gt;设置 collect，把拖拽过程中需要信息注入组件的 props&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;把可以接受拖拽的组件包装在 &lt;code&gt;DropTarget&lt;/code&gt; 中&lt;ol&gt;
&lt;li&gt;设置 type&lt;/li&gt;
&lt;li&gt;设置 spec，让组件可以响应拖拽事件&lt;/li&gt;
&lt;li&gt;设置 collect，把拖拽过程中需要信息注入组件的 props&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;翻译成代码就是：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTML5Backend &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd-html5-backend&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragDropContext &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragDropContext(HTML5Backend)(App);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragSource(type, spec, collect)(MyComponent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dnd&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent2&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DropTarget(types, spec, collect)(MyComponent2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，MyComponent 就变得可以拖拽，而 MyComponent2 就变得可以接受拖拽了，但这并不代表 MyComponent 可以放到 MyComponent2 中！&lt;/p&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;React DnD 中有一些特殊的概念，理解这些概念之后才能活用这个库！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Backend&lt;/code&gt; 实现 DnD 的方式，默认是用 HTML5 DnD API，它不能在触屏环境下工作，而且在 IE 下可定制性比其他浏览器弱。你也可以用自己实现，具体请看官方文档。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Items&lt;/code&gt; 拖拽数据的表现形式，用 Object 来表示。譬如，要拖拽一张卡片，那这张卡片的&lt;strong&gt;数据&lt;/strong&gt;的表现形式可能是 &lt;code&gt;{ id: xxx, content: yyy }&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Types&lt;/code&gt; 表示拖/放组件的兼容性，&lt;code&gt;DragSource&lt;/code&gt; 和 &lt;code&gt;DropTarget&lt;/code&gt; 必须指定 &lt;code&gt;type&lt;/code&gt;。只有在 &lt;code&gt;type&lt;/code&gt; 相同的情况下，&lt;code&gt;DragSource&lt;/code&gt; 才能放到 &lt;code&gt;DropTarget&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monitors&lt;/code&gt; 用来响应拖拽事件，可以用来更新组件的的状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Connectors&lt;/code&gt; 底层接触 DOM 的东西，用来封装你的组件，让你的组件有拖拽的特性。一般在 collect 方法中指定，然后注入到组件的 props 中，最后 render 方法中包装你自己的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DragSource &amp;amp;&amp;amp; DropTarget&lt;/code&gt; 把上面的概念都绑在一起的东西，也是真正跟你的组件打交道的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主要-API-介绍&quot;&gt;&lt;a href=&quot;#主要-API-介绍&quot; class=&quot;headerlink&quot; title=&quot;主要 API 介绍&quot;&gt;&lt;/a&gt;主要 API 介绍&lt;/h2&gt;&lt;p&gt;这些主要 API 都是通过包装你的组件，然后返回一个新的组件。&lt;/p&gt;
&lt;h3 id=&quot;DragDropContext-backend&quot;&gt;&lt;a href=&quot;#DragDropContext-backend&quot; class=&quot;headerlink&quot; title=&quot;DragDropContext(backend)&quot;&gt;&lt;/a&gt;DragDropContext(backend)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;backend&lt;/code&gt; 实现 DnD 的方式，一般是 HTML5Backend&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragDropContext(HTML5Backend)(App);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-type-spec-collect&quot;&gt;&lt;a href=&quot;#DragSource-type-spec-collect&quot; class=&quot;headerlink&quot; title=&quot;DragSource(type, spec, collect)&quot;&gt;&lt;/a&gt;DragSource(type, spec, collect)&lt;/h3&gt;&lt;h3 id=&quot;DropTarget-type-spec-collect&quot;&gt;&lt;a href=&quot;#DropTarget-type-spec-collect&quot; class=&quot;headerlink&quot; title=&quot;DropTarget(type, spec, collect)&quot;&gt;&lt;/a&gt;DropTarget(type, spec, collect)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 必须。type 是自定义的，可以是 string，symbol，也可以是用一个函数来返回该组件的其他 props。该组件只能放到相同 type 的 DropTarget 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt; 必须。一个带有特定方法的纯 Object，里面是一些响应拖拽事件的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collect&lt;/code&gt; 必须。一个函数返回一个 Object，这个 Object 会注入到组件的 props 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; 可选。除非有性能问题，否则不需要关心这个参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; type = &lt;span class=&quot;string&quot;&gt;&#39;xxx&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123; ... &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;connect, monitor&lt;/span&gt;) &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DragSource(type, spec, collect)(MyComponent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; DropTarget(type, spec, collect)(MyComponent2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-spec&quot;&gt;&lt;a href=&quot;#DragSource-spec&quot; class=&quot;headerlink&quot; title=&quot;DragSource#spec&quot;&gt;&lt;/a&gt;DragSource#spec&lt;/h3&gt;&lt;p&gt;让你的组件响应 dnd 相关事件，支持以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beginDrag(props, monitor, component)&lt;/code&gt; &lt;strong&gt;必须&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endDrag(props, monitor, component)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canDrag(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isDragging(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; 组件当前的 props&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 是一个 &lt;code&gt;DragSourceMonitor&lt;/code&gt; 实例，用来查询当前 drag state 的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt; 表示当前组件，可以省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    beginDrag(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	id: props.id, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	content: props.content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DropTarget-spec&quot;&gt;&lt;a href=&quot;#DropTarget-spec&quot; class=&quot;headerlink&quot; title=&quot;DropTarget#spec&quot;&gt;&lt;/a&gt;DropTarget#spec&lt;/h3&gt;&lt;p&gt;让你的组件响应 dnd 相关事件，支持以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop(props, monitor, component)&lt;/code&gt; 可选，响应 drop 事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hover(props, monitor, component)&lt;/code&gt; 可选&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canDrop(props, monitor)&lt;/code&gt; 可选&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; 组件当前的 props&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 是一个 &lt;code&gt;DropTargetMonitor&lt;/code&gt; 实例，用来查询当前 drag state 的信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;component&lt;/code&gt; 表示当前组件，可以省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; spec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	drop(props, monitor, component) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 获取正在拖放的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; item = monitor.getItem();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 更新组件状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		component.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;DragSource-collect-connect-monitor&quot;&gt;&lt;a href=&quot;#DragSource-collect-connect-monitor&quot; class=&quot;headerlink&quot; title=&quot;DragSource#collect(connect, monitor)&quot;&gt;&lt;/a&gt;DragSource#collect(connect, monitor)&lt;/h3&gt;&lt;h3 id=&quot;DropTarget-collect-connect-monitor&quot;&gt;&lt;a href=&quot;#DropTarget-collect-connect-monitor&quot; class=&quot;headerlink&quot; title=&quot;DropTarget#collect(connect, monitor)&quot;&gt;&lt;/a&gt;DropTarget#collect(connect, monitor)&lt;/h3&gt;&lt;p&gt;返回一个 object，这个 object 可以会注入到组件的 props 中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connect&lt;/code&gt; 一个 &lt;code&gt;DragSourceConnector&lt;/code&gt;/&lt;code&gt;DropTargetConnector&lt;/code&gt; 实例，可以用 &lt;code&gt;connect.dragSource()&lt;/code&gt;/&lt;code&gt;connect.dropTarget()&lt;/code&gt; 来封装我们的组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monitor&lt;/code&gt; 一个 &lt;code&gt;DragSourceMonitor&lt;/code&gt;/&lt;code&gt;DropTargetMonitor&lt;/code&gt; 实例，用来查询当前拖拽的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;connect, monitor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isDragging: monitor.isDragging(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        connectDragSource: connect.dragSource()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 可以访问 collect 中返回的  object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; isDragging, connectDragSource &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 需要用 connect.dragSource()/connect.dropTarget() 封装自己的组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connectDragSource(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;具体例子&quot;&gt;&lt;a href=&quot;#具体例子&quot; class=&quot;headerlink&quot; title=&quot;具体例子&quot;&gt;&lt;/a&gt;具体例子&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gaearon.github.io/react-dnd/examples-chessboard-tutorial-app.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gaearon/react-dnd/tree/master/examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://gaearon.github.io/react-dnd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;React DnD 是一组 React 高阶组件，可以用来帮你构建复杂的拖拽接口，同时解耦你的组件。React DnD 非常适合像 Trel
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="dnd" scheme="http://scarletsky.github.io/tags/dnd/"/>
    
      <category term="javascript" scheme="http://scarletsky.github.io/tags/javascript/"/>
    
      <category term="react" scheme="http://scarletsky.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>写在二十四岁生日</title>
    <link href="http://scarletsky.github.io/2015/10/25/birthday-summary/"/>
    <id>http://scarletsky.github.io/2015/10/25/birthday-summary/</id>
    <published>2015-10-25T09:38:50.000Z</published>
    <updated>2016-02-29T04:33:49.000Z</updated>
    
    <content type="html">&lt;p&gt;又一年过去了，今年是第四年。&lt;br&gt;今年的生日是和女朋友一起，平平淡淡地过的。&lt;br&gt;回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。&lt;/p&gt;
&lt;p&gt;相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着去挤时间——把上下班坐地铁/公交的时间利用起来。于是乎，这一年下来看的书大概有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《三体系列》&lt;/li&gt;
&lt;li&gt;《啊哈，算法》&lt;/li&gt;
&lt;li&gt;《黑客与画家》&lt;/li&gt;
&lt;li&gt;《Rework-重来：更为简单有效的商业思维》&lt;/li&gt;
&lt;li&gt;《失控》&lt;/li&gt;
&lt;li&gt;《教训》&lt;/li&gt;
&lt;li&gt;《跨界》&lt;/li&gt;
&lt;li&gt;《把时间当朋友》&lt;/li&gt;
&lt;li&gt;《JavaScript 函数式编程》&lt;/li&gt;
&lt;li&gt;《The Little Schemer》&lt;/li&gt;
&lt;li&gt;《实用 Common Lisp 编程》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有其他还没看完的技术书/文章。&lt;br&gt;这样看下来今年看得书不多不少，时间利用率还算可以吧。&lt;/p&gt;
&lt;p&gt;从上面的书单可以看到，其实我今年开始去学习函数式语言了。我想去了解下面向对象之外的世界是怎样的。至于到底会不会用上这些技术，以后才知道，现在只管学就好了。&lt;/p&gt;
&lt;p&gt;工作上面，今年年中的时候以前的老大找过我，问我要不要跟他一起干，说他能给我我现在拥有的一切给我，还把项目的一切控制权交给我，其实他们的项目前景还是挺好的，但跟我的技术栈不符合，加上我对他们所在行业不太感兴趣，所以只好推掉了~看以后还有没有机会合作~&lt;/p&gt;
&lt;p&gt;另外，我今年还试着做了一个开源的网站，&lt;a href=&quot;http://aniquo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://aniquo.com&lt;/a&gt; 大家有兴趣的可以去围观一下。没什么特别有趣的东西，只有我自己收录的一些经典的语录而已。本来是想把它做成一个语录搜索系统的，但精力有限，现阶段大概算是一个可用的版本。至于用户量，从头到尾都只有我一个，233. 继续做这个的原因，只剩下情怀了。如果有人有兴趣的话，联系我吧~至于源码，到 github 搜下就找到了，写的很烂的东西。&lt;/p&gt;
&lt;p&gt;今年的总结大概就这些了~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又一年过去了，今年是第四年。&lt;br&gt;今年的生日是和女朋友一起，平平淡淡地过的。&lt;br&gt;回顾今年，我做的事情基本都是读书，学习，工作，陪妹子。&lt;/p&gt;
&lt;p&gt;相信大家都知道读书的好处，但很多人在工作之后都会抱怨没时间读书，包括我自己。但人们常说，时间是挤出来的。所以，我也试着
    
    </summary>
    
      <category term="life" scheme="http://scarletsky.github.io/categories/life/"/>
    
    
      <category term="bitrhday" scheme="http://scarletsky.github.io/tags/bitrhday/"/>
    
      <category term="life" scheme="http://scarletsky.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 中 Stream API 的使用</title>
    <link href="http://scarletsky.github.io/2015/10/22/node-stream-api-learning/"/>
    <id>http://scarletsky.github.io/2015/10/22/node-stream-api-learning/</id>
    <published>2015-10-22T09:09:06.000Z</published>
    <updated>2016-02-29T04:34:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;在 Node.js 中，读取文件的方式有两种，一种是用 &lt;code&gt;fs.readFile&lt;/code&gt;，另外一种是利用 &lt;code&gt;fs.createReadStream&lt;/code&gt; 来读取。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fs.readFile&lt;/code&gt; 对于每个 Node.js 使用者来说最熟悉不过了，简单易懂，很好上手。但它的缺点是会先将数据全部读入内存，一旦遇到大文件的时候，这种方式读取的效率就非常低下了。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;fs.createReadStream&lt;/code&gt; 则是通过 Stream 来读取数据，它会把文件（数据）分割成小块，然后触发一些特定的事件，我们可以监听这些事件，编写特定的处理函数。这种方式相对上面来说，并不好上手，但它效率非常高。&lt;/p&gt;
&lt;p&gt;事实上， Stream 在 Node.js 中并非仅仅用在文件处理上，其他地方也可以看到它的身影，如 &lt;code&gt;process.stdin/stdout&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;tcp sockets&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, &lt;code&gt;crypto&lt;/code&gt; 等都有用到。&lt;/p&gt;
&lt;p&gt;本文是我学习 Node.js 中的 Stream API 中的一点总结，希望对大家有用。&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于事件通讯&lt;/li&gt;
&lt;li&gt;可以通过 &lt;code&gt;pipe&lt;/code&gt; 来连接流&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;种类&quot;&gt;&lt;a href=&quot;#种类&quot; class=&quot;headerlink&quot; title=&quot;种类&quot;&gt;&lt;/a&gt;种类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Readable Stream  可读数据流&lt;/li&gt;
&lt;li&gt;Writeable Stream  可写数据流&lt;/li&gt;
&lt;li&gt;Duplex Stream  双向数据流，可以同时读和写&lt;/li&gt;
&lt;li&gt;Transform Stream 转换数据流，可读可写，同时可以转换（处理）数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;h3 id=&quot;可读数据流的事件&quot;&gt;&lt;a href=&quot;#可读数据流的事件&quot; class=&quot;headerlink&quot; title=&quot;可读数据流的事件&quot;&gt;&lt;/a&gt;可读数据流的事件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readable&lt;/code&gt; 数据向外流时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 对于那些没有显式暂停的数据流，添加data事件监听函数，会将数据流切换到流动态，尽快向外提供数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; 读取完数据时触发。注意不能和 &lt;code&gt;writeableStream.end()&lt;/code&gt; 混淆，writeableStream 并没有 end 事件，只有 &lt;code&gt;.end()&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close&lt;/code&gt; 数据源关闭时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 读取数据发生错误时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;可写数据流的事件&quot;&gt;&lt;a href=&quot;#可写数据流的事件&quot; class=&quot;headerlink&quot; title=&quot;可写数据流的事件&quot;&gt;&lt;/a&gt;可写数据流的事件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drain&lt;/code&gt; &lt;code&gt;writable.write(chunk)&lt;/code&gt; 返回 false 之后，缓存全部写入完成，可以重新写入时就会触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finish&lt;/code&gt; 调用 &lt;code&gt;.end&lt;/code&gt; 方法时，所有缓存的数据释放后触发，类似于可读数据流中的 &lt;strong&gt;end&lt;/strong&gt; 事件，表示写入过程结束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipe&lt;/code&gt; 作为 pipe 目标时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpipe&lt;/code&gt; 作为 unpipe 目标时触发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 写入数据发生错误时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;p&gt;可读数据流有两种状态：&lt;strong&gt;流动态&lt;/strong&gt; 和 &lt;strong&gt;暂停态&lt;/strong&gt;，改变数据流状态的方法如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;暂停态 -&amp;gt; 流动态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加 data 事件的监听函数&lt;/li&gt;
&lt;li&gt;调用 resume 方法&lt;/li&gt;
&lt;li&gt;调用 pipe 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果转为流动态时，没有 data 事件的监听函数，也没有 pipe 方法的目的地，那么数据将遗失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流动态 -&amp;gt; 暂停态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不存在 pipe 方法的目的地时，调用 pause 方法&lt;/li&gt;
&lt;li&gt;存在 pipe 方法的目的地时，移除所有 data 事件的监听函数，并且调用 unpipe 方法，移除所有 pipe 方法的目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 只移除 data 事件的监听函数，并不会自动引发数据流进入「暂停态」。另外，存在 pipe 方法的目的地时，调用 pause 方法，并不能保证数据流总是处于暂停态，一旦那些目的地发出数据请求，数据流有可能会继续提供数据。&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;h3 id=&quot;读写文件&quot;&gt;&lt;a href=&quot;#读写文件&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新建可读数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rs = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./test1.txt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新建可写数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ws = fs.createWriteStream(&lt;span class=&quot;string&quot;&gt;&#39;./test2.txt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听可读数据流结束事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;read text1.txt successfully!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听可写数据流结束事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ws.on(&lt;span class=&quot;string&quot;&gt;&#39;finish&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;write text2.txt successfully!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 把可读数据流转换成流动态，流进可写数据流中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.pipe(ws);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;读取-CSV-文件，并上传数据（我在生产环境中写过）&quot;&gt;&lt;a href=&quot;#读取-CSV-文件，并上传数据（我在生产环境中写过）&quot; class=&quot;headerlink&quot; title=&quot;读取 CSV 文件，并上传数据（我在生产环境中写过）&quot;&gt;&lt;/a&gt;读取 CSV 文件，并上传数据（我在生产环境中写过）&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; es = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;event-stream&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; csv = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;csv&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parser = csv.parse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; transformer = csv.transform(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;record&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; record.join(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;&#39;./demo.csv&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(parser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(transformer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 处理前一个 stream 传递过来的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(es.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        upload(data, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callback(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 相当于监听前一个 stream 的 end 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(es.wait(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        process.stdout.write(&lt;span class=&quot;string&quot;&gt;&#39;done!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;更多用法&quot;&gt;&lt;a href=&quot;#更多用法&quot; class=&quot;headerlink&quot; title=&quot;更多用法&quot;&gt;&lt;/a&gt;更多用法&lt;/h3&gt;&lt;p&gt;可以参考一下 &lt;a href=&quot;https://github.com/jeresig/node-stream-playground&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jeresig/node-stream-playground&lt;/a&gt; ，进去示例网站之后直接点 add stream 就能看到结果了。&lt;/p&gt;
&lt;h2 id=&quot;常见坑&quot;&gt;&lt;a href=&quot;#常见坑&quot; class=&quot;headerlink&quot; title=&quot;常见坑&quot;&gt;&lt;/a&gt;常见坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;rs.pipe(ws)&lt;/code&gt; 的方式来写文件并不是把 rs 的内容 append 到 ws 后面，而是直接用 rs 的内容覆盖 ws 原有的内容&lt;/li&gt;
&lt;li&gt;已结束/关闭的流不能重复使用，必须重新创建数据流&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pipe 方法返回的是目标数据流，如 &lt;code&gt;a.pipe(b)&lt;/code&gt; 返回的是 b，因此监听事件的时候请注意你监听的对象是否正确&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果你要监听多个数据流，同时你又使用了 pipe 方法来串联数据流的话，你就要写成：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;data end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;a end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .pipe(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;b end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用类库&quot;&gt;&lt;a href=&quot;#常用类库&quot; class=&quot;headerlink&quot; title=&quot;常用类库&quot;&gt;&lt;/a&gt;常用类库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dominictarr/event-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;event-stream&lt;/a&gt; 用起来有函数式编程的感觉，个人比较喜欢&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/awesome-nodejs#streams&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-nodejs#streams&lt;/a&gt; 由于其他 stream 库我都没用过，所以有需求的就直接看这里吧&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰 - stream接口&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://nodejs.org/api/stream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs.org Stream&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://codewinds.com/blog/2013-08-20-nodejs-transform-streams.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transforming data with Node.js transform streams&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18335499/nodejs-whats-the-difference-between-a-duplex-stream-and-a-transform-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NodeJS: What’s the difference between a Duplex stream and a Transform stream?&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;p&gt;在 Node.js 中，读取文件的方式有两种，一种是用 &lt;code&gt;fs.readFile&lt;/code&gt;，另外一种是利用 &lt;
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="nodejs" scheme="http://scarletsky.github.io/tags/nodejs/"/>
    
      <category term="stream" scheme="http://scarletsky.github.io/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 学习笔记</title>
    <link href="http://scarletsky.github.io/2015/08/19/commonjs-learning/"/>
    <id>http://scarletsky.github.io/2015/08/19/commonjs-learning/</id>
    <published>2015-08-19T02:11:10.000Z</published>
    <updated>2016-02-29T04:38:24.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。&lt;/p&gt;
&lt;p&gt;根据 CommonJS 规范，一个 JavaScript 文件就是一个模块，其他模块可以通过 &lt;code&gt;require&lt;/code&gt; 来获取 &lt;code&gt;module.exports&lt;/code&gt; 中暴露的内容，而其他部分都是私有的，其他模块不能访问。&lt;/p&gt;
&lt;h1 id=&quot;module-对象&quot;&gt;&lt;a href=&quot;#module-对象&quot; class=&quot;headerlink&quot; title=&quot;module 对象&quot;&gt;&lt;/a&gt;module 对象&lt;/h1&gt;&lt;p&gt;每个模块都有一个module变量，该变量指向当前模块。module不是全局变量，而是每个模块都有的本地变量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.id&lt;/code&gt; 模块的识别符，通常是带有绝对路径的模块文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.filename&lt;/code&gt; 模块的文件名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.loaded&lt;/code&gt; 返回一个布尔值，表示模块是否已经完成加载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.parent&lt;/code&gt; 返回一个对象，表示调用该模块的模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.children&lt;/code&gt; 返回一个数组，表示该模块要用到的其他模块。数组中的内容是其他要用到的模块的 &lt;code&gt;module&lt;/code&gt; 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.paths&lt;/code&gt; 返回一个数组，表示模块查找路径，排在越前面的优先级越高。具体请查看 &lt;a href=&quot;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;module.exports&lt;/code&gt; 表示其他模块可以通过 &lt;code&gt;require&lt;/code&gt; 获取的内容。默认情况下是一个空对象，即 &lt;code&gt;{}&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;module-exports-和-exports&quot;&gt;&lt;a href=&quot;#module-exports-和-exports&quot; class=&quot;headerlink&quot; title=&quot;module.exports 和 exports&quot;&gt;&lt;/a&gt;module.exports 和 exports&lt;/h1&gt;&lt;p&gt;默认情况下，&lt;code&gt;module.exports&lt;/code&gt; 和 &lt;code&gt;exports&lt;/code&gt; 两者是等价的，即 &lt;code&gt;module.exports === exports&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exports&lt;/code&gt; 只是为了方便我们编码而添加的，相当于在每个文件中自动添加了 &lt;code&gt;var exports = module.exports&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以根据个人喜好，把需要暴露的东西挂在 &lt;code&gt;exports&lt;/code&gt; 或 &lt;code&gt;module.exports&lt;/code&gt; 下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，必须注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不能把 &lt;code&gt;exports&lt;/code&gt; 重新赋值，因为这样会令 &lt;code&gt;exports&lt;/code&gt; 不再指向 &lt;code&gt;module.exports&lt;/code&gt;，这样 &lt;code&gt;exports&lt;/code&gt; 就没用了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可以通过 &lt;code&gt;module.exports = function() {...}&lt;/code&gt; 这种方式指定 &lt;code&gt;module.exports&lt;/code&gt; 的指向，这样在其他模块中 &lt;code&gt;require&lt;/code&gt; 这个模块，获得的就是一个 &lt;code&gt;function&lt;/code&gt;，而不是一个对象。这样做也会导致 &lt;code&gt;exports&lt;/code&gt; 失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于上面的原因，我们会在很多地方看到 &lt;code&gt;module.exports = exports = xxx&lt;/code&gt; 这样的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/nodejs/commonjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://javascript.ruanyifeng.com/nodejs/commonjs.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/nodejs-module-mechanism/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-node-js&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;CommonJS 是 JavaScript 模块化的规范，Node.js采用了这个规范。&lt;/p&gt;
&lt;p&gt;根据 CommonJS 规范，一个 
    
    </summary>
    
      <category term="javascript" scheme="http://scarletsky.github.io/categories/javascript/"/>
    
    
      <category term="commonjs" scheme="http://scarletsky.github.io/tags/commonjs/"/>
    
  </entry>
  
</feed>
